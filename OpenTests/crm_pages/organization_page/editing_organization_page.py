import time

import allure
from selenium.common import ElementClickInterceptedException, TimeoutException

from base_page.base_page import BasePageCrm
from base_page.base_page_locators import BaseCrmLocators
from base_page.raise_exceptions import MyTimeoutException
from crm_pages.contract_page.contract_page_locators import ContractPageLocators
from crm_pages.organization_page.editing_organization_page_locators import EditingOrganizationLocators, \
    ModalCreateTransactionLocators, TitleDiscountsLocators, TitleTransactionLocators, ModalEditPhoneLocators, \
    ModalEditAddressLocators
from crm_pages.modal_new_kp.modal_new_kp_locators import ModalNewKpLocators
from crm_pages.object_page.object_page import KpTab


@allure.feature('Страница редактирования организации')
class EditingOrganization(BasePageCrm):
    """Страница редактирования организации"""

    def go_to_title_transactions(self):
        """Переход на вкладку Сделки"""
        with allure.step('Переход на вкладку Сделки'):
            try:
                self.expecting_clickability(EditingOrganizationLocators.LOCATOR_TITLE_TRANSACTIONS)
                button_transactions = self.find_element(EditingOrganizationLocators.LOCATOR_TITLE_TRANSACTIONS)
                button_transactions.click()
                time.sleep(0.1)
                self.waiting_element_is_visibility_on_the_page(EditingOrganizationLocators.LOCATOR_BUTTON_CREATE)
            except ElementClickInterceptedException:
                self.driver.refresh()
                time.sleep(0.5)
                self.expecting_clickability(EditingOrganizationLocators.LOCATOR_TITLE_TRANSACTIONS)
                button_transactions = self.find_element(EditingOrganizationLocators.LOCATOR_TITLE_TRANSACTIONS)
                button_transactions.click()
                time.sleep(1)
                # self.waiting_for_loader_processing(EditingOrganizationLocators.LOCATOR_LOADER_IN_TITLE_TRANSACTIONS)
                self.waiting_element_is_visibility_on_the_page(EditingOrganizationLocators.LOCATOR_BUTTON_CREATE)

    def go_to_title_discounts(self):
        """Переход на вкладку Скидки"""
        with allure.step('Переход на вкладку Скидки'):
            try:
                self.waiting_element_is_visibility_on_the_page(EditingOrganizationLocators.LOCATOR_TITLE_DISCOUNTS,
                                                               sec=10)
                button_discounts = self.find_element(EditingOrganizationLocators.LOCATOR_TITLE_DISCOUNTS)
                self.click_js(button_discounts)
                self.waiting_element_is_visibility_on_the_page(
                    EditingOrganizationLocators.LOCATOR_COLUMN_HEADING_CONTRACT)
            except ElementClickInterceptedException:
                self.driver.refresh()
                time.sleep(0.5)
                self.expecting_clickability(EditingOrganizationLocators.LOCATOR_TITLE_DISCOUNTS)
                button_discounts = self.find_element(EditingOrganizationLocators.LOCATOR_TITLE_DISCOUNTS)
                self.click_js(button_discounts)
                time.sleep(1)
                # self.waiting_for_loader_processing(EditingOrganizationLocators.LOCATOR_LOADER_IN_TITLE_TRANSACTIONS)
                self.waiting_element_is_visibility_on_the_page(
                    EditingOrganizationLocators.LOCATOR_COLUMN_HEADING_CONTRACT)

    def save_inn_organization(self) -> str:
        """Сохранение ИНН организации"""
        with allure.step('Сохранение ИНН организации'):
            with allure.step('Сохранение ИНН организации'):
                self.waiting_element_is_visibility_located_dom(
                    EditingOrganizationLocators.LOCATOR_INPUT_INN_ORGANIZATION,
                    sec=5)
                inn_organization = self.find_element(
                    EditingOrganizationLocators.LOCATOR_INPUT_INN_ORGANIZATION).get_attribute('value')
                return inn_organization

    def click_btn_kp_rol(self):
        """Клик по кнопке +КП РОЛ"""
        with allure.step('Клик по кнопке +КП РОЛ'):
            self.expecting_clickability(EditingOrganizationLocators.LOCATOR_BTN_KP_ROL, sec=5)
            btn_kp_rol = self.find_element(EditingOrganizationLocators.LOCATOR_BTN_KP_ROL)
            btn_kp_rol.click()
            self.waiting_element_is_visibility_on_the_page(ModalNewKpLocators.LOCATOR_MODAL_NEW_KP, sec=7)

    def should_inn(self, expected_inn: str):
        """
        Должен быть определенный ИНН
        :param expected_inn: Ожидаемый ИНН
        """
        with allure.step(f'Должен быть определенный ИНН - {expected_inn}'):
            inn_on_page = self.save_inn_organization()
            assert inn_on_page == expected_inn, \
                f'ИНН организации на странице - ({inn_on_page}) не соответствует ожидаемому - ({expected_inn})'

    def save_search_title(self) -> str:
        """
        Сохранение названия для поиска
        :return: Название для поиска
        """
        with allure.step('Сохранение названия для поиска'):
            self.waiting_element_is_visibility_located_dom(EditingOrganizationLocators.LOCATOR_INPUT_SEARCH_TITLE)
            text_input_search_title = self.find_element(
                EditingOrganizationLocators.LOCATOR_INPUT_SEARCH_TITLE).get_attribute('value')
            return text_input_search_title

    def should_search_title(self, expected_search_title: str):
        """
        Должно быть определенное значение в поле Название для поиска
        :param expected_search_title: Ожидаемое значение Название для поиска
        """
        with (allure.step(f'Должно быть определенное значение - ({expected_search_title}) в поле Название для поиска')):
            search_title_on_page = self.save_search_title()
            assert search_title_on_page == expected_search_title, \
                (f'Значение в поле Название для поиска - ({search_title_on_page}) не соответствует ожидаемому - '
                 f'({expected_search_title})')

    def save_selected_form(self) -> str:
        """Сохранение выбранной формы"""
        with allure.step('Сохранение выбранной формы'):
            self.waiting_element_is_visibility_located_dom(EditingOrganizationLocators.LOCATOR_SELECTED_FORM)
            selected_form = self.find_element(EditingOrganizationLocators.LOCATOR_SELECTED_FORM).text
            return selected_form

    def should_form(self, expected_form: str):
        """
        Должно быть определенное значение в поле Форма
        :param expected_form: Ожидаемое значение в поле Форма
        """
        with (allure.step(f'Должно быть определенное значение - ({expected_form}) в поле Форма')):
            selected_form_on_page = self.save_selected_form()
            assert selected_form_on_page == expected_form, \
                f'Значение в поле Форма - ({selected_form_on_page}) не соответствует ожидаемому ({expected_form})'

    def save_selected_player(self) -> str:
        """Сохранение выбранного значения в поле Игрок"""
        with allure.step('Сохранение выбранного значения в поле Игрок'):
            self.waiting_element_is_visibility_on_the_page(EditingOrganizationLocators.LOCATOR_SELECTED_PLAYER, sec=5)
            player_on_page = self.find_element(EditingOrganizationLocators.LOCATOR_SELECTED_PLAYER).text
            return player_on_page

    def should_player(self, expected_player):
        """
        Должен быть выбран Игрок
        :param expected_player: Ожидаемое выбранное значение в поле Игрок
        """
        with (allure.step(f'Должен быть выбран Игрок {expected_player}')):
            selected_player = self.save_selected_player()
            assert expected_player == selected_player, \
                f'Выбранное значение в поле Игрок - ({selected_player}) не соответствует ожидаемому - ({expected_player})'

    def save_selected_responsible_manager(self) -> str:
        """Сохранение выбранного ответственного менеджера"""
        self.waiting_element_is_visibility_on_the_page(EditingOrganizationLocators.LOCATOR_SELECTED_RESPONSIBLE_MANAGER,
                                                       sec=5)
        selected_manager = self.find_element(EditingOrganizationLocators.LOCATOR_SELECTED_RESPONSIBLE_MANAGER).text
        return selected_manager

    def should_responsible_manager(self, expected_responsible_manager: str):
        """
        Должен быть выбран определенный ответственный менеджер
        :param expected_responsible_manager: Ожидаемое значение выбранного ответственного менеджера
        """
        with (allure.step(f'Должен быть выбран определенный ответственный менеджер - {expected_responsible_manager}')):
            selected_manager = self.save_selected_responsible_manager()

            parts = expected_responsible_manager.split()
            expected_responsible_manager = f"{parts[0]} {parts[1][0]}. {parts[2][0]}."

            assert selected_manager == expected_responsible_manager, \
                (f'Выбранный ответственный менеджер - ({selected_manager}) не соответствует ожидаемому - '
                 f'({expected_responsible_manager})')

    def activate_ul_direction(self, item_ul: str):
        """
        Активация выпадающего списка Направление
        :param item_ul: Элемент в выпадающем списке
        """
        with allure.step('Активация выпадающего списка Направление'):
            self.waiting_element_is_visibility_on_the_page(
                EditingOrganizationLocators.LOCATOR_BTN_ACTIVATE_UL_DIRECTION, sec=5)
            btn_activate_ul_direction = self.find_element(EditingOrganizationLocators.LOCATOR_BTN_ACTIVATE_UL_DIRECTION)
            btn_activate_ul_direction.click()
            self.waiting_element_is_visibility_on_the_page(EditingOrganizationLocators.locator_item_ul_by_text(item_ul),
                                                           sec=5)

    def choice_direction(self, direction: str):
        """
        Выбор направления
        :param direction: направление для выбора
        """
        with allure.step(f'Выбор направления {direction}'):
            self.activate_ul_direction(direction)
            item_direction = self.find_element(EditingOrganizationLocators.locator_item_ul_by_text(direction))
            item_direction.click()

    def should_directions(self, expected_direction: list):
        """
        Должны быть выбраны определенный направления
        :param expected_direction: Список ожидаемых направлений
        """
        with (allure.step(f'Должны быть выбраны определенный направления - {expected_direction}')):
            self.waiting_element_is_visibility_on_the_page(EditingOrganizationLocators.LOCATOR_SELECTED_DIRECTION,
                                                           sec=5)
            selected_list_direction = self.find_elements(EditingOrganizationLocators.LOCATOR_SELECTED_DIRECTION)
            selected_list_direction = [el.text for el in selected_list_direction].sort()
            expected_direction = expected_direction.sort()

            assert selected_list_direction == expected_direction, \
                (f'Выбранные направления в карточке организации - ({selected_list_direction}) '
                 f'не соответствуют ожидаемым - ({expected_direction})')

    def activate_ul_segment(self, item_ul: str):
        """Активация выпадающего списка Сегмент"""
        with allure.step('Активация выпадающего списка Направление'):
            self.waiting_element_is_visibility_on_the_page(
                EditingOrganizationLocators.LOCATOR_ACTIVATE_UL_SEGMENTS, sec=5)
            btn_activate_ul_direction = self.find_element(EditingOrganizationLocators.LOCATOR_ACTIVATE_UL_SEGMENTS)
            btn_activate_ul_direction.click()
            self.waiting_element_is_visibility_on_the_page(EditingOrganizationLocators.locator_item_ul_by_text(item_ul),
                                                           sec=5)

    def choice_segment(self, segment_value: str):
        """
        Выбор сегмента
        :param segment_value: Значение сегмента для выбора
        """
        self.activate_ul_segment(segment_value)
        with allure.step(f'Выбор сегмента {segment_value}'):
            item_segment = self.find_element(EditingOrganizationLocators.locator_item_ul_by_text(segment_value))
            item_segment.click()

    def should_segment(self, expected_segments: list):
        """
        Должен быть выбран определенный/определенные сегмент(ы)
        :param expected_segments: Список ожидаемых сегментов
        """
        with allure.step(f'Должен быть выбран определенный/определенные сегмент(ы) - {expected_segments}'):
            self.waiting_element_is_visibility_on_the_page(EditingOrganizationLocators.LOCATOR_SELECTED_SEGMENTS, sec=5)
            selected_list_segment = self.find_elements(EditingOrganizationLocators.LOCATOR_SELECTED_SEGMENTS)
            selected_list_segment = [el.text for el in selected_list_segment].sort()
            expected_segments = expected_segments.sort()

            assert selected_list_segment == expected_segments, \
                (f'Выбранные сегменты в карточке организации - ({selected_list_segment}) '
                 f'не соответствуют ожидаемым - ({expected_segments})')

    def click_btn_plus_contact(self):
        """Клик по кнопке +Контакт"""
        with allure.step('Клик по кнопке +Контакт'):
            self.waiting_element_is_visibility_on_the_page(EditingOrganizationLocators.LOCATOR_BTN_PLUS_CONTACT, sec=5)
            btn_plus_contact = self.find_element(EditingOrganizationLocators.LOCATOR_BTN_PLUS_CONTACT)
            btn_plus_contact.click()
            self.waiting_element_is_visibility_on_the_page(EditingOrganizationLocators.LOCATOR_UL_MENU_PLUS_CONTACT,
                                                           sec=5)

    def choice_item_in_ul_plus_contact(self, item_name: str):
        """
        Выбор элемента в выпадающем меню +Контакт
        :param item_name: Наименование элемента для выбора
        """
        with allure.step(f'Выбор элемента {item_name} в выпадающем меню +Контакт'):
            self.waiting_element_is_visibility_on_the_page(
                EditingOrganizationLocators.locator_item_ul_by_text(item_name), sec=5)
            item_ul_plus_contact = self.find_element(EditingOrganizationLocators.locator_item_ul_by_text(item_name))
            item_ul_plus_contact.click()

    def should_phone_in_chapter_contacts(self, expected_phone: str):
        """
        Должен быть определенный номер телефона в разделе Контакты
        :param expected_phone: Ожидаемый телефон (без кода +7 или 8)
        """
        with (allure.step(f'Должен быть определенный номер телефона в разделе Контакты - {expected_phone}')):
            self.waiting_element_is_visibility_on_the_page(
                EditingOrganizationLocators.LOCATOR_PHONE_IN_CHAPTER_CONTACTS, sec=5)
            phone_on_page = self.find_element(EditingOrganizationLocators.LOCATOR_PHONE_IN_CHAPTER_CONTACTS).text.split(
                '+7 ')[1]

            assert phone_on_page == expected_phone, \
                f'Номер телефона в разделе Контакты - {phone_on_page} не соответствует ожидаемому - {expected_phone}'


class ModalEditPhone(BasePageCrm):
    """Модалка Редактирование телефона"""

    def should_header(self):
        """Должен быть заголовок"""
        with allure.step('Должен быть заголовок'):
            try:
                self.waiting_element_is_visibility_on_the_page(ModalEditPhoneLocators.LOCATOR_HEADER, sec=5)
            except TimeoutException:
                raise MyTimeoutException('В модалке редактирования телефона не найден заголовок')

    def filling_phone(self, value_phone: str):
        """
        Ввод номера телефона
        :param value_phone: Номер телефона для ввода
        """
        with allure.step(f'Ввод номера телефона {value_phone}'):
            self.waiting_element_is_visibility_on_the_page(ModalEditPhoneLocators.LOCATOR_INPUT_PHONE, sec=5)
            input_phone = self.find_element(ModalEditPhoneLocators.LOCATOR_INPUT_PHONE)
            input_phone.send_keys(value_phone)

            entered_phone = input_phone.get_attribute('value')
            assert entered_phone == value_phone, \
                f'Номер телефона в поле ввода - {entered_phone} не соответствует вводимому - {value_phone}'

    def click_btn_save(self):
        """Клик по кнопке Сохранить"""
        self.waiting_element_is_visibility_on_the_page(ModalEditPhoneLocators.LOCATOR_BTN_SAVE, sec=5)
        btn_save = self.find_element(ModalEditPhoneLocators.LOCATOR_BTN_SAVE)
        btn_save.click()
        self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER)


class ModalEditAddress(BasePageCrm):
    """Модалка Редактирование адреса"""

    def should_header(self):
        """Должен быть заголовок"""
        with allure.step('Должен быть заголовок'):
            try:
                self.waiting_element_is_visibility_on_the_page(ModalEditAddressLocators.LOCATOR_HEADER, sec=5)
            except TimeoutException:
                raise MyTimeoutException('В модалке редактирования адреса не найден заголовок')




@allure.feature('Вкладка Сделки')
class TitleTransaction(BasePageCrm):
    """Вкладка Сделки"""

    def click_button_create_transaction(self):
        """Клик по кнопке Создать сделку"""
        with allure.step('Клик по кнопке Создать сделку'):
            self.waiting_element_is_visibility_on_the_page(EditingOrganizationLocators.LOCATOR_BUTTON_CREATE)
            button_create = self.find_element(EditingOrganizationLocators.LOCATOR_BUTTON_CREATE)
            self.click_js(button_create)
            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER)
            self.waiting_element_is_visibility_on_the_page(ModalCreateTransactionLocators.LOCATOR_H5_HEADER, sec=90)

    def save_first_name_transaction(self) -> str:
        """Сохранение названия первой сделки на странице (самой верхней)"""
        with allure.step('Сохранение названия первой сделки на странице (самой верхней)'):
            self.waiting_element_is_visibility_located_dom(TitleTransactionLocators.LOCATOR_NAME_TRANSACTION)
            name_transaction = self.find_element(TitleTransactionLocators.LOCATOR_NAME_TRANSACTION).text
            return name_transaction

    def click_btn_editing_a_deal_by_deal_name(self, name_transaction: str):
        """Клик по кнопке Редактирование сделки по имени сделки"""
        with allure.step('Клик по кнопке Редактирование сделки по имени сделки'):
            self.waiting_element_is_visibility_located_dom(
                TitleTransactionLocators.locator_btn_editing_a_deal_by_deal_name(name_transaction)
            )
            btn_editing_a_deal = self.find_element(
                TitleTransactionLocators.locator_btn_editing_a_deal_by_deal_name(name_transaction)
            )
            self.click_js(btn_editing_a_deal)
            self.waiting_element_is_visibility_on_the_page(ModalCreateTransactionLocators.LOCATOR_H5_HEADER)


@allure.feature('модалка Сделка')
class ModalCreateTransaction(TitleTransaction, KpTab):
    """модалка Сделка"""

    def click_create_kp(self):
        """Клик по кнопке +КП"""
        with allure.step('Клик по кнопке +КП'):
            self.expecting_clickability(ModalCreateTransactionLocators.LOCATOR_BUTTON_CREATE_KP)
            button_create_kp = self.find_element(ModalCreateTransactionLocators.LOCATOR_BUTTON_CREATE_KP)
            button_create_kp.click()
            self.waiting_element_is_visibility_on_the_page(ModalNewKpLocators.LOCATOR_HEADER_DIV)

    def save_name_created_transaction(self) -> str:
        """Сохранение названия создаваемой сделки"""
        with allure.step('Сохранение названия создаваемой сделки'):
            self.waiting_element_is_visibility_on_the_page(ModalCreateTransactionLocators.LOCATOR_H5_HEADER)
            name_transaction = self.find_element(ModalCreateTransactionLocators.LOCATOR_H5_HEADER).text.split('- ')[-1]
            return name_transaction

    def click_btn_save(self):
        """Клик по кнопке Сохранить"""
        with allure.step('Клик по кнопке Сохранить'):
            name_created_transaction = self.save_name_created_transaction()

            self.expecting_clickability(ModalCreateTransactionLocators.LOCATOR_BTN_SAVE)
            btn_save = self.find_element(ModalCreateTransactionLocators.LOCATOR_BTN_SAVE)
            self.scroll_to(btn_save)
            self.expecting_clickability(ModalCreateTransactionLocators.LOCATOR_BTN_SAVE)
            btn_save.click()
            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER)
            self.waiting_element_invisibility(ModalCreateTransactionLocators.LOCATOR_BTN_SAVE)
            time.sleep(0.5)
            try:
                self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER)
            except TimeoutException:
                pass
            first_num_transaction_on_title_transaction = self.save_first_name_transaction()

            assert name_created_transaction == first_num_transaction_on_title_transaction, \
                f'Название созданной сделки - ({name_created_transaction}) не отображается на странице - ' \
                f'({first_num_transaction_on_title_transaction})'

    def opening_pq_in_modal_transaction_in_a_new_tab_by_number(self, num_pq: str):
        """Открытие PQ в новой вкладке"""
        with allure.step('Открытие PQ в новой вкладке'):
            self.opening_pq_in_a_new_tab_by_number(num_pq)


@allure.feature('Вкладка Скидки')
class TitleDiscounts(BasePageCrm):
    """Вкладка Скидки"""

    def opening_a_contract_by_number_in_a_new_tab(self, cd_contract: str):
        """Открытие договора по номеру в новой вкладке
        cd_contract - номер договора
        """
        with allure.step('Открытие договора по номеру в новой вкладке'):
            self.waiting_element_is_visibility_on_the_page(
                TitleDiscountsLocators.locator_btn_edit_by_number_contract(cd_contract))
            btn_edit = self.find_element(TitleDiscountsLocators.locator_btn_edit_by_number_contract(cd_contract))
            self.scroll_to(btn_edit)
            self.ctrl_click_link(btn_edit)
            self.switching_window(-1)
            self.waiting_element_is_visibility_located_dom(ContractPageLocators.locator_header(cd_contract), sec=30)
            self.waiting_element_is_visibility_on_the_page(ContractPageLocators.locator_header(cd_contract), sec=30)

    def save_code_discount_code_price_code(self) -> list:
        """Сохранение артикула спец. цены кода, цены кода, скидки кода"""
        with allure.step('Сохранение артикула спец. цены кода, цены кода, скидки кода'):
            info_special_price_dict = []

            # Сохранение списка артикулов
            self.waiting_element_is_visibility_located_dom(TitleDiscountsLocators.LOCATOR_ARTICLE_SPECIAL_PRICE, sec=5)
            articles_special_price = self.find_elements(TitleDiscountsLocators.LOCATOR_ARTICLE_SPECIAL_PRICE)
            articles_special_price = [article.get_attribute('value') for article in articles_special_price]

            # Сохранение списка цен
            prices_with_nds = self.find_elements(TitleDiscountsLocators.LOCATOR_PRICE_WITH_NDS_SPECIAL_PRICE)
            prices_with_nds = [price.get_attribute('value') for price in prices_with_nds]

            # Сохранение скидок
            discounts = self.find_elements(TitleDiscountsLocators.LOCATOR_DISCOUNT_SPECIAL_PRICE)
            discounts = [discount.get_attribute('value') for discount in discounts]
            discounts = [discount.strip().replace(' %', '').replace(',', '.') for discount in discounts]

            for i in range(len(articles_special_price)):
                inner_dict = {'article': articles_special_price[i], 'price': prices_with_nds[i],
                              'discount': discounts[i]}
                info_special_price_dict.append(inner_dict)

            return info_special_price_dict
