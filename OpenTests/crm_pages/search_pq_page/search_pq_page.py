import time

import allure
from selenium.common import TimeoutException

from base_page.base_page_locators import BaseCrmLocators
from base_page.base_page import BasePageCrm
from base_page.raise_exceptions import MyTimeoutException
from crm_pages.pq_page.pq_page_locators import PqPageLocators

from crm_pages.search_pq_page.search_pq_page_locators import LocatorsSearchPq


@allure.feature('Страница поиска КП в CRM')
class SearchPq(BasePageCrm):
    """Страница поиска КП в CRM"""

    def search_pq(self, num_pq: str, expected_count_pq=1):
        """
        Поиск pq
        :param num_pq: Номер КП
        :param expected_count_pq: Ожидаемое количество найденных КП
        """
        with allure.step(f'Поиск pq {num_pq}'):
            self.waiting_element_is_visibility_on_the_page(LocatorsSearchPq.LOCATOR_INPUT_SEARCH_PQ)
            # self.change_for_yourself()
            input_search_pq = self.find_element(LocatorsSearchPq.LOCATOR_INPUT_SEARCH_PQ)
            input_search_pq.clear()
            input_search_pq.send_keys(f"{num_pq}")

            self.find_element(LocatorsSearchPq.LOCATOR_BUTTON_SEARCH).click()

            self.waiting_present_element(LocatorsSearchPq.LOCATOR_LINES_WITH_PQ, sec=20)
            line_with_pq = self.find_elements(LocatorsSearchPq.LOCATOR_LINES_WITH_PQ)
            assert len(
                line_with_pq) == expected_count_pq, f'В результате поиска найдено больше 1-ого PQ - ({len(line_with_pq)})'
            found_pq = self.find_element(LocatorsSearchPq.LOCATOR_NUMBER_PQ).text
            assert found_pq == num_pq, \
                f'Номер найденного КП - ({found_pq}) не соответствует номеру искомого КП - ({num_pq})'

    def search_order(self, num_order: str):
        """Поиск заказа"""
        with allure.step('Поиск заказа в СРМ на странице поиска КП'):
            with allure.step(f'Ввод номера заказа {num_order} в поле поиска'):
                self.waiting_element_is_visibility_on_the_page(LocatorsSearchPq.LOCATOR_INPUT_SEARCH_PQ)
                input_search_order = self.find_element(LocatorsSearchPq.LOCATOR_INPUT_SEARCH_PQ)
                input_search_order.clear()
                input_search_order.send_keys(f"{num_order}")
            with allure.step('Клик по кнопке Найти'):
                btn_search = self.find_element(LocatorsSearchPq.LOCATOR_BUTTON_SEARCH)
                btn_search.click()
            with allure.step('Ожидание появления ссылки на заказ в результате поиска'):
                locator_link_order = LocatorsSearchPq.locator_link_order(num_order)
                self.waiting_element_is_visibility_on_the_page(locator_link_order, sec=30)
            with allure.step('Проверка, что в результате поиска найден только один заказ'):
                line_with_pq = self.find_elements(locator_link_order)
                assert len(
                    line_with_pq) == 1, f'В результате поиска найдено больше 1-ого заказа - ({len(line_with_pq)})'

    def go_to_order(self, num_order: str):
        """Переход в готовый заказ"""
        with allure.step('Переход в готовый заказ со страницы поиска КП в СРМ'):
            with allure.step('Клик по ссылке заказа'):
                locator_link_order = LocatorsSearchPq.locator_link_order(num_order)
                self.waiting_element_is_visibility_on_the_page(locator_link_order, sec=180)
                link_order = self.find_element(locator_link_order)
                link_order.click()
            with allure.step('Переключение на вкладку заказа и проверка отображения заголовка КП на странице заказа '
                             'в СРМ'):
                time.sleep(0.5)
                windows = self.driver.window_handles
                handle = windows[-1]
                time.sleep(4)  # При открытии страницы повторно вызывается метод симуляции и страница дергается
                self.switching_window(windows.index(handle))
                self.waiting_present_element(LocatorsSearchPq.LOCATOR_KP_TEXT)

    def go_to_pq_by_number_in_new_tab(self, pq_num: str):
        """Переход в PQ по номеру в новой вкладке"""
        with allure.step(f'Переход в PQ по номеру в новой вкладке {pq_num}'):
            edit_pq = self.find_element(LocatorsSearchPq.locator_edit_pq(pq_num))
            self.ctrl_click_link(edit_pq)
            self.switching_window(-1)
            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER)
            self.waiting_present_element(PqPageLocators.LOCATOR_HEADER_KP, sec=90)

    def check_visible_dkp(self, num_pq: str, expected_list_dkp: list):
        """
        Проверка, что при поиске МКП отображаются ДКП
        :param num_pq: Номер МКП
        :param expected_list_dkp: Ожидаемый список ДКП
        """
        with allure.step(f'Проверка, что при поиске МКП {num_pq} отображаются ДКП - ({expected_list_dkp})'):
            err_list = []  # Список не найденных ДКП
            try:
                self.waiting_element_is_visibility_on_the_page(LocatorsSearchPq.LOCATOR_NUMBER_PQ, sec=3)
            except TimeoutException as e:
                raise MyTimeoutException(f'{e}\n Не найдены элементы с номерами КП')
            all_num_pq_on_page = self.find_elements(LocatorsSearchPq.LOCATOR_NUMBER_PQ)
            all_num_pq_on_page = [el.text for el in all_num_pq_on_page]
            for dkp in expected_list_dkp:
                if dkp not in all_num_pq_on_page:
                    err_list.append(dkp)

            assert len(err_list) == 0, \
                f'При поиске МКП {num_pq} не отображаются ДКП - ({err_list})'
