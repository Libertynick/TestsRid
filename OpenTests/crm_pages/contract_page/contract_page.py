import time

import allure

from base_page.base_page import BasePageCrm
from crm_pages.contract_page.contract_page_locators import ContractPageLocators


@allure.feature('Страница карточка Договора')
class ContractPage(BasePageCrm):
    """Страница карточка Договора"""

    def checking_display_of_contract_number(self, expected_num_contract: str):
        """Проверка отображения номера договора"""
        with allure.step('Проверка отображения номера договора'):
            self.waiting_element_is_visibility_on_the_page(ContractPageLocators.LOCATOR_FIELD_NUM_CONTRACT)
            num_contract_on_page = self.find_element(ContractPageLocators.LOCATOR_FIELD_NUM_CONTRACT).get_attribute(
                'value')
            assert num_contract_on_page == expected_num_contract, \
                f'Номер договора на странице - ({num_contract_on_page}) не соответствует ожидаемому - ' \
                f'({expected_num_contract})'

    def saving_code_price_in_special_price_section(self, article: str) -> float:
        """Сохранение цены кода в разделе Специальная цена"""
        with allure.step('Сохранение цены кода в разделе Специальная цена'):
            list_code = self.find_elements(ContractPageLocators.LOCATOR_ARTICLE_IN_CHAPTER_SPECIAL_PRICE)
            list_code = [code.get_attribute('value') for code in list_code]
            index_article = list_code.index(article)  # индекс элемента в списке по артикулу
            list_price = self.find_elements(ContractPageLocators.LOCATOR_PRICE_IN_CHAPTER_SPECIAL_PRICE)
            list_price = [price.get_attribute('value') for price in list_price]
            price = float(list_price[index_article])
            return price

    def saving_price_list_by_article_in_special_price_section(self, article: str) -> float:
        """Сохранение прайс-листа по артикулу в разделе Специальная цена"""
        with allure.step('Сохранение прайс-листа по артикулу в разделе Специальная цена'):
            list_code = self.find_elements(ContractPageLocators.LOCATOR_ARTICLE_IN_CHAPTER_SPECIAL_PRICE)
            list_code = [code.get_attribute('value') for code in list_code]
            index_article = list_code.index(article)  # индекс элемента в списке по артикулу
            price_list = self.find_elements(ContractPageLocators.LOCATOR_PRICE_LIST_IN_CHAPTER_SPECIAL_PRICE)
            price_list = [price.get_attribute('value') for price in price_list]
            price_list_by_article = price_list[index_article].split(' ')[0]
            return float(price_list_by_article)

    def must_be_currency_cu_cbr(self, article: str):
        """Валюта должна быть УЕ ЦБ РФ"""
        with allure.step('Валюта должна быть УЕ ЦБ РФ'):
            expected_currency = 'у.е. ЦБ РФ (CUcbr)'

            list_code = self.find_elements(ContractPageLocators.LOCATOR_ARTICLE_IN_CHAPTER_SPECIAL_PRICE)
            list_code = [code.get_attribute('value') for code in list_code]
            index_article = list_code.index(article)  # индекс элемента в списке по артикулу
            list_currency = self.find_elements(ContractPageLocators.LOCATOR_FIELD_CURRENCY_IN_CHAPTER_SPECIAL_PRICE)
            list_currency = [currency.text for currency in list_currency]
            currency_code = list_currency[index_article]

            assert expected_currency == currency_code, \
                f'Ожидаемая валюта - {expected_currency} кода {article} не соответствует валюте - ' \
                f'{currency_code} на странице'

    def click_btn_cancel_approval(self):
        """Клик по кнопке Отменить согласование"""
        with allure.step('Клик по кнопке Отменить согласование'):
            self.expecting_clickability(ContractPageLocators.LOCATOR_BUTTON_CANCEL_APPROVAL)
            btn_cancel_approval = self.find_element(ContractPageLocators.LOCATOR_BUTTON_CANCEL_APPROVAL)
            btn_cancel_approval.click()
            time.sleep(2)
            self.waiting_element_is_visibility_on_the_page(ContractPageLocators.LOCATOR_FIELD_NUM_CONTRACT)
            self.waiting_element_is_visibility_on_the_page(ContractPageLocators.LOCATOR_FIELD_ADDED_CODES)

    def entering_article_in_code_entry_field(self, articles: str):
        """Ввод артикула в поле ввода кодов"""
        with allure.step('Ввод артикула в поле ввода кодов'):
            field_entering_codes = self.find_element(ContractPageLocators.LOCATOR_FIELD_ADDED_CODES)
            field_entering_codes.send_keys(articles)
            entered_codes = field_entering_codes.get_attribute('title')
            assert entered_codes == articles, \
                f'Введенный код - {entered_codes} не соответствует ожидаемому - {articles}'

    def click_btn_fix_price(self):
        """Клик по кнопке Фиксированная цена"""
        with allure.step('Клик по кнопке Фиксированная цена'):
            self.expecting_clickability(ContractPageLocators.LOCATOR_BTN_FIX_PRICE)
            btn_fix_price = self.find_element(ContractPageLocators.LOCATOR_BTN_FIX_PRICE)
            btn_fix_price.click()
            time.sleep(0.5)
            pressed_button_fixed_price = self.find_elements(ContractPageLocators.LOCATOR_PRESSED_BUTTON_FIXED_PRICE)
            assert len(pressed_button_fixed_price) == 1, f'Кнопка Фиксированная цена не нажата'

    def click_btn_cu_cbr(self):
        """Клик по кнопке УЕ"""
        with allure.step('Клик по кнопке УЕ'):
            self.expecting_clickability(ContractPageLocators.LOCATOR_BTN_CU_CBR)
            btn_cu_cbr = self.find_element(ContractPageLocators.LOCATOR_BTN_CU_CBR)
            btn_cu_cbr.click()
            time.sleep(0.5)
            pressed_button_cu_cbr = self.find_elements(ContractPageLocators.LOCATOR_PRESSED_BTN_CU_CBR)
            assert len(pressed_button_cu_cbr) == 1, f'Кнопка выбора валюты в УЕ не выбрана'

    def click_btn_added_codes(self, article: str):
        """Клик по кнопке Добавить коды"""
        with allure.step('Клик по кнопке Добавить коды'):
            btn_added_codes = self.find_element(ContractPageLocators.LOCATOR_BTN_ADDED_CODES)
            btn_added_codes.click()
            count = 10
            time_sleep = 2  # секунды
            while count != 0:
                time.sleep(time_sleep)
                list_code = self.find_elements(ContractPageLocators.LOCATOR_ARTICLE_IN_CHAPTER_SPECIAL_PRICE)
                list_code = [code.get_attribute('value') for code in list_code]
                if article in list_code:
                    count = 0
                else:
                    count -= time_sleep
                assert article in list_code, \
                    f'Артикул {article} не найден в списке кодов {list_code} в разделе Специальная цена'

    def click_btn_save(self):
        """Клик по кнопке Сохранить"""
        with allure.step('Клик по кнопке '):
            btn_save = self.find_element(ContractPageLocators.LOCATOR_BUTTON_SAVE)
            btn_save.click()
            self.waiting_element_is_visibility_located_dom(
                ContractPageLocators.LOCATOR_POP_UP_MESSAGE_INDICATING_SUCCESSFUL_SAVE)

    def click_btn_on_approval(self):
        """Клик по кнопке На согласование"""
        with allure.step('Клик по кнопке На согласование'):
            expected_style_btn_on_approval = 'display: none;'

            self.expecting_clickability(ContractPageLocators.LOCATOR_BUTTON_ON_APPROVAL)
            btn_on_approval = self.find_element(ContractPageLocators.LOCATOR_BUTTON_ON_APPROVAL)
            btn_on_approval.click()
            self.waiting_for_loader_processing_in_dom(ContractPageLocators.LOCATOR_LOADER_TEXT)
            self.waiting_element_is_visibility_on_the_page(ContractPageLocators.LOCATOR_FIELD_NUM_CONTRACT)
            block_with_btn_on_approval = self.find_element(ContractPageLocators.LOCATOR_BLOCK_WITH_BUTTON_ON_APPROVAL)
            style_btn_on_approval = block_with_btn_on_approval.get_attribute('style')
            assert style_btn_on_approval == expected_style_btn_on_approval, \
                f'Кнопка На согласование видна на странице после отправки на согласование. Стиль кнопки - ' \
                f'({style_btn_on_approval}). Ожидаемый стиль - ({expected_style_btn_on_approval})'

    def enter_code_fix_price(self, article: str, price: float):
        """Ввод Фиксированной цены кода"""
        with allure.step('Ввод Фиксированной цены кода'):
            input_price_code = self.find_element(ContractPageLocators.LOCATOR_PRICE_IN_CHAPTER_SPECIAL_PRICE)
            input_price_code.send_keys(price)
            self.click_btn_save()
            self.waiting_element_is_visibility_on_the_page(ContractPageLocators.locator_fix_price_by_article(article))
            entered_fix_price = self.find_element(ContractPageLocators.locator_fix_price_by_article(article)
                                                  ).get_attribute('title')
            entered_fix_price = float(entered_fix_price)
            assert entered_fix_price == price, \
                f'Фикс цена {entered_fix_price} на странице у кода {article} не соответствует ожидаемой - {price}'

    def adding_a_special_price_to_code_in_ye_if_not_added(self, article: str, price: float):
        """Добавление фиксированной цены к коду в УЕ, если не добавлен"""
        with allure.step('Добавление фиксированной цены к коду в УЕ, если не добавлен'):
            list_code = self.driver.find_elements(*ContractPageLocators.LOCATOR_ARTICLE_IN_CHAPTER_SPECIAL_PRICE)
            if len(list_code) != 0:
                list_code = [code.get_attribute('value') for code in list_code]
            if article not in list_code or len(list_code) == 0:
                self.click_btn_cancel_approval()
                self.entering_article_in_code_entry_field(article)
                self.click_btn_fix_price()
                self.click_btn_cu_cbr()
                self.click_btn_added_codes(article)
                self.enter_code_fix_price(article, price)
                self.click_btn_on_approval()
            else:
                print(f'Код {article} добавлен в спец цену')
