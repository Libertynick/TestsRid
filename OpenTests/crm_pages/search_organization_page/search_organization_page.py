import time

import allure
from selenium.common import TimeoutException

from base_page.base_page import BasePageCrm
from base_page.base_page_locators import BaseCrmLocators
from crm_pages.organization_page.editing_organization_page_locators import EditingOrganizationLocators
from crm_pages.organization_page.organization_page_locators import OrganizationPageLocators
from crm_pages.search_organization_page.search_organization_page_locators import SearchOrganizationPageLocators, \
    ModalNewCounterpartyLocators


@allure.feature('Страница поиска организации')
class SearchOrganizationPage(BasePageCrm):
    """Страница поиска организации"""

    def search_organization_by_inn(self, inn_organization: str) -> list:
        """Поиск организации по ИНН"""
        with allure.step(f'Поиск организации по ИНН {inn_organization}'):
            input_search = self.find_element(SearchOrganizationPageLocators.LOCATOR_INPUT_SEARCH_ORGANIZATION)
            with allure.step('Очистка поля поиска и ввод инн организации'):
                input_search.clear()
                input_search.send_keys(inn_organization)
            button_search = self.find_element(SearchOrganizationPageLocators.LOCATOR_BUTTON_SEARCH)
            button_search.click()
            time.sleep(0.1)
            try:
                self.waiting_for_loader_processing_on_page(
                    SearchOrganizationPageLocators.LOCATOR_LOADER_SEARCH_ORGANIZATION_PAGE)
            except TimeoutException:
                pass

            self.waiting_element_is_visibility_located_dom(SearchOrganizationPageLocators.LOCATOR_TR_ORGANIZATION)
            res_count_organization = self.driver.find_elements(*SearchOrganizationPageLocators.LOCATOR_TR_ORGANIZATION)
            assert len(res_count_organization) != 0, \
                f'В результате поиска организации по инн {inn_organization} не найдено ни одной организации - ' \
                f'({len(res_count_organization)})'

            inn_of_found_organization = self.driver.find_elements(
                *SearchOrganizationPageLocators.LOCATOR_COLUMN_INN_ORGANIZATION)
            inn_of_found_organization = [el.text for el in inn_of_found_organization]
            return inn_of_found_organization

    def opening_an_head_organization_card_in_a_new_tab(self):
        """Открытие карточки головной организации в новой вкладке"""
        with allure.step('Открытие карточки головной организации в новой вкладке'):
            self.expecting_clickability(
                SearchOrganizationPageLocators.LOCATOR_BUTTON_EDIT_HEAD_ORGANIZATION, sec=5)
            button_edit = self.find_element(SearchOrganizationPageLocators.LOCATOR_BUTTON_EDIT_HEAD_ORGANIZATION)
            self.ctrl_click_link(button_edit)
            self.switching_window(-1)
            self.waiting_element_is_visibility_on_the_page(EditingOrganizationLocators.LOCATOR_HEADER_H4)

    def choosing_a_sales_office(self, sales_office: str):
        """Выбор офиса продаж
        sales_office - офис продаж
        """
        with allure.step(f'Выбор офиса продаж {sales_office}'):
            self.expecting_clickability(SearchOrganizationPageLocators.LOCATOR_FIELD_SALES_OFFICE)
            field_sales_office = self.find_element(SearchOrganizationPageLocators.LOCATOR_FIELD_SALES_OFFICE)
            field_sales_office.click()
            self.waiting_element_is_visibility_on_the_page(SearchOrganizationPageLocators.LOCATOR_INPUT_SALES_OFFICE)
            input_sales_office = self.find_element(SearchOrganizationPageLocators.LOCATOR_INPUT_SALES_OFFICE)
            input_sales_office.send_keys(sales_office)
            self.waiting_element_is_visibility_on_the_page(
                SearchOrganizationPageLocators.locator_result_search_sales_office(sales_office)).click()
            self.waiting_element_is_visibility_located_dom(SearchOrganizationPageLocators.LOCATOR_SELECTED_SALES_OFFICE)
            selected_sales_office = self.find_element(SearchOrganizationPageLocators.LOCATOR_SELECTED_SALES_OFFICE
                                                      ).text.split(' ')[0]
            assert selected_sales_office == sales_office, \
                f'Выбранный офис продаж - ({selected_sales_office}) не соответствует ожидаемому - ({sales_office})'

    def click_btn_create(self):
        """Клик по кнопке +Создать"""
        with allure.step('Клик по кнопке +Создать'):
            self.expecting_clickability(SearchOrganizationPageLocators.LOCATOR_BTN_CREATE, sec=5)
            btn_create = self.find_element(SearchOrganizationPageLocators.LOCATOR_BTN_CREATE)
            btn_create.click()
            self.waiting_element_is_visibility_on_the_page(ModalNewCounterpartyLocators.LOCATOR_HEADER, sec=5)

    def should_comment_by_name_organization(self, name_organization: str, expected_comment: str):
        """
        Должен быть определенный комментарий в строке организации
        :param name_organization: Наименование организации
        :param expected_comment: Ожидаемый комментарий
        """
        with allure.step(
                f'Должен быть определенный комментарий в строке организации. Комментарий - ({expected_comment})'):
            self.waiting_element_is_visibility_on_the_page(
                SearchOrganizationPageLocators.locator_comment_by_name_organization(name_organization), sec=5)
            comment_on_page = self.find_element(
                SearchOrganizationPageLocators.locator_comment_by_name_organization(name_organization)).text
            assert comment_on_page == expected_comment, \
                (f'Комментарий в организации {name_organization} - ({comment_on_page}) не соответствует ожидаемому - '
                 f'({expected_comment})')

    def open_organization_by_name(self, name_organization: str):
        """
        Открытие организации по названию
        :param name_organization: Наименование организации
        """
        with allure.step(f'Открытие организации {name_organization} по названию'):
            self.waiting_element_is_visibility_on_the_page(
                SearchOrganizationPageLocators.locator_link_organization_by_name(name_organization), sec=5)
            link_organization = self.find_element(
                SearchOrganizationPageLocators.locator_link_organization_by_name(name_organization))
            link_organization.click()
            self.waiting_element_is_visibility_on_the_page(
                OrganizationPageLocators.locator_header_company_by_name_organization(name_organization))


class ModalNewCounterparty(BasePageCrm):
    """Модалка Новый контрагент"""

    def entered_value_in_field_inn_name_address(self, value: str):
        """
        Ввод значения в поле ИНН, название, адрес
        :param value: Значения для ввода
        """
        with allure.step(f'Ввод значения {value} в поле ИНН, название, адрес'):
            self.waiting_element_is_visibility_on_the_page(ModalNewCounterpartyLocators.LOCATOR_INPUT_INN_NAME_ADDRESS,
                                                           sec=5)
            input_inn_name_address = self.find_element(ModalNewCounterpartyLocators.LOCATOR_INPUT_INN_NAME_ADDRESS)
            input_inn_name_address.clear()
            input_inn_name_address.send_keys(value)
            self.waiting_element_is_visibility_on_the_page(
                ModalNewCounterpartyLocators.LOCATOR_BTN_CREATE_NEW_ONE_IN_UL_INN_NAME_ADDRESS, sec=5)

    def click_btn_create_new_one_in_ul_inn_name_address(self):
        """Клик по кнопке Создать новую в выпадающем списке ИНН, название, адрес"""
        with allure.step('Клик по кнопке Создать новую в выпадающем списке ИНН, название, адрес'):
            self.expecting_clickability(ModalNewCounterpartyLocators.LOCATOR_BTN_CREATE_NEW_ONE_IN_UL_INN_NAME_ADDRESS,
                                        sec=5)
            btn_create_new_one = self.find_element(
                ModalNewCounterpartyLocators.LOCATOR_BTN_CREATE_NEW_ONE_IN_UL_INN_NAME_ADDRESS)
            btn_create_new_one.click()
            self.waiting_element_is_visibility_on_the_page(ModalNewCounterpartyLocators.LOCATOR_BTN_ACTIVATE_UL_FORM,
                                                           sec=5)
            self.waiting_element_is_visibility_on_the_page(ModalNewCounterpartyLocators.LOCATOR_INPUT_INN, sec=5)

    def choice_of_form(self, selection_form: str):
        """Выбор формы
        :param selection_form: Форма для выбора
        """
        with allure.step(f'Выбор формы - ({selection_form})'):
            self.expecting_clickability(ModalNewCounterpartyLocators.LOCATOR_BTN_ACTIVATE_UL_FORM, sec=5)
            btn_activate_form = self.find_element(ModalNewCounterpartyLocators.LOCATOR_BTN_ACTIVATE_UL_FORM)
            btn_activate_form.click()
            self.waiting_element_is_visibility_on_the_page(
                ModalNewCounterpartyLocators.locator_item_form_by_name(selection_form), sec=5).click()

    def should_selected_name_form(self, expected_name_form: str):
        """
        Должна быть выбрана определенная форма
        :param expected_name_form: Ожидаемая выбранная форма
        """
        with allure.step(f'Должна быть выбрана определенная форма - ({expected_name_form})'):
            self.waiting_element_is_visibility_located_dom(ModalNewCounterpartyLocators.LOCATOR_SELECTED_FORM, sec=5)
            selected_form = self.find_element(ModalNewCounterpartyLocators.LOCATOR_SELECTED_FORM).text
            assert selected_form == expected_name_form, \
                f'Выбранная форма - ({selected_form}) не соответствует ожидаемой - ({expected_name_form})'

    def filling_field_inn(self, value: str):
        """Заполнение поля ИНН"""
        with allure.step(f'Заполнение поля ИНН. Значение - ({value})'):
            self.waiting_element_is_visibility_on_the_page(ModalNewCounterpartyLocators.LOCATOR_INPUT_INN, sec=5)
            input_inn = self.find_element(ModalNewCounterpartyLocators.LOCATOR_INPUT_INN)
            input_inn.clear()
            input_inn.send_keys(value)

    def click_btn_egrul(self):
        self.expecting_clickability(ModalNewCounterpartyLocators.LOCATOR_BTN_EGRUL, sec=5)
        btn_egrul = self.find_element(ModalNewCounterpartyLocators.LOCATOR_BTN_EGRUL)
        btn_egrul.click()
        self.waiting_element_is_visibility_on_the_page(ModalNewCounterpartyLocators.LOCATOR_INPUT_JUR_NAME, sec=5)

    def filling_field_jur_name(self, value: str):
        """Заполнение поля Юр. название"""
        with allure.step(f'Заполнение поля Юр. название. Значение - ({value})'):
            self.waiting_element_is_visibility_on_the_page(ModalNewCounterpartyLocators.LOCATOR_INPUT_JUR_NAME, sec=5)
            input_jur_name = self.find_element(ModalNewCounterpartyLocators.LOCATOR_INPUT_JUR_NAME)
            input_jur_name.clear()
            input_jur_name.send_keys(value)

    def click_btn_activate_ul_responsible_manager(self, name_responsible_manager: str):
        """
        Клик по кнопке активации выпадающего меню Ответственный менеджер
        :param name_responsible_manager: ФИО ответственного менеджера
        """
        with allure.step('Клик по кнопке активации выпадающего меню Ответственный менеджер'):
            self.waiting_element_is_visibility_on_the_page(
                ModalNewCounterpartyLocators.LOCATOR_BTN_ACTIVATE_UL_RESPONSIBLE_MANAGER, sec=5)
            btn_activate_ul_responsible_manager = self.find_element(
                ModalNewCounterpartyLocators.LOCATOR_BTN_ACTIVATE_UL_RESPONSIBLE_MANAGER)
            btn_activate_ul_responsible_manager.click()
            self.waiting_element_is_visibility_on_the_page(
                ModalNewCounterpartyLocators.locator_item_ul_by_name(name_responsible_manager), sec=5)

    def choice_responsible_manager(self, name_responsible_manager: str):
        """
        Выбор ответственного менеджера
        :param name_responsible_manager: ФИО ответственного менеджера
        """
        with allure.step(f'Выбор ответственного менеджера {name_responsible_manager}'):
            self.click_btn_activate_ul_responsible_manager(name_responsible_manager)
            item_responsible_manager = self.find_element(
                ModalNewCounterpartyLocators.locator_item_ul_by_name(name_responsible_manager))
            item_responsible_manager.click()
            self.should_selected_responsible_manager(name_responsible_manager)

    def should_selected_responsible_manager(self, name_responsible_manager: str):
        """
        Должен быть выбран определенный ответственный менеджер
        :param name_responsible_manager: Ожидаемый ответственный менеджер
        """
        with allure.step(f'Должен быть выбран определенный ответственный менеджер - ({name_responsible_manager})'):
            self.waiting_element_is_visibility_on_the_page(
                ModalNewCounterpartyLocators.LOCATOR_SELECTED_RESPONSIBLE_MANAGER, sec=5)
            selected_responsible_manager = self.find_element(
                ModalNewCounterpartyLocators.LOCATOR_SELECTED_RESPONSIBLE_MANAGER).text
            assert selected_responsible_manager == name_responsible_manager, \
                (f'Выбранный ответственный менеджер - ({selected_responsible_manager}) '
                 f'не соответствует ожидаемому - ({name_responsible_manager})')

    def filling_field_name_for_search(self, value: str):
        """
        Заполнение поля Название для поиска
        :param value: Значение для ввода
        """
        with (allure.step(f'Заполнение поля Название для поиска. Значение ввода - ({value})')):
            self.waiting_element_is_visibility_on_the_page(ModalNewCounterpartyLocators.LOCATOR_INPUT_NAME_FOR_SEARCH,
                                                           sec=5)
            input_name_for_search = self.find_element(ModalNewCounterpartyLocators.LOCATOR_INPUT_NAME_FOR_SEARCH)
            input_name_for_search.clear()
            input_name_for_search.send_keys(value)
            entered_value = input_name_for_search.get_attribute('value')
            assert entered_value == value, \
                f'Введенное значение - ({entered_value}) в поле Название для поиска не соответствует вводимому - ({value})'

    def click_btn_activate_ul_player(self, name_player: str):
        """
        Клик по кнопке активации выпадающего списка Игрок
        :param name_player: Название игрока
        """
        with allure.step('Клик по кнопке активации выпадающего списка Игрок'):
            self.waiting_element_is_visibility_on_the_page(ModalNewCounterpartyLocators.LOCATOR_BTN_ACTIVATE_UL_PLAYER,
                                                           sec=5)
            btn_activate_ul_player = self.find_element(ModalNewCounterpartyLocators.LOCATOR_BTN_ACTIVATE_UL_PLAYER)
            btn_activate_ul_player.click()
            self.waiting_element_is_visibility_on_the_page(
                ModalNewCounterpartyLocators.locator_item_ul_by_name(name_player), sec=5)

    def choice_player(self, name_player: str):
        """
        Выбор игрока
        :param name_player: Название игрока
        :return:
        """
        with allure.step(f'Выбор игрока {name_player}'):
            self.click_btn_activate_ul_player(name_player)
            item_ul_player = self.find_element(ModalNewCounterpartyLocators.locator_item_ul_by_name(name_player))
            item_ul_player.click()
            self.should_selected_player(name_player)

    def should_selected_player(self, expected_name_player: str):
        """
        Должен быть выбран определенный игрок
        :param expected_name_player: Название игрока
        """
        with allure.step('Должен быть выбран определенный игрок'):
            self.waiting_element_is_visibility_on_the_page(
                ModalNewCounterpartyLocators.LOCATOR_SELECTED_PLAYER, sec=5)
            selected_player = self.find_element(
                ModalNewCounterpartyLocators.LOCATOR_SELECTED_PLAYER).text
            assert selected_player == expected_name_player, \
                f'Выбранный Игрок - ({selected_player}) не соответствует ожидаемому - ({expected_name_player})'

    def filling_field_remark(self, value: str):
        """
        Заполнение поля Примечание
        :param value: Значение для ввода
        """
        with allure.step('Заполнение поля Примечание'):
            self.waiting_element_is_visibility_on_the_page(ModalNewCounterpartyLocators.LOCATOR_INPUT_REMARK, sec=5)
            input_remark = self.find_element(ModalNewCounterpartyLocators.LOCATOR_INPUT_REMARK)
            input_remark.clear()
            input_remark.send_keys(value)

    def click_btn_save(self):
        """Клик по кнопке Сохранить"""
        self.expecting_clickability(ModalNewCounterpartyLocators.LOCATOR_BTN_SAVE, sec=5)
        btn_save = self.find_element(ModalNewCounterpartyLocators.LOCATOR_BTN_SAVE)
        btn_save.click()
        self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER, sec=30)
        self.waiting_element_invisibility(ModalNewCounterpartyLocators.LOCATOR_BTN_SAVE)
