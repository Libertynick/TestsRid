import time

import allure

from base_page.base_page import BasePage
from base_page.base_page_locators import BaseCrmLocators
from crm_pages.search_objects_page.search_objects_page_locators import SearchObjectsPageLocators
from crm_pages.object_page.objects_page_locators import ObjectsPageLocators


@allure.feature('Страница Поиск объекта')
class SearchObjectPage(BasePage):

    def click_btn_search(self):
        """Клик по кнопке Найти"""
        with allure.step('Клик по кнопке Найти'):
            button_search = self.find_element(SearchObjectsPageLocators.LOCATOR_BUTTON_SEARCH)
            self.click_js(button_search)
            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER)
            self.waiting_element_is_visibility_located_dom(SearchObjectsPageLocators.LOCATOR_NUM_OBJECT, sec=40)
            found_object_number = self.find_elements(SearchObjectsPageLocators.LOCATOR_NUM_OBJECT)
            len_found_object_number = len(found_object_number)

            assert len_found_object_number == 1, f'Количество найденных объектов больше одного - {len_found_object_number}'

    def saving_number_of_found_object(self) -> str:
        """Сохранение номера найденного объекта"""
        with allure.step('Сохранение номера найденного объекта'):
            self.waiting_element_is_visibility_located_dom(SearchObjectsPageLocators.LOCATOR_NUM_OBJECT, sec=40)
            found_object_number = self.find_elements(SearchObjectsPageLocators.LOCATOR_NUM_OBJECT)
            num_found_object_number = found_object_number[0].text[1:-1]
            return num_found_object_number

    def search_object(self, num_object: str):
        """Поиск объекта"""
        with allure.step(f'Поиск объекта ({num_object})'):
            input_search_object = self.find_element(SearchObjectsPageLocators.LOCATOR_INPUT_SEARCH_NAME)
            input_search_object.clear()
            time.sleep(1)
            input_search_object.send_keys(num_object)
            self.click_btn_search()
            num_found_object_number = self.saving_number_of_found_object()

            assert num_found_object_number == num_object, \
                f'Номер найденного объекта ({num_found_object_number}) не равен искомому номеру объекта ({num_object})'

    def selecting_a_sales_office(self):
        """Выбор офиса продаж - Москва"""
        with allure.step('Выбор офиса продаж - Москва'):
            time.sleep(2)
            self.waiting_element_is_visibility_located_dom(SearchObjectsPageLocators.LOCATOR_SPAN_SALES_OFFICE)
            click_sales_office = self.find_element(SearchObjectsPageLocators.LOCATOR_SPAN_SALES_OFFICE)
            self.expecting_clickability(SearchObjectsPageLocators.LOCATOR_SPAN_SALES_OFFICE, sec=20)
            click_sales_office.click()
            self.waiting_element_is_visibility_located_dom(SearchObjectsPageLocators.LOCATOR_SALES_OFFICE_MOSCOW,
                                                           sec=20)
            select_office = self.find_element(SearchObjectsPageLocators.LOCATOR_SALES_OFFICE_MOSCOW)
            select_office_text = select_office.text  # искомый офис продаж
            select_office.click()
            selected_sales_office = self.find_element(SearchObjectsPageLocators.LOCATOR_SPAN_SALES_OFFICE)
            selected_sales_office = selected_sales_office.text  # Выбранный офис продаж
            assert select_office_text == selected_sales_office, \
                f'Выбран не тот офис продаж: в результате выбора - {selected_sales_office}; ' \
                f'который хотели выбрать {selected_sales_office}'

    def go_to_object(self, num_object: str):
        """Переход в объект"""
        with allure.step(f'Переход в объект {num_object}'):
            click_object = self.find_element(SearchObjectsPageLocators.locator_link_num_object(num_object))
            click_object.click()
            time.sleep(1)
            self.waiting_element_is_visibility_located_dom(ObjectsPageLocators.LOCATOR_INFO_OBJECT_TITLE, sec=90)
            assert self.is_element_present(*ObjectsPageLocators.LOCATOR_INFO_OBJECT_TITLE), \
                'Не отображается заголовок меню Информация об объекте'

    def delete_sales_office(self):
        """Удаление офиса продаж"""
        with allure.step('Удаление офиса продаж'):
            self.waiting_element_is_visibility_on_the_page(SearchObjectsPageLocators.LOCATOR_BTN_DELETE_SALES_OFFICE,
                                                           sec=5)
            btn_delete_sales_office = self.find_element(SearchObjectsPageLocators.LOCATOR_BTN_DELETE_SALES_OFFICE)
            btn_delete_sales_office.click()
            sales_office_on_page = self.find_element(SearchObjectsPageLocators.LOCATOR_LINK_DROP_LIST_SALES_OFFICE).text
            assert sales_office_on_page == '', \
                f'Поле с офисом продаж не пустое - ({sales_office_on_page})'

    def entering_num_kp_or_check(self, num_kp_or_check: str):
        """Ввод номера КП или счета"""
        with allure.step(f'Ввод номера КП или счета. {num_kp_or_check}'):
            self.waiting_element_is_visibility_on_the_page(SearchObjectsPageLocators.LOCATOR_INPUT_NUM_KP_OR_CHECK,
                                                           sec=5)
            input_num_kp_or_check = self.find_element(SearchObjectsPageLocators.LOCATOR_INPUT_NUM_KP_OR_CHECK)
            input_num_kp_or_check.clear()
            input_num_kp_or_check.send_keys(num_kp_or_check)
            entered_num_kp_or_check = input_num_kp_or_check.get_attribute('value')
            assert entered_num_kp_or_check == num_kp_or_check, \
                f'Номер КП или счета на странице - ({entered_num_kp_or_check}) не соответствует ' \
                f'вводимому - ({num_kp_or_check})'
