import time

import allure
from selenium.common import TimeoutException

from base_page.base_page import BasePageCrm
from base_page.base_page_locators import BaseCrmLocators
from crm_pages.modal_potential.modal_potential_locators import ModalPotentialLocators


@allure.feature('Страница создания нового потенциала')
class ModalPotentialPage(BasePageCrm):
    """Страница создания нового потенциала"""

    def click_button_chapter_tp(self):
        """Клик по кнопке ТП (выбор теплового пунка для создани потенциала)"""
        with allure.step('Клик по кнопке ТП (выбор теплового пунка для создани потенциала)'):
            self.waiting_element_is_visibility_on_the_page(ModalPotentialLocators.LOCATOR_HEADER_MODAL_POTENTIAL)
            self.expecting_clickability(ModalPotentialLocators.LOCATOR_BUTTON_SECTION_TP)
            button_section_tp = self.find_element(ModalPotentialLocators.LOCATOR_BUTTON_SECTION_TP)
            self.driver.execute_script("arguments[0].click()", button_section_tp)
            self.waiting_element_is_visibility_on_the_page(ModalPotentialLocators.LOCATOR_FIELD_CHOOSE_DESIGNER)

    def click_button_chapter_tvy(self):
        """Клик по кнопке ТВУ (выбор теплового пунка для создани потенциала)"""
        with allure.step('Клик по кнопке ТВУ (выбор теплового пунка для создани потенциала)'):
            self.waiting_element_is_visibility_on_the_page(ModalPotentialLocators.LOCATOR_HEADER_MODAL_POTENTIAL)
            self.expecting_clickability(ModalPotentialLocators.LOCATOR_BUTTON_SECTION_TVY)
            button_section_tp = self.find_element(ModalPotentialLocators.LOCATOR_BUTTON_SECTION_TVY)
            self.driver.execute_script("arguments[0].click()", button_section_tp)
            self.waiting_element_is_visibility_on_the_page(ModalPotentialLocators.LOCATOR_FIELD_CHOOSE_DESIGNER)

    def choose_designer_in_list(self):
        """Выбор проектировщика из списка (при создании потенциала)"""
        with allure.step('Выбор проектировщика из списка (при создании потенциала)'):
            field_choose_designer = self.find_element(ModalPotentialLocators.LOCATOR_FIELD_CHOOSE_DESIGNER)
            field_choose_designer.click()
            self.waiting_element_is_visibility_on_the_page(ModalPotentialLocators.LOCATOR_CHOOSE_NAME_DESIGNER)
            name_designer_choose = self.find_element(ModalPotentialLocators.LOCATOR_CHOOSE_NAME_DESIGNER)
            name_designer_choose.click()
            time.sleep(2)

    def choose_expansion_tank(self):
        """Выбор расширительного бака для раздела ТП (при создании потенциала)"""
        with allure.step('Выбор расширительного бака для раздела ТП (при создании потенциала)'):
            field_expansion_tank = self.find_element(ModalPotentialLocators.LOCATOR_FIELD_EXPANSION_TANK)
            field_expansion_tank.click()
            self.waiting_element_is_visibility_on_the_page(
                ModalPotentialLocators.LOCATOR_FOR_SELECTING_AN_OPTION_FROM_THE_LIST_OPTION_3)
            choose_expansion_tank_company = self.find_element(
                ModalPotentialLocators.LOCATOR_FOR_SELECTING_AN_OPTION_FROM_THE_LIST_OPTION_3)
            choose_expansion_tank_company.click()
            time.sleep(0.5)

    def choose_to_in_tp_system(self):
        """Выбор ТО в системе ТП (при создании потенциала)"""
        with allure.step('Выбор ТО в системе ТП (при создании потенциала)'):
            field_to_in_tp_system = self.find_element(ModalPotentialLocators.LOCATOR_FIELD_TO_IN_TP_SYSTEMS)
            field_to_in_tp_system.click()
            self.waiting_element_is_visibility_on_the_page(
                ModalPotentialLocators.LOCATOR_FOR_SELECTING_AN_OPTION_FROM_THE_LIST_OPTION_3)
            choose_expansion_tank_company = self.find_element(
                ModalPotentialLocators.LOCATOR_FOR_SELECTING_AN_OPTION_FROM_THE_LIST_OPTION_3)
            choose_expansion_tank_company.click()
            time.sleep(0.5)

    def add_specification_potential(self, document: str):
        """Нажать кнопку Добавить спецификацию и загрузить спецификацию (при создании потенциала)"""
        with allure.step('Нажать кнопку Добавить спецификацию и загрузить спецификацию (при создании потенциала)'):
            download_button = self.find_element(ModalPotentialLocators.LOCATOR_INPUT_SPECIFICATION)
            download_button.send_keys(document)
            self.waiting_element_is_visibility_located_dom(ModalPotentialLocators.LOCATOR_BUTTON_PROCESSING_CLEVER_DESK)

    def click_button_processing_clever_desk(self):
        """Нажать кнопку Обработать через CleverDesk"""
        with allure.step('Нажать кнопку Обработать через CleverDesk'):
            button_processing_clever_desk = self.find_element(
                ModalPotentialLocators.LOCATOR_BUTTON_PROCESSING_CLEVER_DESK)
            self.driver.execute_script("arguments[0].click()", button_processing_clever_desk)
            try:
                self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER, sec=90)
                self.waiting_element_is_visibility_on_the_page(ModalPotentialLocators.LOCATOR_HEADER_TABLE_RASULT,
                                                               sec=10)
            except TimeoutException:
                self.driver.execute_script("arguments[0].click()", button_processing_clever_desk)
                self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER, sec=90)
                self.waiting_element_is_visibility_on_the_page(ModalPotentialLocators.LOCATOR_HEADER_TABLE_RASULT,
                                                               sec=10)

    def click_button_save_potential_result_clever_desk(self):
        """Кнопка сохранить Потенциал (созданный расчет CleverDesk)"""
        with allure.step('Клик по кнопке Сохранить Потенциал (созданный расчет CleverDesk)'):
            self.expecting_clickability(ModalPotentialLocators.LOCATOR_BUTTON_SAVE_RESULT_CLEVERDESK)
            click_button_save_potential = self.find_element(
                ModalPotentialLocators.LOCATOR_BUTTON_SAVE_RESULT_CLEVERDESK)
            self.driver.execute_script("arguments[0].click()", click_button_save_potential)
            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER)

    def click_button_save_potential(self):
        """Кнопка сохранить Потенциал (итоговый результат)"""
        with allure.step('Клик по кнопке Сохранить Потенциал (итоговый результат)'):
            self.expecting_clickability(ModalPotentialLocators.LOCATOR_BUTTON_DEACTIVATE_SECTION, sec=30)
            click_button_save_potential = self.find_element(
                ModalPotentialLocators.LOCATOR_BUTTON_SAVE_RESULT_CLEVERDESK)
            self.driver.execute_script("arguments[0].click()", click_button_save_potential)
            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER)

    def click_button_close(self):
        """Клик по кнопке Закрыть"""
        with allure.step('Клик по кнопке Закрыть'):
            self.expecting_clickability(ModalPotentialLocators.LOCATOR_BUTTON_CLOSE_POTENTIAL)
            click_button_close = self.find_element(ModalPotentialLocators.LOCATOR_BUTTON_CLOSE_POTENTIAL)
            self.driver.execute_script("arguments[0].click()", click_button_close)

    def click_button_save_potential_without_calculation_cleverdesk(self):
        """Кнопка сохранить Потенциал (итоговый результат)"""
        with allure.step('Клик по кнопке Сохранить Потенциал (итоговый результат)'):
            self.scroll_to_height()
            click_button_save_potential = self.find_element(ModalPotentialLocators.LOCATOR_BUTTON_SAVE_POTENTIAL)
            click_button_save_potential.click()
            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER)
