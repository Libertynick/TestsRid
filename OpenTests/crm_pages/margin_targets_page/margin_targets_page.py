import allure
from selenium.common import TimeoutException

from base_page.base_page import BasePageCrm
from base_page.base_page_locators import BaseCrmLocators
from base_page.raise_exceptions import MyTimeoutException
from crm_pages.margin_targets_page.margin_targets_locators import MarginTargetsLocators


class MarginTargetsPage(BasePageCrm):
    """Страница Целевые показатели по марже"""

    def activate_drop_list_gcm(self):
        """Активация выпадающего списка ГЦМ"""
        with allure.step('Активация выпадающего списка ГЦМ'):
            self.waiting_element_is_visibility_on_the_page(MarginTargetsLocators.LOCATOR_BTN_DROP_LIST_GCM, sec=5)
            btn_drop_list_gcm = self.find_element(MarginTargetsLocators.LOCATOR_BTN_DROP_LIST_GCM)
            btn_drop_list_gcm.click()
            try:
                self.waiting_element_is_visibility_on_the_page(MarginTargetsLocators.LOCATOR_INPUT_GCM, sec=5)
            except TimeoutException:
                raise MyTimeoutException('Выпадающий список ГЦМ не активирован')

    def entered_gcm(self, gcm: str):
        """
        Ввод ГЦМ в поле поиска ГЦМ
        :param gcm: Наименование
        :return: None
        """
        with allure.step(f'Ввод ГЦМ ({gcm}) в поле поиска ГЦМ'):
            self.waiting_element_is_visibility_on_the_page(MarginTargetsLocators.LOCATOR_INPUT_GCM, sec=3)
            input_gcm = self.find_element(MarginTargetsLocators.LOCATOR_INPUT_GCM)
            input_gcm.send_keys(gcm)
            try:
                self.waiting_element_is_visibility_on_the_page(
                    MarginTargetsLocators.locator_item_in_drop_list_gcm_by_name_gcm(gcm), sec=5)
            except TimeoutException as e:
                raise MyTimeoutException(f'{e}\n Не найдено ГЦМ {gcm} в выпадающем списке ГЦМ')

    def selection_of_found_gcm(self, gcm: str):
        """
        Выбор найденного ГЦМ
        :param gcm: Наименование ГЦМ
        :return: None
        """
        with allure.step(f'Выбор найденного ГЦМ {gcm}'):
            try:
                self.waiting_element_is_visibility_on_the_page(
                    MarginTargetsLocators.locator_item_in_drop_list_gcm_by_name_gcm(gcm), sec=3)
                found_gcm = self.find_element(MarginTargetsLocators.locator_item_in_drop_list_gcm_by_name_gcm(gcm))
            except TimeoutException as e:
                raise MyTimeoutException(f'{e}\n Не найден элемент в выпадающем списке')
            found_gcm.click()
            entered_value_gcm = self.find_element(MarginTargetsLocators.LOCATOR_ENTERED_GCM).text
            assert entered_value_gcm == gcm, \
                f'Выбранное ГЦМ - ({entered_value_gcm}) не соответствует ожидаемому - ({gcm})'

    def click_btn_search(self, expected_search_gcm: str):
        """
        Клик по кнопке Найти
        :param expected_search_gcm: ГЦМ, который ищем
        :return: None
        """
        with (allure.step('Клик по кнопке Найти')):
            try:
                self.waiting_element_is_visibility_on_the_page(MarginTargetsLocators.LOCATOR_BTN_SEARCH, sec=3)
                btn_search = self.find_element(MarginTargetsLocators.LOCATOR_BTN_SEARCH)
            except TimeoutException as e:
                raise MyTimeoutException('Кнопка Найти не найдена')
            btn_search.click()
            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER, sec=10)
            try:
                self.waiting_element_is_visibility_on_the_page(MarginTargetsLocators.LOCATOR_CODE_GCM_FOUND, sec=3)
                list_found_code_gcm = self.driver.find_elements(*MarginTargetsLocators.LOCATOR_CODE_GCM_FOUND)
            except TimeoutException as e:
                raise MyTimeoutException(f'{e}\nНе найдено ни одного кода ГЦМ в разделе Найдено')
            list_found_code_gcm = [el.text for el in list_found_code_gcm]
            for idx, el in enumerate(list_found_code_gcm):
                assert el == expected_search_gcm, \
                    f'Найденный код ГЦМ - ({el}, строка в разделе Найдено - {idx + 1}) не соответствует ожидаемому ГЦМ - ' \
                    f'({expected_search_gcm})'

    def check_target_margin_filling_by_empty_end_date_and_gcm(self, gcm: str):
        """
        Проверка, что Целевая маржинальность по пустой дате окончания и ГЦМ заполнения
        :param gcm: Код ГЦМ
        :return: None
        """
        with allure.step(f'Проверка, что Целевая маржинальность по пустой дате окончания и ГЦМ {gcm} заполнения'):
            try:
                self.waiting_element_is_visibility_on_the_page(
                    MarginTargetsLocators.locator_target_marginality_by_empty_end_date_and_gcm(gcm), sec=5)
                target_marginality = self.find_element(
                    MarginTargetsLocators.locator_target_marginality_by_empty_end_date_and_gcm(gcm)).text
            except TimeoutException as e:
                raise MyTimeoutException(f'{e}\nНе найдена целевая маржинальность по пустой дате кода ГЦМ {gcm}')
            assert target_marginality != '', \
                f'Целевая маржинальность по пустой дате окончания и ГЦМ {gcm} пустая. ({target_marginality})'

    def save_target_marginality_by_empty_end_date_and_gcm(self, gcm: str) -> float:
        """
        Сохранение целевой маржинальности по пустой дате окончания и ГЦМ
        :param gcm: Код ГЦМ
        :return: Целевая маржинальность; float
        """
        with allure.step(f'Сохранение целевой маржинальности по пустой дате окончания и ГЦМ {gcm}'):
            try:
                self.waiting_element_is_visibility_on_the_page(
                    MarginTargetsLocators.locator_target_marginality_by_empty_end_date_and_gcm(gcm), sec=5)
                target_marginality = self.find_element(
                    MarginTargetsLocators.locator_target_marginality_by_empty_end_date_and_gcm(gcm)).text
                target_marginality = target_marginality
            except TimeoutException as e:
                raise MyTimeoutException(f'{e}\nНе найдена целевая маржинальность по пустой дате кода ГЦМ {gcm}')
            return target_marginality
