import time

import allure
from selenium.common.exceptions import TimeoutException
from base_page.base_page import BasePageCrm
from crm_pages.modal_potential.modal_potential_locators import ModalPotentialLocators
from crm_pages.object_page.objects_page_locators import ObjectsPageLocators, EditObjectLocators, \
    ModalNewParticipantsLocators, \
    EditingParticipantsLocators, WindowEditDeskReport, ParticipantsTabLocators
from crm_pages.modal_new_kp.modal_new_kp_locators import ModalNewKpLocators
from crm_pages.pq_page.pq_page_locators import PqPageLocators
from base_page.base_page_locators import BaseCrmLocators


@allure.feature('Страница Объекта')
class ObjectPage(BasePageCrm):
    """Страница Объекта"""

    def click_add_kp(self, chapter='ТП'):
        """Создать КП
        ТП(тепловой раздел) - по умолчанию"""
        with allure.step(f'Клик по кнопке +КП в разделе {chapter}'):
            self.expecting_clickability(ObjectsPageLocators.locator_add_kp(chapter), sec=30)
            button_add_kp = self.find_element(ObjectsPageLocators.locator_add_kp(chapter))
            self.scroll_to(button_add_kp)
            self.expecting_clickability(ObjectsPageLocators.locator_add_kp(chapter))
            button_add_kp.click()
            self.waiting_element_is_visibility_located_dom(ModalNewKpLocators.LOCATOR_HEADER_DIV, sec=30)
            assert self.is_element_present(*ModalNewKpLocators.LOCATOR_MODAL_NEW_KP), \
                'Модалка создания нового КП не появилась'

    def click_add_kp_tp_btp(self):
        """Создать КП с БТП на ТП(тепловой раздел)"""
        with allure.step('Клик по кнопке +КП с БТП на ТП(тепловой раздел)'):
            button_add_kp = self.find_element(ObjectsPageLocators.LOCATOR_ADD_KP_BTP_TP)
            self.driver.execute_script("arguments[0].click()", button_add_kp)
            self.waiting_element_is_visibility_located_dom(ModalNewKpLocators.LOCATOR_HEADER_DIV, sec=90)
            assert self.is_element_present(*ModalNewKpLocators.LOCATOR_MODAL_NEW_KP), \
                'Модалка создания нового КП не появилась'

    def go_to_chapter_kp(self):
        """Переход в раздел КП"""
        with allure.step('Переход в раздел КП'):
            self.expecting_clickability(ObjectsPageLocators.LOCATOR_CHAPTER_KP)
            chapter_kp = self.find_element(ObjectsPageLocators.LOCATOR_CHAPTER_KP)
            self.scroll_to_elem_perform(chapter_kp)
            self.click_js(chapter_kp)
            try:
                self.waiting_for_loader_processing_in_dom(ObjectsPageLocators.LOCATOR_LOADER_KP_TAB, sec=90)
                time.sleep(1)
            except TimeoutException:
                pass

    def store_last_pq(self):
        """Сохранение номера последнего pq на странице объекта"""
        with allure.step('Сохранение номера последнего pq на странице объекта'):
            num_pq_list = self.find_elements(ObjectsPageLocators.LOCATOR_LIST_PQ_NUMBER)
            last_num_pq = num_pq_list[0].text
            return last_num_pq

    def open_last_pq_in_a_new_tab(self):
        """Открытие последнего PQ в новой вкладке и переход на открытую вкладку с PQ"""
        with allure.step('Открытие последнего PQ в новой вкладке и переход на открытую вкладку с PQ'):
            open_pq_list = self.find_elements(ObjectsPageLocators.LOCATOR_EDIT_PQ_BUTTON)
            open_last_pq = open_pq_list[0]
            self.ctrl_click_link(open_last_pq)
            self.switching_window(-1)
            self.waiting_element_is_visibility_located_dom(PqPageLocators.LOCATOR_HEADER_KP)

    def change_check_status_object_verified(self):
        """Редактировать статус проверки на Объект проверен"""
        with allure.step('Редактировать статус проверки на Объект проверен'):
            button_edit_object = self.find_element(ObjectsPageLocators.LOCATOR_EDIT_OBJECT)
            self.driver.execute_script("arguments[0].click()", button_edit_object)
            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER_MODAL)
            time.sleep(1)
            button_change_status = self.find_element(EditObjectLocators.LOCATOR_CHANGE_CHECK_STATUS)
            button_change_status.click()
            time.sleep(1)
            self.waiting_element_invisibility(EditObjectLocators.LOCATOR_LOADER_TEXT)
            choose_status = self.find_element(EditObjectLocators.LOCATOR_CHOOSE_CHECK_STATUS)
            choose_status.click()
            time.sleep(1)
            button_save = self.find_element(EditObjectLocators.LOCATOR_SAVE_CHANGE)
            self.driver.execute_script("arguments[0].click()", button_save)
            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER_MODAL)
            time.sleep(2)

    def change_check_status_object_verified_trash(self):
        """Редактировать статус проверки на Мусорный объект"""
        with allure.step('Редактировать статус проверки на Мусорный объект'):
            button_edit_object = self.find_element(ObjectsPageLocators.LOCATOR_EDIT_OBJECT)
            self.driver.execute_script("arguments[0].click()", button_edit_object)
            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER_MODAL)
            time.sleep(1)
            button_change_status = self.find_element(EditObjectLocators.LOCATOR_CHANGE_CHECK_STATUS)
            button_change_status.click()
            time.sleep(1)
            self.waiting_element_invisibility(EditObjectLocators.LOCATOR_LOADER_TEXT)
            choose_status = self.find_element(EditObjectLocators.LOCATOR_CHOOSE_CHECK_STATUS_TRASH)
            choose_status.click()
            time.sleep(1)
            button_save = self.find_element(EditObjectLocators.LOCATOR_SAVE_CHANGE)
            self.driver.execute_script("arguments[0].click()", button_save)
            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER_MODAL)
            time.sleep(2)

    def save_name_object(self) -> str:
        """Сохранение номера объекта"""
        with allure.step('Сохранение номера объекта'):
            time.sleep(2)
            self.waiting_element_is_visibility_on_the_page(ObjectsPageLocators.LOCATOR_NUMBER_OBJECT)
            name_object = self.find_element(ObjectsPageLocators.LOCATOR_NUMBER_OBJECT).text
            return name_object

    def save_address_object(self) -> str:
        """Сохранение адреса объекта"""
        with allure.step('Сохранение адреса объекта'):
            self.waiting_element_is_visibility_on_the_page(ObjectsPageLocators.LOCATOR_ADDRESS_OBJECT, sec=5)
            address = self.find_element(ObjectsPageLocators.LOCATOR_ADDRESS_OBJECT).text
            return address

    def go_chapter_participants(self):
        """Перейти во кладку Участники"""
        with allure.step('Перейти во кладку Участники'):
            self.waiting_element_is_visibility_located_dom(ObjectsPageLocators.LOCATOR_CHAPTER_PARTICIPANTS)
            chapter_participants = self.find_element(ObjectsPageLocators.LOCATOR_CHAPTER_PARTICIPANTS)
            self.scroll_to_elem_perform(chapter_participants)
            self.expecting_clickability(ObjectsPageLocators.LOCATOR_CHAPTER_PARTICIPANTS, sec=5)
            # self.driver.execute_script("arguments[0].click()", chapter_participants)
            chapter_participants.click()
            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER, sec=60)
            try:
                self.waiting_element_is_visibility_located_dom(ParticipantsTabLocators.LOCATOR_BUTTON_ADD_A_PARTICIPANT,
                                                               sec=5)

            except TimeoutException as e:
                self.scroll_to_elem_perform(chapter_participants)
                self.expecting_clickability(ObjectsPageLocators.LOCATOR_CHAPTER_PARTICIPANTS, sec=5)
                # self.driver.execute_script("arguments[0].click()", chapter_participants)
                chapter_participants.click()
                self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER, sec=60)
                self.waiting_element_is_visibility_located_dom(ParticipantsTabLocators.LOCATOR_BUTTON_ADD_A_PARTICIPANT,
                                                               sec=5)

    def go_chapter_participants_new_object(self):
        """Перейти во кладку Участники при создании нового объекта"""
        with allure.step('Перейти во кладку Участники при создании нового объекта'):
            self.waiting_element_is_visibility_on_the_page(ObjectsPageLocators.LOCATOR_CHAPTER_PARTICIPANTS)
            time.sleep(1)
            loader = self.driver.find_elements(*BaseCrmLocators.LOCATOR_LOADER)
            if len(loader) > 0:
                self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER)
            self.waiting_element_is_visibility_on_the_page(ObjectsPageLocators.LOCATOR_CHAPTER_PARTICIPANTS, sec=5)
            chapter_participants = self.find_element(ObjectsPageLocators.LOCATOR_CHAPTER_PARTICIPANTS)
            time.sleep(1)
            self.click_js(chapter_participants)
            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER)
            self.waiting_element_is_visibility_on_the_page(ObjectsPageLocators.LOCATOR_BUTTON_PLUS_POTENTIAL)

    def click_button_plus_potential(self):
        """Клик по кнопке +Потенциал"""
        with allure.step('Клик по кнопке +Потенциал'):
            self.expecting_clickability(ObjectsPageLocators.LOCATOR_BUTTON_PLUS_POTENTIAL)
            button_plus_potential = self.find_element(ObjectsPageLocators.LOCATOR_BUTTON_PLUS_POTENTIAL)
            self.driver.execute_script("arguments[0].click()", button_plus_potential)
            self.waiting_element_is_visibility_on_the_page(ModalPotentialLocators.LOCATOR_HEADER_MODAL_POTENTIAL)

    def checking_partition_status_tp(self, chapter='ТП'):
        """Проверка статуса Обработано у инженерного раздела"""
        with allure.step('Проверка статуса Обработано у инженерного раздела'):
            self.waiting_element_is_visibility_on_the_page(
                ObjectsPageLocators.LOCATOR_STATUS_PROCESSED_AT_THE_TP_SECTION)
            self.expecting_clickability(ObjectsPageLocators.locator_add_kp(chapter))

    def click_section_tvu_with_status_unprocessed(self):
        """Клик по разделу со статусом Не обработано"""
        with allure.step('Клик по разделу со статусом Не обработано'):
            section_with_status_unprocessed = self.find_element(
                ObjectsPageLocators.LOCATOR_SECTION_TVU_WITH_STATUS_UNPROCESSED)
            section_with_status_unprocessed.click()
            self.waiting_element_is_visibility_on_the_page(ObjectsPageLocators.LOCATOR_BUTTON_PLUS_DESK_REPORT)

    def click_button_plus_desk_report(self):
        """Клик по кнопке +Desk отчет у раздела в статусе Не обработано"""
        with allure.step('Клик по кнопке +Desk отчет у раздела в статусе Не обработано'):
            self.waiting_element_is_visibility_on_the_page(ObjectsPageLocators.LOCATOR_BUTTON_PLUS_DESK_REPORT)
            button_plus_desk_report = self.find_element(ObjectsPageLocators.LOCATOR_BUTTON_PLUS_DESK_REPORT)
            self.driver.execute_script("arguments[0].click()", button_plus_desk_report)
            time.sleep(1)
            self.waiting_for_loader_processing_on_page(ObjectsPageLocators.LOCATOR_OBJECT_LOADER)
            self.waiting_element_is_visibility_on_the_page(WindowEditDeskReport.LOCATOR_HEADER_IN_MODAL_DESK, sec=360)
            self.waiting_element_is_visibility_on_the_page(WindowEditDeskReport.LOCATOR_FIELD_FOR_ADDING_CODE_NUMBERS,
                                                           sec=360)

    def check_status_tvu_section(self):
        """Проверка, что раздел ТВУ в статусе Обработано"""
        with allure.step('Проверка, что раздел ТВУ в статусе Обработано'):
            self.driver.refresh()

            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER, sec=360)
            self.waiting_element_is_visibility_on_the_page(
                ObjectsPageLocators.LOCATOR_CHECK_SECTION_STATUS_TVU_PROCESSED)


@allure.feature('Вкладка КП на странице объекта')
class KpTab(ObjectPage):
    """Вкладка КП на странице объекта"""

    def opening_pq_in_a_new_tab_by_number(self, num_pq: str):
        """Открытие PQ в новой вкладке по номеру, num_pq - номер PQ"""
        with allure.step(f'Открытие PQ {num_pq} в новой вкладке по номеру'):
            self.waiting_element_is_visibility_located_dom(ObjectsPageLocators.locator_button_edit_pq(num_pq), sec=300)
            button_edit_pq = self.find_element(ObjectsPageLocators.locator_button_edit_pq(num_pq))
            self.scroll_to_elem_perform(button_edit_pq)
            self.expecting_clickability(ObjectsPageLocators.locator_button_edit_pq(num_pq))
            button_edit_pq = self.find_element(ObjectsPageLocators.locator_button_edit_pq(num_pq))
            self.ctrl_click_link(button_edit_pq)
            time.sleep(0.5)
            self.switching_window(-1)
            self.waiting_for_loader_processing_in_dom(BaseCrmLocators.LOCATOR_LOADER, sec=180)
            self.waiting_element_is_visibility_located_dom(PqPageLocators.LOCATOR_HEADER_KP, sec=20)

    def save_total_price_pq_by_num_pq(self, num_pq) -> float:
        """Сохранение итоговой суммы PQ по номеру PQ"""
        with allure.step(f'Сохранение итоговой суммы PQ {num_pq} по номеру PQ'):
            self.waiting_element_is_visibility_on_the_page(ObjectsPageLocators.LOCATOR_LIST_PQ_NUMBER, sec=10)
            self.waiting_element_is_visibility_located_dom(
                ObjectsPageLocators.locator_total_price_pq_in_chapter_kp(num_pq),
                sec=5)
            total_price_kp = self.find_element(ObjectsPageLocators.locator_total_price_pq_in_chapter_kp(num_pq)
                                               ).text. \
                replace(' ', ''). \
                replace('Всего:', ''). \
                replace('₽', ''). \
                replace(',', '.')
            return float(total_price_kp)


@allure.feature('Вкладка Участники на странице объекта')
class ParticipantsTab(ObjectPage):
    """Вкладка Участники"""

    def checking_whether_there_is_an_organization_in_object_participants(self, name_organization: str) -> bool:
        """Проверка есть ли организация в участниках объекта"""
        with allure.step('Проверка есть ли организация в участниках объекта'):
            self.waiting_element_is_visibility_on_the_page(ParticipantsTabLocators.LOCATOR_LINK_PARTICIPANT, sec=5)
            organization_in_object_participants = self.find_elements(ParticipantsTabLocators.LOCATOR_LINK_PARTICIPANT)
            organization_in_object_participants = [
                organization.text for organization in organization_in_object_participants
            ]

            is_organization = False
            for organization in organization_in_object_participants:
                organization = organization.replace(' ', '')
                name_organization = name_organization.replace(' ', '')
                if name_organization == organization:
                    is_organization = True
            return is_organization

    def check_member_role(self, name_organization_participant: str, expected_role_participant: str) -> bool:
        """Проверка роли участника
        name_organization_participant - имя организации участника
        """
        with allure.step('Проверка роли участника'):
            self.waiting_element_is_visibility_on_the_page(ParticipantsTabLocators.LOCATOR_LINK_PARTICIPANT, sec=5)
            role_participants_on_page = self.find_element(
                ParticipantsTabLocators.locator_participant_role(name_organization_participant)).text
            if role_participants_on_page == expected_role_participant:
                return True
            else:
                return False

    def button_add_a_go_chapter_participants(self):
        """Кнопка +Добавить в разделе Участники"""
        with allure.step('Клик по кнопке +Добавить в разделе Участники'):
            try:
                self.waiting_element_is_visibility_on_the_page(ObjectsPageLocators.LOCATOR_BUTTON_ADD_A_PARTICIPANT)
                button_add_a_go_chapter_participants = self.find_element(
                    ObjectsPageLocators.LOCATOR_BUTTON_ADD_A_PARTICIPANT)
                self.driver.execute_script("arguments[0].click()", button_add_a_go_chapter_participants)
                self.waiting_element_is_visibility_on_the_page(
                    ModalNewParticipantsLocators.LOCATOR_INPUT_SEARCH_FIELD_BY_NAME)
            except TimeoutException:
                self.go_chapter_participants_new_object()

                self.waiting_element_is_visibility_on_the_page(ObjectsPageLocators.LOCATOR_BUTTON_ADD_A_PARTICIPANT)
                button_add_a_go_chapter_participants = self.find_element(
                    ObjectsPageLocators.LOCATOR_BUTTON_ADD_A_PARTICIPANT)
                self.driver.execute_script("arguments[0].click()", button_add_a_go_chapter_participants)
                self.waiting_element_is_visibility_on_the_page(
                    ModalNewParticipantsLocators.LOCATOR_INPUT_SEARCH_FIELD_BY_NAME)

    def member_retention_check(self, member_contact_field, member_specify_role):
        """Проверка Сохранения Участника"""
        with allure.step('Проверка Сохранения Участника'):
            self.waiting_element_is_visibility_on_the_page(ObjectsPageLocators.LOCATOR_CHAPTER_PARTICIPANTS)
            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER)
            chapter_participants = self.find_element(ObjectsPageLocators.LOCATOR_CHAPTER_PARTICIPANTS)
            self.driver.execute_script("arguments[0].click()", chapter_participants)
            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER)

            field_specify_role = self.find_element(ObjectsPageLocators.LOCATOR_PARTICIPANTS_ROLE_DESIGNER).text
            assert field_specify_role == member_specify_role, \
                f'Роль участника ({field_specify_role}) не равна выбранной ({member_specify_role})'


@allure.feature('Модалка добавления нового Участника на странице объекта')
class ModalNewParticipantsPage(BasePageCrm):
    """Модалка добавления нового Участника"""

    def input_search_field_by_name(self, name_participants: str):
        """Поиск участника по названию и его выбора"""
        with allure.step('Поиск участника по названию и его выбора'):
            self.input_name_organization(name_participants)
            self.click_btn_search()
            time.sleep(1)
            self.selecting_found_participant_by_name_organization(name_participants)

    def input_name_organization(self, name_organization: str):
        """Ввод названия организации"""
        with allure.step('Ввод названия организации'):
            self.waiting_element_is_visibility_on_the_page(
                ModalNewParticipantsLocators.LOCATOR_INPUT_SEARCH_FIELD_BY_NAME,
                sec=5)
            name_input_field = self.find_element(ModalNewParticipantsLocators.LOCATOR_INPUT_SEARCH_FIELD_BY_NAME)
            name_input_field.send_keys(name_organization)
            entered_name_organization = name_input_field.get_attribute('value')
            assert entered_name_organization == name_organization, \
                f'Введенное название организации - ({entered_name_organization}) не соответствует ожидаемому - ' \
                f'({name_organization})'

    def click_btn_search(self):
        """Клик по кнопке Найти"""
        with allure.step('Клик по кнопке Найти'):
            self.waiting_element_is_visibility_on_the_page(ModalNewParticipantsLocators.LOCATOR_BUTTON_SEARCH, sec=5)
            button_search = self.find_element(ModalNewParticipantsLocators.LOCATOR_BUTTON_SEARCH)
            button_search.click()
            self.waiting_element_is_visibility_on_the_page(ModalNewParticipantsLocators.LOCATOR_CHOOSE_PARTICIPANTS,
                                                           sec=30)

    def selecting_found_participant_by_name_organization(self, name_organization: str):
        """Выбор найденного участника по названию организации"""
        with allure.step('Выбор найденного участника по названию организации'):
            self.waiting_element_is_visibility_on_the_page(
                ModalNewParticipantsLocators.locator_btn_select_participant_by_organization_name(name_organization),
                sec=10
            )
            btn_select_participant = self.find_element(
                ModalNewParticipantsLocators.locator_btn_select_participant_by_organization_name(name_organization)
            )
            btn_select_participant.click()
            self.waiting_element_is_visibility_on_the_page(EditingParticipantsLocators.LOCATOR_HEADER_EDIT_PARTICIPANTS,
                                                           sec=10)
            header_name_organization_in_modal_edit = self.find_element(
                EditingParticipantsLocators.LOCATOR_HEADER_LINK_NAME_ORGANIZATION
            ).text  # Название организации в заголовке редактирования участника
            assert header_name_organization_in_modal_edit == name_organization, \
                f'Заголовок в виде ссылки на организацию в модалке редактирования участника - ' \
                f'({header_name_organization_in_modal_edit}) не соответствует искомому названию организации - ' \
                f'({name_organization})'


@allure.feature('Модалка Редактирование карточки Участника на странице объекта')
class EditingParticipantsPage(BasePageCrm):
    """Редактирование карточки Участника"""

    def input_specify_role(self, specify_role):
        """Выбор роли участника на объекте (Проектировщик)"""
        with allure.step('Выбор роли участника на объекте (Проектировщик)'):
            self.waiting_element_is_visibility_on_the_page(EditingParticipantsLocators.LOCATOR_HEADER_EDIT_PARTICIPANTS)
            input_specify_role = self.find_element(EditingParticipantsLocators.LOCATOR_INPUT_SPECIFY_ROLE)
            input_specify_role.click()
            self.waiting_element_is_visibility_on_the_page(EditingParticipantsLocators.LOCATOR_CHOOSE_ROLE_ADMIN)
            input_specify_role.send_keys(specify_role)
            # keyboard.send("enter")
            self.waiting_element_is_visibility_on_the_page(EditingParticipantsLocators.LOCATOR_CHOOSE_ROLE_DESIGNER)
            choose_role_designer = self.find_element(EditingParticipantsLocators.LOCATOR_CHOOSE_ROLE_DESIGNER)
            choose_role_designer.click()
            time.sleep(1)

    def input_contact_field(self, contact_field):
        """Выбор контакта на странице редактирования Участника"""
        with allure.step('Выбор контакта на странице редактирования Участника'):
            self.waiting_element_is_visibility_on_the_page(EditingParticipantsLocators.LOCATOR_HEADER_EDIT_PARTICIPANTS)
            input_contact_field = self.find_element(EditingParticipantsLocators.LOCATOR_CONTACT_FIELD)
            input_contact_field.click()
            input_contact_field.send_keys(contact_field)
            self.waiting_element_is_visibility_on_the_page(
                EditingParticipantsLocators.LOCATOR_EMAIL_FOUND_CONTACT)
            choose_contact_field = self.find_element(EditingParticipantsLocators.LOCATOR_CHOOSE_ELEMENT_IN_LIST_CONTACT)
            choose_contact_field.click()
            time.sleep(1)

    def select_a_contact_by_name(self, contact_name: str):
        """Выбор контакта по имени
        contact_name - имя контакта участника
        """
        with allure.step('Выбор контакта по имени'):
            self.waiting_element_is_visibility_on_the_page(EditingParticipantsLocators.LOCATOR_CONTACT_FIELD, sec=5)
            input_contact = self.find_element(EditingParticipantsLocators.LOCATOR_CONTACT_FIELD)
            input_contact.click()
            self.waiting_element_is_visibility_on_the_page(
                EditingParticipantsLocators.LOCATOR_CHOOSE_ELEMENT_IN_LIST_CONTACT, sec=5)
            input_contact.send_keys(contact_name)
            self.waiting_element_is_visibility_on_the_page(
                EditingParticipantsLocators.locator_result_search_participant_contact_by_name(contact_name), sec=20)
            result_search_contact = self.find_element(
                EditingParticipantsLocators.locator_result_search_participant_contact_by_name(contact_name))
            result_search_contact.click()
            selected_contact = self.find_element(EditingParticipantsLocators.LOCATOR_SELECTED_CONTACT_PARTICIPANT).text
            assert selected_contact == contact_name, \
                f'Выбранный контакт - ({selected_contact}) не соответствует искомому - ({contact_name})'

    def input_engineering_department(self, eng_department):
        """Выбор инженерного раздела"""
        with allure.step('Выбор инженерного раздела'):
            self.waiting_element_is_visibility_on_the_page(EditingParticipantsLocators.LOCATOR_HEADER_EDIT_PARTICIPANTS)
            input_engineering_department = self.find_element(
                EditingParticipantsLocators.LOCATOR_INPUT_ENGINEERING_DEPARTMENT)
            input_engineering_department.click()
            input_engineering_department.send_keys(eng_department)
            self.waiting_element_is_visibility_on_the_page(
                EditingParticipantsLocators.LOCATOR_ENGINEERING_DEPARTMENT_TP)
            choose_engineering_department = self.find_element(
                EditingParticipantsLocators.LOCATOR_ENGINEERING_DEPARTMENT_TP)
            choose_engineering_department.click()
            time.sleep(1)

    def save_participants(self):
        """Сохранение изменение в карточке Участника на объекте"""
        with allure.step('Сохранение изменение в карточке Участника на объекте'):
            self.waiting_element_is_visibility_on_the_page(EditingParticipantsLocators.LOCATOR_HEADER_EDIT_PARTICIPANTS)
            button_save = self.find_element(
                EditingParticipantsLocators.LOCATOR_BUTTON_SAVE_PARTICIPATS_ON_OBJECT)
            self.driver.execute_script("arguments[0].click()", button_save)
            self.waiting_for_loader_processing_on_page(
                EditingParticipantsLocators.LOCATOR_LOADER_MODAL_EDIT_PARTICIPANT)
            self.waiting_for_loader_processing_on_page(ParticipantsTabLocators.LOCATOR_LOADER_PARTICIPANTS_TAB, sec=20)


@allure.feature('Модальное окно создания Desk отчета')
class WindowEditDeskReportPage(BasePageCrm):
    """Модальное окно создания Desk отчета"""

    def add_code_field_for_adding_code_numbers(self, article):
        """Добавление кодовых номеров в деск отчете"""
        with allure.step('Добавление кодовых номеров в деск отчете'):
            self.waiting_element_is_visibility_on_the_page(WindowEditDeskReport.LOCATOR_FIELD_FOR_ADDING_CODE_NUMBERS)
            field_add_code = self.find_element(WindowEditDeskReport.LOCATOR_FIELD_FOR_ADDING_CODE_NUMBERS)
            field_add_code.send_keys(article)
            time.sleep(0.5)
            button_add_positions = self.find_element(WindowEditDeskReport.LOCATOR_BUTTON_ADD_POSITIONS)
            button_add_positions.click()

            self.waiting_for_loader_processing_on_page(WindowEditDeskReport.LOCATOR_LOADER_EDIT_CODE_DESK_REPORT,
                                                       sec=360)
            self.waiting_element_is_visibility_on_the_page(WindowEditDeskReport.LOCATOR_TABLE_FIRST_ELEMENT, sec=240)

    def click_button_categories_page(self):
        """Переход во вкладку Категории"""
        with allure.step('Переход во вкладку Категории'):
            button_categories_page = self.find_element(WindowEditDeskReport.LOCATOR_CATEGORIES_PAGE)
            button_categories_page.click()
            self.waiting_element_is_visibility_on_the_page(WindowEditDeskReport.LOCATOR_TABLE_CHOOSE_CATEGORIES)

    def choose_brand_all_categories(self):
        """Выбор бренда для всех категорий"""
        with allure.step('Выбор бренда для всех категорий'):
            field_categories_one = self.find_element(WindowEditDeskReport.LOCATOR_FIRST_FIELD_FOR_BRAND_SELECTION)
            field_categories_one.click()
            self.waiting_element_is_visibility_on_the_page(WindowEditDeskReport.LOCATOR_CHOOSE_BRAND)
            choose_categories = self.find_element(WindowEditDeskReport.LOCATOR_CHOOSE_BRAND)
            choose_categories.click()
            field_categories_two = self.find_element(WindowEditDeskReport.LOCATOR_SECOND_FIELD_FOR_BRAND_SELECTION)
            field_categories_two.click()
            self.waiting_element_is_visibility_on_the_page(WindowEditDeskReport.LOCATOR_CHOOSE_BRAND)
            choose_categories = self.find_element(WindowEditDeskReport.LOCATOR_CHOOSE_BRAND)
            choose_categories.click()
            field_categories_three = self.find_element(WindowEditDeskReport.LOCATOR_THIRD_FIELD_FOR_BRAND_SELECTION)
            field_categories_three.click()
            self.waiting_element_is_visibility_on_the_page(WindowEditDeskReport.LOCATOR_CHOOSE_BRAND)
            choose_categories = self.find_element(WindowEditDeskReport.LOCATOR_CHOOSE_BRAND)
            choose_categories.click()

    def add_commentary(self, comment):
        """Добавление комментария"""
        with allure.step('Добавление комментария'):
            add_commentary = self.find_element(WindowEditDeskReport.LOCATOR_FIELD_COMMENTARY)
            add_commentary.click()
            add_commentary.send_keys(comment)
            time.sleep(1)

    def add_file_desk_report(self, document):
        """Загрузка файла деск отчета"""
        with allure.step(''):
            download_button = self.find_element(WindowEditDeskReport.LOCATOR_ADD_FILE)
            download_button.send_keys(document)
            time.sleep(1)

    def click_button_save(self):
        """Клик по кнопке Сохранить"""
        with allure.step('Клик по кнопке Сохранить'):
            button_save = self.find_element(WindowEditDeskReport.LOCATOR_SAVE_REPORT)
            self.driver.execute_script("arguments[0].click()", button_save)
            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER, sec=180)
