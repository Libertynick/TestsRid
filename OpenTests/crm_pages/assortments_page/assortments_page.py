import time

import allure

from base_page.base_page import BasePageCrm
from base_page.base_page_locators import BaseCrmLocators
from crm_pages.assortments_page.assortments_page_locators import AssortmentsPageLocators, ModalEditLocators
from selenium.webdriver.common.action_chains import ActionChains


@allure.feature('Страница ассортименты')
class AssortmentsPage(BasePageCrm):
    """Страница ассортименты"""

    def search_article(self, article: str):
        """Поиск артикула (кода)
        article - артикул
        """
        with allure.step('Поиск артикула (кода)'):
            self.waiting_element_is_visibility_on_the_page(AssortmentsPageLocators.LOCATOR_INPUT_SEARCH)
            search_input = self.find_element(AssortmentsPageLocators.LOCATOR_INPUT_SEARCH)
            with allure.step('Очистка поля поиска'):
                search_input.clear()
            with allure.step(f'Ввод артикула {article} в поле поиска'):
                search_input.send_keys(article)
            time.sleep(1)
            loader = self.driver.find_elements(*AssortmentsPageLocators.LOCATOR_LOADER_ASSORTMENTS)
            if len(loader) > 0:
                self.waiting_for_loader_processing_on_page(AssortmentsPageLocators.LOCATOR_LOADER_ASSORTMENTS)
            else:
                time.sleep(0.5)
            self.waiting_element_is_visibility_located_dom(AssortmentsPageLocators.LOCATOR_FOLDER_09_RIDAN_PRODUCTS)
            locator_search_results = AssortmentsPageLocators.locator_found_article_in_line_09_ridan_products(article)
            search_results = self.driver.find_elements(*locator_search_results)
            assert len(search_results) == 1, f'Не найдена ни одна строка с папкой /09 Продукция Ридан кода {article}'

    def go_to_folder_09_ridan_products(self):
        """Переход в папку 09 Продукция Ридан"""
        with allure.step("Переход в папку 09 Продукция Ридан"):
            folder_09_rian_products = self.driver.find_elements(
                *AssortmentsPageLocators.LOCATOR_FOLDER_09_RIDAN_PRODUCTS)
            if len(folder_09_rian_products) > 0:
                self.expecting_clickability(AssortmentsPageLocators.LOCATOR_FOLDER_09_RIDAN_PRODUCTS, sec=5)
                folder_09_rian_products = self.find_element(AssortmentsPageLocators.LOCATOR_FOLDER_09_RIDAN_PRODUCTS)
                with allure.step('Двойной клик по папке 09 продукция Ридан'):
                    action_chans = ActionChains(self.driver)
                    action_chans.double_click(folder_09_rian_products).perform()
                time.sleep(0.5)
                self.waiting_for_loader_processing_in_dom(BaseCrmLocators.LOCATOR_LOADER_ASSORTMENTS)

    def editing_folder_09_ridan_products(self, article: str):
        """Редактирование папки 09 Продукция Ридан"""
        with allure.step('Редактирование папки 09 Продукция Ридан'):
            self.waiting_element_is_visibility_on_the_page(
                AssortmentsPageLocators.locator_found_article_in_line_09_ridan_products(article))
            folder_09_ridan_products = self.find_element(
                AssortmentsPageLocators.locator_found_article_in_line_09_ridan_products(article))
            self.right_click(folder_09_ridan_products)
            self.waiting_element_is_visibility_on_the_page(AssortmentsPageLocators.LOCATOR_BUTTON_EDIT)
            button_edit = self.find_element(AssortmentsPageLocators.LOCATOR_BUTTON_EDIT)
            button_edit.click()
            self.waiting_element_is_visibility_on_the_page(ModalEditLocators.LOCATOR_HEADER_MODAL)


@allure.feature('Модалка редактирования кода в ассортименте')
class ModalEdit(BasePageCrm):
    """Модалка редактирования"""

    def changing_estimated_cost_to_ye_if_it_is_in_rubles(self) -> bool:
        """Смена оценочной себестоимости на уе, если она в рублях"""
        with allure.step('Смена оценочной себестоимости на уе, если она в рублях'):
            self.waiting_element_is_visibility_located_dom(ModalEditLocators.LOCATOR_INPUT_ESTIMATED_COST_PRICE, sec=10)
            active_cost_in_cu = self.driver.find_elements(*ModalEditLocators.LOCATOR_ACTIVE_COST_IN_CU)
            if len(active_cost_in_cu) == 0:
                self.waiting_element_is_visibility_on_the_page(ModalEditLocators.LOCATOR_INACTIVE_COST_IN_CU, sec=5)
                inactive_cost_in_cu = self.find_element(ModalEditLocators.LOCATOR_INACTIVE_COST_IN_CU)
                inactive_cost_in_cu.click()
                return True

    def changing_price_to_rubles_if_it_is_in_usd(self) -> bool:
        """Смена цены на рубли, если она в уе"""
        self.waiting_element_is_visibility_on_the_page(ModalEditLocators.LOCATOR_INPUT_PRICE_CODE, sec=5)
        active_price_rub = self.driver.find_elements(*ModalEditLocators.LOCATOR_ACTIVE_CODE_PRICE_IN_RUB)
        if len(active_price_rub) == 0:
            inactive_price_rub = self.find_element(ModalEditLocators.LOCATOR_INACTIVE_CODE_PRICE_IN_RUB)
            inactive_price_rub.click()
            return True

    def entering_estimated_cost(self, estimated_cost: float):
        """Ввод оценочной себестоимости"""
        with allure.step('Ввод оценочной себестоимости'):
            self.expecting_clickability(ModalEditLocators.LOCATOR_INPUT_ESTIMATED_COST_PRICE, sec=5)
            input_estimated_cost = self.find_element(ModalEditLocators.LOCATOR_INPUT_ESTIMATED_COST_PRICE)
            input_estimated_cost.clear()
            input_estimated_cost.send_keys(estimated_cost)

            entered_estimated_cost = float(input_estimated_cost.get_attribute('value').replace(',', '.'))
            assert entered_estimated_cost == estimated_cost, \
                f'Введенная оценочная себестоимость - ({entered_estimated_cost}) не соответствует ожидаемой - ' \
                f'({estimated_cost})'

    def there_should_be_a_cost_price_in_cu(self):
        """Должна быть оценочная себестоимость в уе"""
        with allure.step('Должна быть оценочная себестоимость в уе'):
            self.waiting_element_is_visibility_located_dom(ModalEditLocators.LOCATOR_INPUT_ESTIMATED_COST_PRICE)
            active_cost_in_cu = self.driver.find_elements(*ModalEditLocators.LOCATOR_ACTIVE_COST_IN_CU)
            assert len(active_cost_in_cu) == 1, f'В модалке редактирования артикула оценочная себестоимость не в УЕ'

    def there_should_be_a_cost_price_in_rub(self):
        """Должна быть себестоимость в rub"""
        with allure.step('Должна быть себестоимость в rub'):
            self.waiting_element_is_visibility_located_dom(ModalEditLocators.LOCATOR_INPUT_ESTIMATED_COST_PRICE)
            active_cost_in_rub = self.driver.find_elements(*ModalEditLocators.LOCATOR_ACTIVE_COST_IN_RUB)
            assert len(active_cost_in_rub) == 1, f'В модалке редактирования артикула себестоимость не в RUB'

    def save_cost_price(self) -> float:
        """Сохранение оценочной себестоимости"""
        with allure.step('Сохранение оценочной себестоимости'):
            cost_price = self.find_element(ModalEditLocators.LOCATOR_INPUT_ESTIMATED_COST_PRICE).get_attribute('value')
            cost_price = cost_price.replace(',', '.')
            return float(cost_price)

    def there_should_be_a_price_code_in_cu(self):
        """Должна быть Активная цена кода в уе"""
        with allure.step('Должна быть Активная цена кода в уе'):
            self.waiting_element_is_visibility_on_the_page(ModalEditLocators.LOCATOR_AMOUNT_IN_STOCK, sec=10)
            active_price_code_cu = self.driver.find_elements(*ModalEditLocators.LOCATOR_ACTIVE_CODE_PRICE_IN_CU)
            assert len(active_price_code_cu) == 1, f'В модалке редактирования артикула цена кода не в УЕ'

    def there_should_be_a_price_code_in_rub(self):
        """Должна быть Активная цена кода в rub"""
        with allure.step('Должна быть Активная цена кода в rub'):
            active_price_code_cu = self.driver.find_elements(*ModalEditLocators.LOCATOR_ACTIVE_CODE_PRICE_IN_RUB)
            assert len(active_price_code_cu) == 1, f'В модалке редактирования артикула цена кода не в RUB'

    def save_price_code(self) -> float:
        """Сохранение цены кода"""
        with allure.step('Сохранение цены кода'):
            price_code = self.find_element(ModalEditLocators.LOCATOR_INPUT_PRICE_CODE).get_attribute('value')
            price_code = price_code.replace(',', '.')
            return float(price_code)

    def closing_editing_modal(self):
        """Закрытие модалки редактирования"""
        with allure.step('Закрытие модалки редактирования'):
            button_close = self.find_element(ModalEditLocators.LOCATOR_BUTTON_CLOSE)
            self.click_js(button_close)
            time.sleep(0.5)
            with allure.step('Перезагрузка страницы'):
                self.driver.refresh()
                self.waiting_element_is_visibility_on_the_page(AssortmentsPageLocators.LOCATOR_INPUT_SEARCH, sec=7)

    def save_in_stock_amount(self) -> int:
        """Сохранение количества на складе"""
        with allure.step('Сохранение количества на складе'):
            self.waiting_element_is_visibility_on_the_page(ModalEditLocators.LOCATOR_AMOUNT_IN_STOCK, sec=5)
            amount_in_stock = self.find_element(ModalEditLocators.LOCATOR_AMOUNT_IN_STOCK).text
            amount_in_stock = amount_in_stock.split('\n')[1].split(' ')[0]
            return int(amount_in_stock)

    def click_btn_save(self):
        """Клик по кнопке Сохранить в модалке редактирования ассортимента"""
        with allure.step('Клик по кнопке Сохранить в модалке редактирования ассортимента'):
            self.waiting_element_is_visibility_on_the_page(ModalEditLocators.LOCATOR_BTN_SAVE, sec=5)
            btn_save = self.find_element(ModalEditLocators.LOCATOR_BTN_SAVE)
            btn_save.click()
            self.waiting_element_invisibility(ModalEditLocators.LOCATOR_HEADER_MODAL, sec=15)
