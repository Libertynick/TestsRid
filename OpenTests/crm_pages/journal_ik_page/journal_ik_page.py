import pdb

import allure
from dns.rdtypes.ANY.NSEC3 import b32_hex_to_normal
from selenium.common import TimeoutException

from base_page.base_page import BasePageCrm
from base_page.base_page_locators import BaseCrmLocators
from base_page.raise_exceptions import MyException, MyTimeoutException
from crm_pages.journal_ik_page.journal_ik_locators import JournalIkLocators, PqPageJournalIkLocators


class JournalIkPage(BasePageCrm):
    """Страница Журнал ИК (во вкладке ТО Ридан)"""

    def click_btn_agreement_by_num_pq(self, num_pq: str) -> None:
        """
        Клик по кнопке Согласование по номеру PQ
        :param num_pq: номер КП
        :return: None
        """
        with allure.step('Клик по кнопке Согласование по номеру PQ'):
            self.expecting_clickability(JournalIkLocators.locator_btn_agreement_by_num_pq(num_pq), sec=5)
            btn_agreement = self.find_element(JournalIkLocators.locator_btn_agreement_by_num_pq(num_pq))
            btn_agreement.click()
            self.switching_window(-1)

    def save_name_agreement_by_num_pq(self, num_pq: str) -> str:
        """
        Сохранение имени согласователя по номеру КП
        :param num_pq: Номер КП
        :return: Имя согласователя
        """
        with allure.step('Сохранение имени согласователя по номеру КП'):
            try:
                self.waiting_element_is_visibility_located_dom(
                    JournalIkLocators.locator_name_agreement_by_num_pq(num_pq),
                    sec=5)
                name_agreement = self.find_element(JournalIkLocators.locator_name_agreement_by_num_pq(num_pq)).text
                return name_agreement
            except TimeoutException:
                raise TimeoutException(f'Имя согласователя по номеру КП {num_pq} не найдено на странице')

    def refresh(self):
        """Обновление страницы"""
        with allure.step('Обновление страницы'):
            self.driver.refresh()
            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER)

    def activate_input_search_pq(self):
        """Активация поля ввода поиска КП"""
        with allure.step('Активация поля ввода поиска КП'):
            expected_contains_class = 'select2-focused'
            self.waiting_element_is_visibility_on_the_page(
                JournalIkLocators.LOCATOR_BTN_ACTIVATE_DROP_INPUT_SEARCH_NUM_PQ, sec=5)
            btn_activate_input_search_pq = self.find_element(
                JournalIkLocators.LOCATOR_BTN_ACTIVATE_DROP_INPUT_SEARCH_NUM_PQ)
            btn_activate_input_search_pq.click()
            self.waiting_element_is_visibility_on_the_page(JournalIkLocators.LOCATOR_INPUT_NUM_PQ_SEARCH, sec=5)
            class_input_search_pq = self.find_element(JournalIkLocators.LOCATOR_INPUT_NUM_PQ_SEARCH
                                                      ).get_attribute('class')
            assert expected_contains_class in class_input_search_pq, f'Поле поиска КП не активировано'

    def entered_num_pq_in_input_search(self, num_pq: str):
        """
        Ввод номера КП в поле поиска по номеру КП
        :param num_pq: Номер КП
        :return: None
        """
        with allure.step(f'Ввод номера КП {num_pq} в поле поиска по номеру КП'):
            try:
                input_search_pq = self.find_element(JournalIkLocators.LOCATOR_INPUT_NUM_PQ_SEARCH)
                input_search_pq.send_keys(num_pq)
                self.waiting_element_is_visibility_on_the_page(JournalIkLocators.locator_result_search_pq(num_pq),
                                                               sec=20)
            except TimeoutException:
                raise MyTimeoutException(f'В поле ввода поиска КП не отображается введенное КП - {num_pq}')

    def checking_that_pq_is_not_on_list(self, num_pq: str):
        """
        Проверка, что КП нет в списке
        :param num_pq: Номер КП
        :return: None
        """
        with allure.step(f'Проверка, что КП {num_pq} нет в списке'):
            self.activate_input_search_pq()
            self.entered_num_pq_in_input_search(num_pq)
            res_search_pq = self.find_element(JournalIkLocators.locator_result_search_pq(num_pq))
            res_search_pq.click()
            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER, sec=30)
            link_count_num_pq_on_page = len(self.driver.find_elements(*JournalIkLocators.locator_link_pq(num_pq)))
            assert link_count_num_pq_on_page == 0, \
                f'В результате поиска найдено КП {num_pq}. Ожидаемое - КП не найдено в результате поиска'


class PqPageJournalIk(JournalIkPage):
    """
    Страница КП в Журнале ИК
    """

    def activation_of_all_access_to_printed_form_and_technical_details_of_calculation(self) -> None:
        """
        Активация всех Доступов к печатной форме и техническим деталям расчёта на всех расчетах
        :return: None
        """
        with allure.step('Активация всех Доступов к печатной форме и техническим деталям расчёта на всех расчетах'):
            status_off = 'unchecked'  # Содержится в классе кнопки, когда доступа нет
            status_on = 'checked'  # Содержится в классе кнопки, когда она выбрана
            try:
                self.waiting_element_is_visibility_on_the_page(
                    PqPageJournalIkLocators.LOCATOR_BTN_ALL_ACCESS_TO_PRINTED_FORM_NO_ACTIVATE, sec=5)
                btn_all_access_to_printed_form = self.find_element(
                    PqPageJournalIkLocators.LOCATOR_BTN_ALL_ACCESS_TO_PRINTED_FORM_NO_ACTIVATE)
            except TimeoutException:
                raise MyException('Не выбранная Кнопка Доступ к печатной форме и техническим деталям расчета '
                                  'для всех расчетов не найдена')
            class_btn_all_access_to_printed_form = btn_all_access_to_printed_form.get_attribute('class')
            count_click = 2
            step = 0

            while status_off in class_btn_all_access_to_printed_form:

                btn_all_access_to_printed_form.click()
                step += 1
                if step > count_click:
                    raise MyException(
                        f'Кнопка Доступ к печатной форме и техническим деталям расчета не активирована на всех расчетах. '
                        f'step - {step}')
                class_btn_all_access_to_printed_form = btn_all_access_to_printed_form.get_attribute('class')

            class_btn_all_access_to_printed_form = btn_all_access_to_printed_form.get_attribute('class')
            assert status_on in class_btn_all_access_to_printed_form, \
                f'Кнопка Доступ к печатной форме и техническим деталям расчета не активирована на всех расчетах'

    def activation_of_price_access_for_all_calculations(self) -> None:
        """
        Активация доступа к цене всем расчетам
        :return:  None
        """
        with allure.step('Активация доступа к цене всем расчетам'):
            status_off = 'unchecked'  # Содержится в классе кнопки, когда доступа нет
            status_on = 'checked'  # Содержится в классе кнопки, когда она выбрана
            try:
                self.waiting_element_is_visibility_on_the_page(
                    PqPageJournalIkLocators.LOCATOR_BTN_ALL_ACCESS_TO_CALCULATION_PRICE, sec=5)
                btn_price_access_for_all_calculations = self.find_element(
                    PqPageJournalIkLocators.LOCATOR_BTN_ALL_ACCESS_TO_CALCULATION_PRICE)
            except TimeoutException:
                raise TimeoutException('Не выбранная Кнопка Доступ к цене всем расчетам не найдена')

            class_btn_all_access_to_printed_form = btn_price_access_for_all_calculations.get_attribute('class')
            count_click = 2
            step = 0

            while status_off in class_btn_all_access_to_printed_form:
                btn_price_access_for_all_calculations.click()
                step += 1
                if step > count_click:
                    raise MyException(f'Кнопка Доступ к цене всем расчетам не активирована. step - {step}')
                class_btn_all_access_to_printed_form = btn_price_access_for_all_calculations.get_attribute('class')

            class_btn_all_access_to_printed_form = btn_price_access_for_all_calculations.get_attribute('class')
            assert status_on in class_btn_all_access_to_printed_form, \
                f'Кнопка Доступ к цене всем расчетам не активирована'

    def click_btn_max_all_calculations(self, calculations: str) -> None:
        """
        Клик по кнопке MAX на всех расчетах
        :param calculations: артикул
        :return: None
        """
        with allure.step('Клик по кнопке MAX на всех расчетах'):
            self.waiting_element_is_visibility_on_the_page(PqPageJournalIkLocators.LOCATOR_BTN_MAX, sec=5)
            btn_max = self.find_element(PqPageJournalIkLocators.LOCATOR_BTN_MAX)
            btn_max.click()
            input_discount_value = self.find_element(
                PqPageJournalIkLocators.locator_input_discount_by_article(calculations)).get_attribute('value')
            assert input_discount_value != '', f'Поле ввода скидки пустое. value - ({input_discount_value})'

    def click_btn_approve(self, num_pq: str) -> None:
        """
        Клик по кнопке Согласовать
        :param num_pq: Номер КП
        :return: None
        """
        with (allure.step('Клик по кнопке Согласовать')):
            expected_text_in_badge_info_kp = 'По данному КП нет скидок для согласования'  # Ожидаемый текст в информационном значке КП
            self.expecting_clickability(PqPageJournalIkLocators.LOCATOR_BTN_APPROVE, sec=5)
            btn_approve = self.find_element(PqPageJournalIkLocators.LOCATOR_BTN_APPROVE)
            btn_approve.click()
            self.waiting_for_loader_processing_on_page(BaseCrmLocators.LOCATOR_LOADER)
            self.waiting_element_is_visibility_on_the_page(PqPageJournalIkLocators.LOCATOR_INFO_BADGE_PQ, sec=5)
            badge_info_kp = self.find_element(PqPageJournalIkLocators.LOCATOR_INFO_BADGE_PQ).text
            assert badge_info_kp == expected_text_in_badge_info_kp, \
                (f'КП {num_pq} не согласовано. Информационное сообщение в значке КП после нажатия '
                 f'на кнопку Согласовать - ({badge_info_kp})')
