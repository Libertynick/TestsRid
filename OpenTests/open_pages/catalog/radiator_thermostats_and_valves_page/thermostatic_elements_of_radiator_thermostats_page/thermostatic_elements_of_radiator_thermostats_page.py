import allure

from base_page.base_page import BasePage
from open_pages.catalog.radiator_thermostats_and_valves_page.thermostatic_elements_of_radiator_thermostats_page. \
    thermostatic_elements_of_radiator_thermostats_locators import \
    ThermostaticElementsOfRadiatorThermostatsLocators
from open_pages.catalog.radiator_thermostats_and_valves_page.thermostatic_elements_of_radiator_thermostats_page. \
    thermostatic_elements_of_the_tr_ridan_series_page.thermostatic_elements_of_the_tr_ridan_series_locators import \
    ThermostaticElementsOfTheTrRidanSeriesLocators
from open_pages.product_page.product_page_locators import ProductPageLocators


@allure.feature('Страница Термостатические элементы радиаторных терморегуляторов')
class ThermostaticElementsOfRadiatorThermostatsPage(BasePage):
    """Страница Термостатические элементы радиаторных терморегуляторов"""

    def go_to_series_thermostatic_elements_of_tr_ridan_series(self):
        """Переход в серию Термостатические элементы серии TR Ридан"""
        with allure.step('Переход в серию Термостатические элементы серии TR Ридан'):
            expected_text_in_header = 'Термостатические элементы серии TR Ридан'
            self.waiting_element_is_visibility_on_the_page(
                ThermostaticElementsOfRadiatorThermostatsLocators.
                LOCATOR_LINK_SERIES_THERMOSTATIC_ELEMENTS_OF_TR_RIDAN_SERIES, sec=5
            )
            link_series = self.find_element(
                ThermostaticElementsOfRadiatorThermostatsLocators.
                LOCATOR_LINK_SERIES_THERMOSTATIC_ELEMENTS_OF_TR_RIDAN_SERIES)
            self.click_js(link_series)
            self.waiting_element_is_visibility_on_the_page(
                ThermostaticElementsOfTheTrRidanSeriesLocators.LOCATOR_HEADER,
                sec=5
            )
            header_text = self.find_element(ThermostaticElementsOfTheTrRidanSeriesLocators.LOCATOR_HEADER).text
            assert header_text == expected_text_in_header, \
                f'Текст в заголовке - ({header_text}) на странице Термостатические элементы серии TR Ридан не ' \
                f'соответствует ожидаемому - ({expected_text_in_header})'

    def checking_that_images_src_attribute_is_not_empty(self):
        """Проверка, что у изображений атрибут src не пустой"""
        with allure.step('Проверка, что у изображений атрибут src не пустой'):
            self.waiting_element_is_visibility_on_the_page(
                ThermostaticElementsOfTheTrRidanSeriesLocators.LOCATOR_CAROUSEL_WITH_IMAGES, sec=5)
            img = self.find_elements(ThermostaticElementsOfTheTrRidanSeriesLocators.LOCATOR_IMG_IN_CAROUSEL_WITH_IMAGES)
            for el in img:
                src_image = el.get_attribute('src')
                assert src_image != '', \
                    f'Атрибут src - ({src_image}) пустой в одном из изображений в карусели картинок на старнице'

    def checking_that_product_description_is_not_empty(self):
        """Проверка, что описание товара не пустое"""
        with allure.step('Проверка, что описание товара не пустое'):
            self.waiting_element_is_visibility_on_the_page(
                ThermostaticElementsOfTheTrRidanSeriesLocators.LOCATOR_DESCRIPTION_PRODUCT, sec=5)
            description_product = self.find_elements(
                ThermostaticElementsOfTheTrRidanSeriesLocators.LOCATOR_DESCRIPTION_PRODUCT)
            for el in description_product:
                description = el.text
                assert description != '', f'Один из блоков описания товара пустой - ({description})'

    def checking_that_products_on_page_are_not_archived(self):
        """Проверка, что товары на странице не архивные"""
        with allure.step('Проверка, что товары на странице не архивные'):
            self.waiting_element_is_visibility_on_the_page(
                ThermostaticElementsOfTheTrRidanSeriesLocators.LOCATOR_LINK_PRODUCT_ARTICLE, sec=5)
            list_links_product = self.find_elements(
                ThermostaticElementsOfTheTrRidanSeriesLocators.LOCATOR_LINK_PRODUCT_ARTICLE)
            window_product_series = self.driver.current_window_handle
            for link in list_links_product:
                self.click_js(link)
                self.switching_window(-1)
                self.waiting_element_is_visibility_on_the_page(ProductPageLocators.LOCATOR_H1_HEADER, sec=10)
                name_article = self.find_element(ProductPageLocators.LOCATOR_ARTICLE).text
                archive_product_header = self.driver.find_elements(*ProductPageLocators.LOCATOR_H4_ARCHIVED_ITEM)
                assert len(archive_product_header) == 0, \
                    f'Артикул {name_article} является архивным. Значение длины списка заголовков архивного товара - ' \
                    f'({len(archive_product_header)})'
                self.driver.close()
                self.driver.switch_to.window(window_product_series)

    def click_btn_documentation(self):
        """Клик по кнопке Документация"""
        with allure.step('Клик по кнопке Документация'):
            self.expecting_clickability(ThermostaticElementsOfTheTrRidanSeriesLocators.LOCATOR_BTN_DOCUMENTATION)
            btn_documentation = self.find_element(
                ThermostaticElementsOfTheTrRidanSeriesLocators.LOCATOR_BTN_DOCUMENTATION)
            self.click_js(btn_documentation)
            self.waiting_element_is_visibility_on_the_page(
                ThermostaticElementsOfTheTrRidanSeriesLocators.LOCATOR_BTN_DOWNLOAD_ALL, sec=5)

    def download_all_files(self):
        """Скачивание всех файлов"""
        with allure.step('Скачивание всех файлов'):
            name_file = 'category-4-documents.zip'

            btn_goods = self.find_element(ThermostaticElementsOfTheTrRidanSeriesLocators.LOCATOR_BTN_GOODS)
            self.scroll_to(btn_goods)
            self.expecting_clickability(ThermostaticElementsOfTheTrRidanSeriesLocators.LOCATOR_BTN_DOWNLOAD_ALL)
            btn_download_all = self.find_element(
                ThermostaticElementsOfTheTrRidanSeriesLocators.LOCATOR_BTN_DOWNLOAD_ALL)
            btn_download_all.click()
            self.checking_the_download_document_in_the_download_folder(name_file)
            self.delete_file_by_name_in_download_folder(name_file)
