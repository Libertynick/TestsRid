import time

import allure
from colorama import Fore, Style
from selenium.common import TimeoutException
from selenium.webdriver.support.expected_conditions import element_selection_state_to_be

from base_page.base_page import BasePage
from base_page.base_page_locators import BaseOpenLocators
from base_page.raise_exceptions import MyTimeoutException, MyException
from open_pages.confirmation_page.confirmation_page import ConfirmationPage
from open_pages.confirmation_page.confirmation_page_locators import ConfirmationPageLocators
from open_pages.kp_ridan_page.kp_ridan_locators import KpRidanLocators
from open_pages.order_details_page.order_details_page_locators import OrderDetailsLocators
from open_pages.standart_order_page.standart_order_locators import StandardOrderLocators, \
    OrderSuccessPageLocators
import re


@allure.feature('Страница Стандартный заказ')
class StandardOrderPage(ConfirmationPage):
    """Страница Стандартный заказ"""

    def should_h1_standard_order(self):
        """Должен быть заголовок "Формирование счета или резервация оборудования для покупки"""
        with allure.step('Проверка отображения заголовка на странице Стандартного заказа'):
            assert self.is_element_present(
                *StandardOrderLocators.LOCATOR_H1), 'Заголовок Формирование счета или резервация оборудования для покупки отсутствует на странице Подтверждение'

    def click_new_project(self):
        """Клик по вкладке Новое проектное условие"""
        with allure.step('Клик по вкладке Новое проектное условие'):
            new_project = self.find_element(StandardOrderLocators.LOCATOR_TAB_NEW_PROJECT)
            new_project.click()
            time.sleep(1)
            with allure.step('Ожидание отработки лоадера'):
                self.waiting_for_loader_processing_in_dom(StandardOrderLocators.LOCATOR_NO_LOADER, sec=100)

    def click_btn_kp_ridan(self):
        """Клик по кнопке КП Ридан"""
        with allure.step('Клик по кнопке КП Ридан'):
            self.waiting_element_is_visibility_on_the_page(StandardOrderLocators.LOCATOR_TAB_KP_RIDAN, sec=5)
            btn_kp_ridan = self.find_element(StandardOrderLocators.LOCATOR_TAB_KP_RIDAN)
            btn_kp_ridan.click()
            with allure.step('Ожидание отработки лоадера'):
                self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
            with allure.step('Проверка отображения заголовка КП Ридан'):
                self.waiting_element_is_visibility_located_dom(KpRidanLocators.LOCATOR_SELECTED_BTN_KP_RIDAN, sec=5)

    def click_standard_order(self):
        """Клик по вкладке стандартный заказ"""
        with allure.step('Клик по вкладке Стандартный заказ'):
            standard_order = self.find_element(StandardOrderLocators.LOCATOR_TAB_STANDARD_ORDER)
            standard_order.click()
            time.sleep(1)
            with allure.step('Ожидание отработки лоадера на странице Стандартный заказ'):
                self.waiting_for_loader_processing_in_dom(StandardOrderLocators.LOCATOR_NO_LOADER)

    def store_price_confirmation(self) -> float:
        """Сохранение стоимости на странице Подтверждение, если заказы не разделяются"""
        with allure.step('Сохранение итоговой стоимости на странице Подтверждение (заказы не разделяются)'):
            self.waiting_element_is_visibility_on_the_page(StandardOrderLocators.LOCATOR_TOTAL_PRICE_CONFIRMATION)
            total_price_confirmation = self.find_element(StandardOrderLocators.LOCATOR_TOTAL_PRICE_CONFIRMATION).text
            total_price_confirmation = re.sub(r'[^0-9.]+', r'', total_price_confirmation)
            return float(total_price_confirmation)

    def store_price_material_pto(self) -> float:
        """Сохранение стоимости на странице Подтверждение в случае разделения заказов на материалы + ПТО"""
        with allure.step(
                'Сохранение стоимости на странице Подтверждение в случае разделения заказов на материалы + ПТО'):
            total_price_material_pto = self.find_elements(StandardOrderLocators.LOCATOR_TOTAL_PRICE_CONFIRMATION)
            total_price = 0.0
            for i_price in total_price_material_pto:
                total_price += float(re.sub(r'[^0-9.]+', r'', i_price.text))
            return round(total_price, 2)

    def save_total_price_by_section(self, num_section: int) -> float:
        """
        Сохранение стоимости по номеру секции в разделе Оборудование в корзине
        :param num_section: Номер секции (сверху вниз)
        :return: Стоимость в секции (далее идет как заказ)
        """
        with allure.step(f'Сохранение стоимости по номеру секции {num_section} в разделе Оборудование в корзине'):
            self.waiting_element_is_visibility_located_dom(
                StandardOrderLocators.locator_total_price_by_section(num_section), sec=3)
            total_price = float(
                self.find_element(StandardOrderLocators.locator_total_price_by_section(num_section)).text.replace(' ',
                                                                                                                  ''))
            return total_price

    def save_wight_by_section(self, num_section) -> float:
        """
        Сохранение общего веса по номеру секции в разделе Оборудование в корзине
        :param num_section: Номер секции (сверху вниз) в разделе Оборудование в корзине
        :return: Общий вес по номеру секции
        """
        with allure.step(f'Сохранение общего веса по номеру секции {num_section} в разделе Оборудование в корзине'):
            self.waiting_element_is_visibility_located_dom(StandardOrderLocators.locator_wight_by_section(num_section),
                                                           sec=3)
            wight = float(
                self.find_element(StandardOrderLocators.locator_wight_by_section(num_section)).text.replace(' ', ''))
            return wight

    @staticmethod
    def should_be_equal_prices(price_cart, price_confirmation):
        """Цена на странице Стандартный заказ должна быть равна цене в Корзине"""
        with allure.step('Проверка равенства итоговой стоимости на странице Стандартный заказ и корзины'):
            assert abs(price_cart - price_confirmation) <= 0.5, \
                f'{Fore.RED} Цена {price_cart} в корзине не равна цене {price_confirmation} на странице Подтверждение'

    def price_should_be_more(self, price_cart, price_confirmation):
        """Цена на странице Подтверждения при выборе Кредита должна стать больше из-за надбавки"""
        with allure.step('Цена на странице Подтверждения при выборе Кредита должна стать больше из-за надбавки'):
            try:
                self.waiting_for_loader_processing_in_dom(StandardOrderLocators.LOCATOR_NO_LOADER)
                assert price_cart < price_confirmation
            except AssertionError:
                print(
                    f'{Fore.RED} {price_cart} в корзине больше или равна цене {price_confirmation} на странице Подтверждение')
                print(Style.RESET_ALL)

    def type_comment(self, comment):
        """Ввод комментария в поле Комментарий"""
        with allure.step('Ввод комментария в поле Комментарий'):
            comment_field = self.find_element(StandardOrderLocators.LOCATOR_COMMENT_FIELD)
            comment_field.send_keys(comment)

    def choice_of_payment_terms_prepayment(self):
        """Выбор условия оплаты предоплата """
        with allure.step('Выбор условия оплаты Предоплата на странице Стандартный заказ'):
            with allure.step('Раскрытие списка условий оплаты'):
                terms_of_payment = self.find_element(StandardOrderLocators.LOCATOR_TERMS_OF_PAYMENT)
                self.driver.execute_script("arguments[0].click()", terms_of_payment)
            with allure.step('Клик по элементу Предоплата в выпадающем списке'):
                prepayment = self.find_element(StandardOrderLocators.LOCATOR_PREPAYMENT)
                self.expecting_clickability(StandardOrderLocators.LOCATOR_PREPAYMENT)
                self.driver.execute_script("arguments[0].click()", prepayment)
            with allure.step('Ожидание отработки лоадера после выбора Предоплата'):
                self.waiting_for_loader_processing_in_dom(StandardOrderLocators.LOCATOR_NO_LOADER)

    def there_must_be_an_advance_payment(self) -> None:
        """Должна быть предоплата"""
        with allure.step('Проверка, что условия оплаты - Предоплата'):
            expected_terms_of_payment = 'Предоплата'
            self.waiting_element_is_visibility_on_the_page(StandardOrderLocators.LOCATOR_TERMS_OF_PAYMENT, sec=5)
            selected_terms_f_payment = self.find_element(StandardOrderLocators.LOCATOR_TERMS_OF_PAYMENT).text
            assert selected_terms_f_payment == expected_terms_of_payment, \
                f'Выбранные условия оплаты - ({selected_terms_f_payment}) не соответствуют ожидаемым - ' \
                f'({expected_terms_of_payment})'

    def choice_of_payment_terms(self, terms_of_payment: str):
        """Выбор условия оплаты
        terms_of_payment - условия оплаты
        """
        with allure.step('Выбор условий оплаты'):
            with allure.step('Раскрытие выпадающего списка условий оплаты'):
                terms_of_payment_menu = self.find_element(StandardOrderLocators.LOCATOR_TERMS_OF_PAYMENT)
                self.scroll_to_elem_perform(terms_of_payment_menu)
                self.expecting_clickability(StandardOrderLocators.LOCATOR_TERMS_OF_PAYMENT)
                terms_of_payment_menu.click()
            with allure.step(f'Клик по элементу ({terms_of_payment}) в выпадающем списке условий оплаты'):
                item_terms_of_payment_locator = StandardOrderLocators.dynamic_payment_terms_locator(terms_of_payment)
                item_terms_of_payment = self.find_element(item_terms_of_payment_locator)
                self.expecting_clickability(item_terms_of_payment_locator)
                item_terms_of_payment.click()
                with allure.step('Ожидание отработки лоадера'):
                    self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
            with allure.step('Проверка выбранных условий оплаты'):
                selected_payment_terms = self.find_element(StandardOrderLocators.LOCATOR_SELECTED_PAYMENT_TERMS).text
                assert selected_payment_terms == terms_of_payment, \
                    f'Выбранные условия оплаты - ({selected_payment_terms}) не соответствуют ' \
                    f'ожидаемым - ({terms_of_payment})'

    def click_shipping_list(self):
        """Клик по выпадающему списку Выбор способа доставки"""
        with allure.step('Клик по выпадающему списку Выбор способа доставки'):
            shipping_list = self.find_element(StandardOrderLocators.LOCATOR_SHIPPING_LIST)
            # self.driver.execute_script("arguments[0].click()", shipping_list)
            shipping_list.click()
            self.waiting_element_is_visibility_on_the_page(StandardOrderLocators.LOCATOR_LI_PICKUP_MATERIAL_TO_ADDRESS,
                                                           sec=5)

    def click_shipping_list_pto(self):
        """Клик по выпадающему списку Выбор способа доставки ПТО"""
        with allure.step('Клик по выпадающему списку Выбор способа доставки ПТО'):
            shipping_list = self.find_element(StandardOrderLocators.LOCATOR_SHIPPING_LIST_PTO)
            self.driver.execute_script("arguments[0].click()", shipping_list)
            with allure.step('Проверка отображения на странице выпадающего списка со способами доставок'):
                self.waiting_element_is_visibility_on_the_page(
                    StandardOrderLocators.LOCATOR_UL_SHIPPING_LIST_PTO_ACTIVE, sec=5)

    def choice_of_delivery_method_pickup(self):
        """Выбор способа доставки самовывоз у материалов"""
        with allure.step('Выбор способа доставки Самовывоз у материалов'):
            with allure.step('Раскрытие выпадающего списка способов доставки'):
                self.click_shipping_list()
                pickup = self.find_element(StandardOrderLocators.LOCATOR_LI_PICKUP_MATERIAL)
            with allure.step('Клик по элементу Самовывоз'):
                self.expecting_clickability(StandardOrderLocators.LOCATOR_LI_PICKUP_MATERIAL)
                self.driver.execute_script("arguments[0].click()", pickup)
                time.sleep(1)

    def choice_of_delivery_method_to_specified_address(self):
        """Выбор способа доставки доставка на указанный адрес у материалов"""
        with allure.step('Выбор способа доставки доставка на указанный адрес у материалов'):
            self.click_shipping_list()
            delivery_method_to_specified_address = self.find_element(
                StandardOrderLocators.LOCATOR_LI_PICKUP_MATERIAL_TO_ADDRESS)
            self.expecting_clickability(StandardOrderLocators.LOCATOR_LI_PICKUP_MATERIAL_TO_ADDRESS)
            self.driver.execute_script("arguments[0].click()", delivery_method_to_specified_address)
            self.waiting_element_is_visibility_on_the_page(StandardOrderLocators.LOCATOR_HEADER_DELIVERY_ADDRESS, sec=5)

    def choice_of_delivery_method_pickup_pto(self):
        """Выбор способа доставки ПТО самовывоз"""
        with allure.step('Выбор способа доставки ПТО - самовывоз'):
            self.click_shipping_list_pto()
            with allure.step('Клик по элементу Самовывоз в выпадающем списке'):
                pickup = self.find_element(StandardOrderLocators.LOCATOR_LI_PICKUP_PTO)
                self.waiting_element_is_visibility_on_the_page(StandardOrderLocators.LOCATOR_NO_LOADER)
                self.expecting_clickability(StandardOrderLocators.LOCATOR_LI_PICKUP_PTO)
                self.driver.execute_script("arguments[0].click()", pickup)
                time.sleep(1)

    def choice_of_delivery_to_address_method_pickup_pto(self):
        """Выбор способа доставки ПТО на указанный адрес"""
        with allure.step('Выбор способа доставки ПТО на указанный адрес'):
            self.click_shipping_list_pto()
            pickup = self.find_element(StandardOrderLocators.LOCATOR_LI_PICKUP_PTO_TO_ADDRESS)
            self.waiting_element_is_visibility_on_the_page(StandardOrderLocators.LOCATOR_NO_LOADER)
            self.expecting_clickability(StandardOrderLocators.LOCATOR_LI_PICKUP_PTO_TO_ADDRESS)
            self.driver.execute_script("arguments[0].click()", pickup)
            time.sleep(1)

    def choice_address(self, delivery_address: str):
        """Выбор адреса доставки у материалов"""
        with allure.step('Выбор адреса доставки у материалов'):
            with allure.step('Ввод адреса'):
                self.waiting_element_is_visibility_located_dom(
                    StandardOrderLocators.LOCATOR_INPUT_DELIVERY_ADDRESS_MATERIAL,
                    sec=5)
                input_address = self.find_element(StandardOrderLocators.LOCATOR_INPUT_DELIVERY_ADDRESS_MATERIAL)
                input_address.send_keys(delivery_address)
            with allure.step('Выбор нужного адреса в выпадающем списке всех доступных адресов'):
                new_address = self.waiting_element_is_visibility_on_the_page(
                    StandardOrderLocators.LOCATOR_ITEM_ADDRESS_IN_CHAPTER_DELIVERY_ADDRESS)
                self.driver.execute_script("arguments[0].click()", new_address)
                selected_address = input_address.get_attribute('value')
            with allure.step(f'Проверка соответствия выбранного адреса ожидаемому - ({delivery_address})'):
                assert selected_address == delivery_address, \
                    f'Выбранный адрес - ({selected_address}) не соответствует ожидаемому - ({delivery_address})'

    def choice_address_pto(self, delivery_address: str):
        """Выбор адреса доставки у ПТО"""
        with allure.step('Выбор адреса доставки у ПТО'):
            with allure.step('Ввод адреса'):
                self.waiting_element_is_visibility_located_dom(StandardOrderLocators.LOCATOR_INPUT_LINE_ADDRESS_PTO,
                                                               sec=5)
                input_address = self.find_element(StandardOrderLocators.LOCATOR_INPUT_LINE_ADDRESS_PTO)
                input_address.send_keys(delivery_address)
            with allure.step('Выбор нужного адреса в выпадающем списке всех доступных адресов'):
                new_address = self.waiting_element_is_visibility_on_the_page(
                    StandardOrderLocators.LOCATOR_CHOICE_ADDRESS_DZERZHINSK)
                self.driver.execute_script("arguments[0].click()", new_address)
            with allure.step(f'Проверка соответствия выбранного адреса ожидаемому - ({delivery_address})'):
                selected_address = input_address.get_attribute('value')
                assert selected_address == delivery_address, \
                    f'Выбранный адрес - ({selected_address}) не соответствует ожидаемому - ({delivery_address})'

    def choice_address_type_delivery_moscow(self, delivery_address: str):
        """
        Выбор способа доставки на тип delivery moscow. В зависимости от типа заказов отличается инпут ввода адреса доставки
        :param delivery_address: Адрес доставки
        """
        with allure.step('Выбор способа доставки на тип delivery moscow.'):
            with allure.step('Ввод адреса'):
                self.waiting_element_is_visibility_located_dom(
                    StandardOrderLocators.LOCATOR_INPUT_ADDRESS_MOSCOW_TYPE_DELIVERY,
                    sec=5)
                input_address = self.find_element(StandardOrderLocators.LOCATOR_INPUT_ADDRESS_MOSCOW_TYPE_DELIVERY)
                input_address.send_keys(delivery_address)
            with allure.step('Выбор нужного адреса в выпадающем списке всех доступных адресов'):
                self.waiting_element_is_visibility_on_the_page(
                    StandardOrderLocators.LOCATOR_ITEM_ADDRESS_IN_CHAPTER_DELIVERY_ADDRESS)
                new_address = self.find_element(StandardOrderLocators.LOCATOR_ITEM_ADDRESS_IN_CHAPTER_DELIVERY_ADDRESS)
                self.driver.execute_script("arguments[0].click()", new_address)
            with allure.step(f'Проверка соответствия выбранного адреса ожидаемому - ({delivery_address})'):
                selected_address = input_address.get_attribute('value')
                assert selected_address == delivery_address, \
                    f'Выбранный адрес - ({selected_address}) не соответствует ожидаемому - ({delivery_address})'

    def button_cost_delivery(self):
        """Кнопка Рассчитать стоимость доставки"""
        with allure.step('Клик по кнопке Рассчитать стоимость доставки'):
            button_cost_delivery = self.find_element(StandardOrderLocators.LOCATOR_BTN_CALCULATE_COST_DELIVERY)
            self.driver.execute_script("arguments[0].click()", button_cost_delivery)
            self.waiting_element_invisibility(StandardOrderLocators.LOCATOR_TEXT_COST_DELIVERY)

    def save_cost_delivery_pto(self) -> float:
        """Сохранение стоимости доставки у ПТО"""
        with allure.step('Сохранение стоимости доставки у ПТО'):
            self.waiting_for_loader_processing_in_dom(StandardOrderLocators.LOCATOR_TEXT_COST_DELIVERY, sec=10)
            self.waiting_element_is_visibility_located_dom(
                StandardOrderLocators.LOCATOR_COST_DELIVERY_PRODUCTION_DZERZHINSK, sec=5)
            save_cost_delivery_production_dzerzhinsk = self.find_element(
                StandardOrderLocators.LOCATOR_COST_DELIVERY_PRODUCTION_DZERZHINSK).get_attribute('value')
            save_cost_delivery_production_dzerzhinsk = 0.0 if save_cost_delivery_production_dzerzhinsk == '' else float(
                save_cost_delivery_production_dzerzhinsk)

            cost_delivery_dzerzhinsk = self.find_element(
                StandardOrderLocators.LOCATOR_COST_DELIVERY_DZERZHINSK).get_attribute('value')
            cost_delivery_dzerzhinsk = 0.0 if cost_delivery_dzerzhinsk == '' else float(cost_delivery_dzerzhinsk)

            total_cost_delivery = cost_delivery_dzerzhinsk + save_cost_delivery_production_dzerzhinsk
            return round(total_cost_delivery, 2)

    def save_cost_delivery_materials(self) -> float:
        """Сохранение стоимости доставки у материалов"""
        with allure.step('Сохранение стоимости доставки у материалов'):
            self.waiting_element_is_visibility_located_dom(StandardOrderLocators.LOCATOR_COST_DELIVERY_MATERIALS, sec=5)
            cost_delivery_materials = self.find_element(StandardOrderLocators.LOCATOR_COST_DELIVERY_MATERIALS
                                                        ).get_attribute('value')
            cost_delivery_materials = re.sub(r'[^0-9.]+', r'', cost_delivery_materials)
            return float(cost_delivery_materials)

    def save_cost_delivery_moscow_type_delivery(self) -> float:
        """Сохранение стоимости доставки у типа доставки delivery moscow"""
        with allure.step('Сохранение стоимости доставки у типа доставки delivery moscow'):
            self.waiting_for_loader_processing_in_dom(
                ConfirmationPageLocators.LOCATOR_LOADER_BUTTON_CALCULATE_DELIVERY_COSTS, sec=20)
            self.waiting_element_is_visibility_located_dom(StandardOrderLocators.LOCATOR_INPUT_COST_MOSCOW_DELIVERY,
                                                           sec=3)
            cost_delivery_moscow = float(self.find_element(StandardOrderLocators.LOCATOR_INPUT_COST_MOSCOW_DELIVERY
                                                           ).get_attribute('value'))
            cost_delivery_production_moscow = float(self.find_element(
                StandardOrderLocators.LOCATOR_INPUT_COST_PRODUCTION_MOSCOW).get_attribute('value'))
            cost_delivery = cost_delivery_production_moscow + cost_delivery_moscow
            return round(cost_delivery, 2)

    def save_cost_delivery_type_delivery_cost_production_dzerzhinsk(self) -> float:
        """Сохранение стоимости доставки у типа доставки delivery[costProductionDzerzhinsk]"""
        with allure.step('Сохранение стоимости доставки у типа доставки delivery[costProductionDzerzhinsk]'):
            self.waiting_for_loader_processing_in_dom(
                ConfirmationPageLocators.LOCATOR_LOADER_BUTTON_CALCULATE_DELIVERY_COSTS, sec=20)
            self.waiting_element_is_visibility_located_dom(
                StandardOrderLocators.LOCATOR_INPUT_DELIVERY_COST_PRODUCTION_DZERZHINSK, sec=3)
            try:
                cost_delivery = float(
                    self.find_element(StandardOrderLocators.LOCATOR_INPUT_DELIVERY_COST_PRODUCTION_DZERZHINSK
                                      ).get_attribute('value'))
            except ValueError as e:
                cost_delivery = self.find_element(
                    StandardOrderLocators.LOCATOR_INPUT_DELIVERY_COST_PRODUCTION_DZERZHINSK).text
                raise MyException(f'{e}\n Не удалось получить значение в поле стоимости доставки. {cost_delivery}')
            return cost_delivery

    def check_that_door_to_door_is_selected_in_delivery_address(self):
        """Проверка, что выбрано До двери в разделе Адрес доставки"""
        with allure.step('Проверка, что выбрано До двери в разделе Адрес доставки'):
            try:
                self.waiting_element_is_visibility_located_dom(
                    StandardOrderLocators.LOCATOR_INPUT_RADIO_BTN_TO_THE_DOOR_IN_DELIVERY_ADDRESS, sec=3)
                input_to_the_door_is_selected = self.find_element(
                    StandardOrderLocators.LOCATOR_INPUT_RADIO_BTN_TO_THE_DOOR_IN_DELIVERY_ADDRESS).is_selected()
            except TimeoutException as e:
                raise MyTimeoutException(f'{e}\n Не найдена кнопка До двери в разделе Адрес доставки')
            assert input_to_the_door_is_selected is True, \
                f'В разделе Адрес доставки не выбрана кнопка До двери. Значение - {input_to_the_door_is_selected}'

    def check_that_door_to_door_is_selected_in_delivery_address_dzerzhinsk(self):
        """Проверка, что выбрано До двери в разделе Адрес доставки Дзержинск"""
        with allure.step('Проверка, что выбрано До двери в разделе Адрес доставки Дзержинск'):
            try:
                self.waiting_element_is_visibility_located_dom(
                    StandardOrderLocators.LOCATOR_INPUT_RADIO_BTN_TO_THE_DOOR_IN_DELIVERY_ADDRESS_DZERZHINSK, sec=3)
                input_to_the_door_is_selected = self.find_element(
                    StandardOrderLocators.LOCATOR_INPUT_RADIO_BTN_TO_THE_DOOR_IN_DELIVERY_ADDRESS_DZERZHINSK).is_selected()
            except TimeoutException as e:
                raise MyTimeoutException(f'{e}\n Не найдена кнопка До двери в разделе Адрес доставки Дзержинск')
            assert input_to_the_door_is_selected is True, \
                f'В разделе Адрес доставки Дзержинск не выбрана кнопка До двери. Значение - {input_to_the_door_is_selected}'

    def check_include_shipping_in_order_price_check_box_not_selected_chapter_delivery_address(self):
        """Проверка, что чек-бокс Включить доставку в стоимость заказа не выбран в разделе Адрес доставки"""
        with allure.step(
                'Проверка, что чек-бокс Включить доставку в стоимость заказа не выбран в разделе Адрес доставки'):
            self.waiting_element_is_visibility_located_dom(
                StandardOrderLocators.LOCATOR_INPUT_INCLUDE_SHIPPING_IN_ORDER_PRICE_CHAPTER_DELIVERY_ADDRESS)
            check_box_include_shipping_in_order_price_is_selected = self.find_element(
                StandardOrderLocators.LOCATOR_INPUT_INCLUDE_SHIPPING_IN_ORDER_PRICE_CHAPTER_DELIVERY_ADDRESS
            ).is_selected()
            assert check_box_include_shipping_in_order_price_is_selected is False, \
                (f'Чек бокс Включить доставку в стоимость заказа в разделе Адрес доставки включен. '
                 f'Значение - {check_box_include_shipping_in_order_price_is_selected}')

    def deactivate_check_box_include_shipping_in_order_price_dzerzhinsk(self):
        """Деактивация чек-бокса Включить доставку в стоимость заказа в разделе Адрес доставки Дзержинск"""
        with allure.step(
                'Деактивация чек-бокса Включить доставку в стоимость заказа в разделе Адрес доставки Дзержинск'):
            try:
                self.waiting_element_is_visibility_on_the_page(
                    StandardOrderLocators.LOCATOR_INPUT_INCLUDE_SHIPPING_IN_ORDER_PRICE_CHAPTER_DELIVERY_ADDRESS_DZERZHINSK,
                    sec=5)
                check_box_include_shipping_in_order_price = self.find_element(
                    StandardOrderLocators.LOCATOR_INPUT_INCLUDE_SHIPPING_IN_ORDER_PRICE_CHAPTER_DELIVERY_ADDRESS_DZERZHINSK)
            except TimeoutException as e:
                raise MyTimeoutException(
                    f'{e}\n Не найден чек-бокс Включить доставку в стоимость заказа в разделе Адрес доставки Дзержинск')
            self.scroll_to_elem_perform(check_box_include_shipping_in_order_price)
            self.expecting_clickability(
                StandardOrderLocators.LOCATOR_INPUT_INCLUDE_SHIPPING_IN_ORDER_PRICE_CHAPTER_DELIVERY_ADDRESS_DZERZHINSK,
                sec=5)
            check_box_include_shipping_in_order_price.click()
            is_selected_check_box_include_shipping_in_order_price = check_box_include_shipping_in_order_price.is_selected()
            assert is_selected_check_box_include_shipping_in_order_price is False, \
                (f'Че-бокс Включить доставку в стоимость заказа в разделе Адрес доставки Дзержинск включен. '
                 f'Значение - {is_selected_check_box_include_shipping_in_order_price}')

    def saving_number_of_sections_by_codes(self) -> int:
        """
        Сохранение количества разделов по кодам в секции Оборудование в корзине
        :return: количество разделов по кодам в секции Оборудование в корзине
        """
        with allure.step('Сохранение количества разделов по кодам в секции Оборудование в корзине'):
            self.waiting_element_is_visibility_located_dom(StandardOrderLocators.LOCATOR_SECTIONS_BY_CODE_TYPES, sec=5)
            sections_by_codes_count = len(self.find_elements(StandardOrderLocators.LOCATOR_SECTIONS_BY_CODE_TYPES))
            return sections_by_codes_count

    def save_article_in_section(self, num_section: int) -> list:
        """
        Сохранение списка артикулов в секции (раздел Оборудование в корзине)
        :param num_section: номер секции в разделе Оборудование в корзине
        :return: Список кодов
        """
        with allure.step('Сохранение списка артикулов в секции (раздел Оборудование в корзине)'):
            self.waiting_element_is_visibility_located_dom(
                StandardOrderLocators.locator_article_in_section_number(num_section), sec=5)
            article_list = self.find_elements(StandardOrderLocators.locator_article_in_section_number(num_section))
            article_list = [el.get_attribute('value') for el in article_list]
            return article_list

    def should_be_the_default_address(self, address: str):
        """Сравнение адреса в поле Выберите адрес"""
        with allure.step('Сравнение адреса в поле Выберите адрес'):
            pickup_address = self.find_element(StandardOrderLocators.LOCATOR_PICKUP_ADDRESS_MATERIAL).text
            try:
                assert pickup_address == address
            except AssertionError:
                print(f'Адрес на странице {pickup_address} не равен адресу {address} ')

    def should_be_the_default_address_pto(self, address: str):
        """Сравнение адреса в поле Адрес самовывоза (У ПТО)"""
        with allure.step('Сравнение адреса в поле Адрес самовывоза (У ПТО)'):
            pickup_address = self.find_element(StandardOrderLocators.LOCATOR_PICKUP_ADDRESS_PTO).text
            assert pickup_address == address, f'Адрес на странице {pickup_address} не равен ожидаемому адресу {address}'

    def click_confirmation_button(self):
        """Клик по кнопке Подтвердить"""
        with allure.step('Страница Подтверждение. Клик по кнопке Подтвердить'):
            button_confirmation = self.find_element(StandardOrderLocators.LOCATOR_BUTTON_CONFIRMATION)
            self.scroll_to(button_confirmation)
            self.expecting_clickability(StandardOrderLocators.LOCATOR_BUTTON_CONFIRMATION)
            button_confirmation.click()
            time.sleep(1)
            with allure.step('Ожидание появления заголовка о размещении заказа после клика по кнопке Подтвердить'):
                self.waiting_element_is_visibility_located_dom(StandardOrderLocators.LOCATOR_H3_PLACED_AN_ORDER,
                                                               sec=90)
                time.sleep(2)

    def click_num_pq_on_order_placed_page(self):
        """Клик по номеру PQ на странице Размещен заказ после подтверждения заказа"""
        with allure.step('Клик по номеру PQ на странице Размещен заказ после подтверждения заказа'):
            num_pq_click = self.find_element(OrderSuccessPageLocators.LOCATOR_NUM_PQ_IN_MODAL)
            self.driver.execute_script("arguments[0].click()", num_pq_click)
            time.sleep(1)
            with allure.step('Ожидание отработки лоадера на странице заказа'):
                self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)

    def go_to_created_order(self, num_link: int):
        """Переход в созданный заказ при создании нескольких заказов из Корзины"""
        with allure.step('Переход в созданный заказ при создании нескольких заказов из Корзины'):
            num_link = num_link - 1
            list_links = self.driver.find_elements(*OrderSuccessPageLocators.LOCATOR_NUM_PQ_IN_MODAL)
            self.driver.execute_script("arguments[0].click()", list_links[num_link])
            time.sleep(2)
            with allure.step('Ожидание отработки лоадера'):
                self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
            with allure.step('Ожидание появления номера договора на странице заказа'):
                self.waiting_element_is_visibility_on_the_page(OrderDetailsLocators.LOCATOR_CONTRACT_NUMBER)
                time.sleep(1)

    def check_is_with_complete_set_on_pto(self):
        """Проверка, что включен не редактируется чек-бокс 'Отгрузка только при полной комплектации'"""
        with allure.step('Проверка, что включен не редактируется чек-бокс "Отгрузка только при полной комплектации"'):
            try:
                assert self.find_element(StandardOrderLocators.LOCATOR_IS_WITH_COMPLETE_SET_NOT_EDITING)
            except AssertionError:
                print("Чек-бокс 'Отгрузка при полной комплектации выключен'")

    def save_allowances(self) -> list:
        """Сохранение надбавок на всех линиях"""
        with allure.step('Сохранение надбавок на всех линиях'):
            allowances = self.find_elements(StandardOrderLocators.LOCATOR_ALLOWANCES)
            allowances_list = [float(allowance.text.replace('%', '')) for allowance in allowances]
            return allowances_list
