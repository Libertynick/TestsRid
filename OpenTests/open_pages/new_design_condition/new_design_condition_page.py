import time

import allure
from selenium.webdriver import Keys

from open_pages.design_condition_page.design_condition_locators import DesignConditionLocators
from open_pages.new_design_condition.new_design_condition_locators import NewDesignConditionLocators
from open_pages.standart_order_page.standart_order_page import StandardOrderPage


@allure.feature('Страница Новое проектное условие')
class NewDesignCondition(StandardOrderPage):
    """Страница Новое проектное условие"""

    def input_num_object_in_field_name_or_number_of_pinned_object(self, num_object: str):
        """Ввод номера объекта в поле Название или номер закрепленного объекта"""
        with allure.step('Ввод номера объекта в поле Название или номер закрепленного объекта'):
            self.waiting_element_is_visibility_located_dom(NewDesignConditionLocators.LOCATOR_INPUT_NAME_OBJECT, sec=5)
            input_object = self.find_element(NewDesignConditionLocators.LOCATOR_INPUT_NAME_OBJECT)
            input_object.send_keys(num_object)
            self.waiting_for_loader_processing_on_page(NewDesignConditionLocators.LOCATOR_SPINNER_IN_FIELD, sec=20)
            self.waiting_element_is_visibility_located_dom(NewDesignConditionLocators.locator_object(num_object), sec=30)
            # self.waiting_element_is_visibility_on_the_page(NewDesignConditionLocators.locator_object(num_object))

    def choose_name_object(self, num_object='1161732'):
        """Выбор объекта"""
        with allure.step('Выбор объекта по номеру'):
            self.expecting_clickability(NewDesignConditionLocators.LOCATOR_CHOOSE_OBJECT)
            choose_obj = self.find_element(NewDesignConditionLocators.LOCATOR_CHOOSE_OBJECT)
            self.driver.execute_script("arguments[0].click()", choose_obj)
            self.waiting_element_is_visibility_located_dom(NewDesignConditionLocators.locator_object(num_object))
            self.expecting_clickability(NewDesignConditionLocators.locator_object(num_object))
            choose_name_obj = self.find_element(NewDesignConditionLocators.locator_object(num_object))
            self.click_js(choose_name_obj)
            selected_num_object = self.find_element(NewDesignConditionLocators.LOCATOR_INPUT_NAME_OBJECT
                                                    ).get_attribute('value').split(' ')[0]
            assert selected_num_object == num_object, \
                f'Номер объекта, который выбран - ({selected_num_object}), не соответствует ожидаемому - ({num_object})'

    def choose_eng_section(self, name_section='Тепловой Пункт'):
        """Выбор инженерного раздела"""
        with allure.step('Выбор инженерного раздела при создании Нового проектного условия'):
            eng_selection = self.find_element(NewDesignConditionLocators.LOCATOR_ENGINEERING_SECTION)
            self.driver.execute_script("arguments[0].click()", eng_selection)
            time.sleep(0.5)
            choose_eng_section = self.find_element(NewDesignConditionLocators.locator_engineer_section(name_section))
            self.driver.execute_script("arguments[0].click()", choose_eng_section)
            time.sleep(0.5)

    def choose_end_buyer(self):
        """Выбор конечного покупателя"""
        with allure.step('Выбор конечного покупателя'):
            # scroll_to = self.find_element(NewDesignConditionLocators.LOCATOR_CHOOSE_OBJECT)
            # self.scroll_to(scroll_to)

            self.expecting_clickability(NewDesignConditionLocators.LOCATOR_FINAL_BUYER, sec=5)
            end_buyer = self.find_element(NewDesignConditionLocators.LOCATOR_FINAL_BUYER)
            self.click_js(end_buyer)
            self.expecting_clickability(NewDesignConditionLocators.LOCATOR_FINAL_BUYER_CHOOSE, sec=5)
            choose_end_buyer = self.find_element(NewDesignConditionLocators.LOCATOR_FINAL_BUYER_CHOOSE)
            self.click_js(choose_end_buyer)

    def save_contractual_discounts(self) -> list:
        """Сохранение договорных скидок"""
        with allure.step('Сохранение договорных скидок'):
            self.waiting_element_is_visibility_located_dom(NewDesignConditionLocators.LOCATOR_CONTRACTUAL_DISCOUNTS,
                                                           sec=5)
            list_contractual_discounts = self.find_elements(NewDesignConditionLocators.LOCATOR_CONTRACTUAL_DISCOUNTS)
            list_contractual_discounts = [float(el.text.replace('%', '')) for el in list_contractual_discounts]
            return list_contractual_discounts

    def button_input_gcm(self):
        """Нажать на кнопку Внести скидку по ГЦМ"""
        with allure.step('Нажать на кнопку Внести скидку по ГЦМ'):
            button_input_gcm = self.find_element(NewDesignConditionLocators.LOCATOR_BUTTON_GCM)
            self.driver.execute_script("arguments[0].click()", button_input_gcm)
            self.waiting_element_is_visibility_on_the_page(NewDesignConditionLocators.LOCATOR_TEXT_HEAD)

    def saving_a_list_with_discounts_in_gcm_tab(self) -> list:
        """Сохранение списка со скидками во вкладке ГЦМ"""
        with allure.step('Сохранение списка со скидками во вкладке ГЦМ'):
            old_list_gcm = self.driver.find_elements(*NewDesignConditionLocators.LOCATOR_REQUESTED_DISCOUNT)
            list_gcm = []
            for el in old_list_gcm:
                el = float(el.get_attribute("value"))
                list_gcm.append(el)
            return list_gcm

    def input_new_gcm(self, new_gcm: int):
        """Ввод новых скидок при согласовании проектного условия"""
        with allure.step('Ввод новых скидок при согласовании проектного условия'):
            self.waiting_element_is_visibility_on_the_page(NewDesignConditionLocators.LOCATOR_REQUESTED_DISCOUNT)
            requested_discount_list = self.driver.find_elements(*NewDesignConditionLocators.LOCATOR_REQUESTED_DISCOUNT)
            for requested_discount in requested_discount_list:
                old_discount = requested_discount.get_attribute("value")
                requested_discount.send_keys(Keys.CONTROL + "a")
                requested_discount.send_keys(int(old_discount) + new_gcm)

    def saving_requested_discounts_on_page(self) -> list:
        """Сохранение запрашиваемых скидок на странице"""
        with allure.step('Сохранение запрашиваемых скидок на странице'):
            requested_discount_on_page_design_condition = self.find_elements(
                NewDesignConditionLocators.LOCATOR_REQUESTED_DISCOUNT_ON_PAGE_DESIGN_CONDITION)
            requested_discount_list = [float(discount.get_attribute('value')) for discount in
                                       requested_discount_on_page_design_condition]
            return requested_discount_list

    def click_on_button_confirm_entered_gcm(self):
        """Клик по Кнопке Подтвердить внесенные ГЦМ"""
        with allure.step('Клик по Кнопке Подтвердить внесенные ГЦМ'):
            button_confirm = self.find_element(NewDesignConditionLocators.LOCATOR_BUTTON_CONFIRM_GCM)
            self.driver.execute_script("arguments[0].click()", button_confirm)
            self.waiting_element_invisibility(NewDesignConditionLocators.LOCATOR_MODAL_DISCOUNTS_GCM)
            self.expecting_clickability(NewDesignConditionLocators.LOCATOR_DOWLOAD_DOCUMENT)

    def new_discount(self):
        """Сохранение проставленной скидки на странице Проектное условие"""
        with allure.step('Сохранение проставленной скидки на странице Проектное условие'):
            new_discount = self.find_element(NewDesignConditionLocators.LOCATOR_DISCOUNT).text
            print("Скидка дистрибьютора", new_discount)
            return new_discount

    def there_must_be_an_advance_payment(self):
        """Должна быть Предоплата в Условия оплаты"""
        with allure.step('Проверка что должна быть Предоплата в Условия оплаты'):
            true_terms_of_payment = 'Предоплата'
            terms_of_payment_on_page = self.find_element(NewDesignConditionLocators.LOCATOR_TERMS_OF_PAYMENT).text
            assert true_terms_of_payment == terms_of_payment_on_page, \
                f'Условия оплаты на странице - ({terms_of_payment_on_page}) не соответствуют ожидаемым - ' \
                f'({true_terms_of_payment})'

    def there_should_be_standard_contractual_terms(self):
        """Должны быть стандартные договорные условия"""
        with allure.step('Проверка что должны быть стандартные договорные условия'):
            true_contract_terms = 'Стандартные договорные условия'
            contract_terms_on_page = self.find_element(NewDesignConditionLocators.LOCATOR_CONTRACT_TERMS).text
            assert contract_terms_on_page == true_contract_terms, \
                f'Договорные условия на странице - ({contract_terms_on_page}) не соответствуют ожидаемым - ' \
                f'({true_contract_terms})'

    def click_button_confirm(self):
        """Клик по кнопке Подтвердить"""
        with allure.step('Клик по кнопке Подтвердить'):
            button_confirmation = self.find_element(NewDesignConditionLocators.LOCATOR_BUTTON_CONFIRMATION)
            self.driver.execute_script("arguments[0].click()", button_confirmation)
            time.sleep(2)
            self.waiting_element_is_visibility_located_dom(NewDesignConditionLocators.LOCATOR_H3_PLACED_AN_ORDER, 60)

    def transition_to_created_design_condition(self):
        """Переход в созданное проектное условие"""
        with allure.step('Переход в созданное проектное условие (клик по ссылке)'):
            pq_links = self.find_element(NewDesignConditionLocators.LOCATOR_CREATED_PQ)
            self.click_js(pq_links)
            time.sleep(2)
            self.waiting_element_is_visibility_on_the_page(DesignConditionLocators.LOCATOR_HEADER)
            time.sleep(1)

    def click_shipping_list(self):
        """Клик по выпадающему списку Выбор способа доставки"""
        with allure.step('Клик по выпадающему списку Выбор способа доставки'):
            shipping_list = self.find_element(DesignConditionLocators.LOCATOR_SHIPPING_LIST)
            self.driver.execute_script("arguments[0].click()", shipping_list)
            self.waiting_element_is_visibility_located_dom(
                NewDesignConditionLocators.LOCATOR_DROP_DOWN_LIST_OF_DELIVERY_METHODS)

    def selection_of_delivery_to_specified_address(self):
        """Выбор доставки на указанный адрес"""
        with allure.step('Выбор доставки на указанный адрес'):
            self.waiting_element_is_visibility_located_dom(
                NewDesignConditionLocators.LOCATOR_DELIVERY_TO_SPECIFIED_ADDRESS)
            button_delivery = self.find_element(NewDesignConditionLocators.LOCATOR_DELIVERY_TO_SPECIFIED_ADDRESS)
            button_delivery.click()
            self.waiting_element_is_visibility_located_dom(NewDesignConditionLocators.LOCATOR_HEADER_DELIVERY_ADDRESS)

    def entering_delivery_address(self, delivery_address: str):
        """Выбор адреса доставки
        delivery_address - адрес доставки
        """
        with allure.step('Выбор адреса доставки'):
            with allure.step('Клик по полю адрес и ввод адреса'):
                input_delivery_address = self.find_element(NewDesignConditionLocators.LOCATOR_INPUT_DELIVERY_ADDRESS)
                input_delivery_address.send_keys(delivery_address)
                locator_item_delivery_address = NewDesignConditionLocators.locator_item_delivery_address_for_selection(
                    delivery_address)
                with allure.step('Выбор из списка нужного адреса'):
                    self.waiting_element_is_visibility_located_dom(locator_item_delivery_address)
                    item_delivery_address = self.find_element(
                        NewDesignConditionLocators.locator_item_delivery_address_for_selection(delivery_address))
                    self.click_js(item_delivery_address)
                    select_delivery_address = input_delivery_address.get_attribute('value')  # Выбранный адрес доставки
                    assert select_delivery_address == delivery_address, \
                        f'Выбранный способ доставки- ({select_delivery_address}) не соответствует ожидаемому- ({delivery_address})'

    def delivery_cost_calculation(self):
        """Расчет стоимости доставки"""
        with allure.step('Клик по кнопке рассчитать стоиомсть доставки и сохранение стоимости доставки'):
            self.expecting_clickability(NewDesignConditionLocators.LOCATOR_CALCULATE_COST_DELIVERY)
            button_calculation = self.find_element(NewDesignConditionLocators.LOCATOR_CALCULATE_COST_DELIVERY)
            self.click_js(button_calculation)
            self.waiting_for_loader_processing_in_dom(NewDesignConditionLocators.LOCATOR_DELIVERY_CALCULATION_LOADER)
            cost_delivery = self.find_element(NewDesignConditionLocators.LOCATOR_INPUT_COST_DELIVERY).get_attribute(
                'value')
            return float(cost_delivery)

    def save_price_list_by_article(self, article: str):
        """Сохранение прайс- листа по артикулу"""
        with allure.step('Сохранение прайс- листа по артикулу'):
            self.waiting_element_is_visibility_located_dom(
                NewDesignConditionLocators.locator_price_list_by_article(article), sec=5)
            price_list = self.find_element(
                NewDesignConditionLocators.locator_price_list_by_article(article)).text.replace(' ', '')
            return float(price_list)

    def check_text_in_info_tooltip_identifier(self, expected_text: str, article: str):
        """Проверка информационного сообщения в тултипе"""
        with allure.step('Проверка информационного сообщения в тултипе'):
            self.waiting_element_is_visibility_located_dom(
                NewDesignConditionLocators.locator_identifier_by_article(article), sec=5)
            btn_identifier = self.find_element(NewDesignConditionLocators.locator_identifier_by_article(article))
            self.click_js(btn_identifier)
            self.waiting_element_is_visibility_on_the_page(
                NewDesignConditionLocators.locator_info_messages_in_tooltip_by_article(article), sec=5)
            text_in_tooltip = self.find_element(
                NewDesignConditionLocators.locator_info_messages_in_tooltip_by_article(article)).text
            assert text_in_tooltip == expected_text, \
                f'Текст во всплывающем тултипе по артикулу - ({text_in_tooltip}) не соответствует ожидаемому - ({expected_text})'
