import time

import allure

from base_page.base_page import BasePage
from base_page.base_page_locators import BaseOpenLocators
from open_pages.calculation_page.calculation_page_locators import CalculationPageLocators
from open_pages.header.header_locators import HeaderLocators


@allure.feature('Страница Расчет')
class CalculationPage(BasePage):
    """Страница Расчет"""

    def click_button_edit(self):
        """Клик по кнопке Редактировать"""
        with allure.step('Клик по кнопке Редактировать'):
            self.expecting_clickability(CalculationPageLocators.LOCATOR_BUTTON_EDIT)
            btn_edit = self.find_element(CalculationPageLocators.LOCATOR_BUTTON_EDIT)
            btn_edit.click()
            self.waiting_element_is_visibility_on_the_page(
                CalculationPageLocators.LOCATOR_TITLE_IN_CALCULATION_EDITING_MODAL)

    def entering_name_in_modal_edit(self, name: str):
        """Ввод названия в модалке редактирования"""
        with allure.step('Ввод названия в модалке редактирования'):
            input_name = self.find_element(CalculationPageLocators.LOCATOR_INPUT_NAME_IN_MODAL_EDIT)
            input_name.clear()
            input_name.send_keys(name)
            selected_name = input_name.get_attribute('value')
            assert selected_name == name, f'Введенное имя ({selected_name}) в поле Название не соответствует ожидаемому ' \
                                          f'- ({name})'

    def entering_description_in_modal_edit(self, description: str):
        """Ввод описания в модалке редактирования"""
        with allure.step('Ввод описания в модалке редактирования'):
            input_description = self.find_element(CalculationPageLocators.LOCATOR_INPUT_DESCRIPTION_IN_MODAL_EDIT)
            input_description.clear()
            input_description.send_keys(description)
            selected_description = input_description.get_attribute('value')
            assert selected_description == description, f'Введенное имя ({selected_description}) в поле Название не ' \
                                                        f'соответствует ожидаемому - ({description})'

    def click_button_save_in_modal_edit(self):
        """Клик по кнопке Сохранить в модалке редактирования"""
        with allure.step('Клик по кнопке Сохранить в модалке редактирования'):
            btn_save = self.find_element(CalculationPageLocators.LOCATOR_BUTTON_SAVE_IN_MODAL_EDIT)
            btn_save.click()
            time.sleep(0.2)
            self.waiting_for_loader_processing_in_dom(CalculationPageLocators.LOCATOR_LOADER_IN_BUTTON_SAVE_MODAL_EDIT)
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
            with allure.step('Ожидание отображения заголовка Успех после сохранения'):
                self.waiting_element_is_visibility_on_the_page(
                    CalculationPageLocators.LOCATOR_HEADER_SUCCESS_AFTER_EDITING_CALCULATION)
            with allure.step('Закрытие модалки Успех'):
                self.expecting_clickability(CalculationPageLocators.LOCATOR_BUTTON_CLOSE_MODAL_SUCCESS)
                btn_close_modal_success = self.find_element(CalculationPageLocators.LOCATOR_BUTTON_CLOSE_MODAL_SUCCESS)
                self.click_js(btn_close_modal_success)
            with allure.step('Ожидание невидимости модалки Успех на странице'):
                self.waiting_element_invisibility(
                    CalculationPageLocators.LOCATOR_HEADER_SUCCESS_AFTER_EDITING_CALCULATION)

    def checking_calculation_name_changes(self, expected_name: str):
        """Проверка изменения названия расчета"""
        with allure.step('Проверка изменения названия расчета'):
            self.waiting_element_is_visibility_on_the_page(CalculationPageLocators.LOCATOR_NAME_ADDRESS_NUM_OBJECT,
                                                           sec=20)
            name_on_page = self.find_element(CalculationPageLocators.LOCATOR_NAME_ADDRESS_NUM_OBJECT).text
            assert name_on_page == expected_name, \
                f'Название расчета на странице - ({name_on_page}) не соответствует ожидаемому - ({expected_name})'

    def checking_calculation_description_changes(self, expected_description: str):
        """Проверка изменения названия расчета"""
        with allure.step('Проверка изменения названия расчета'):
            self.driver.refresh()
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
            self.waiting_element_is_visibility_on_the_page(CalculationPageLocators.LOCATOR_DESCRIPTION_CALC, sec=20)
            description_on_page = self.find_element(CalculationPageLocators.LOCATOR_DESCRIPTION_CALC).text
            assert description_on_page == expected_description, \
                f'Описание расчета на странице - ({description_on_page}) не соответствует ожидаемому ' \
                f'- ({expected_description})'

    def save_price_calculation_on_page_calculation(self) -> float:
        """Сохранение стоимости расчета на странице Расчет"""
        with allure.step('Сохранение стоимости расчета на странице Расчет'):
            self.waiting_element_is_visibility_on_the_page(CalculationPageLocators.LOCATOR_PRICE_CALCULATION)
            price_calc = self.find_element(CalculationPageLocators.LOCATOR_PRICE_CALCULATION).text
            price_calc = price_calc.replace(' ', '')
            return float(price_calc)

    def save_price_calculation_in_modal_adding_products(self) -> float:
        """Сохранение стоимости расчета в модалке добавления товара в корзину"""
        with allure.step('Сохранение стоимости расчета в модалке добавления товара в корзину'):
            self.waiting_element_is_visibility_on_the_page(
                CalculationPageLocators.LOCATOR_PRICE_CALC_IN_MODAL_ADDING_PRODUCT)
            price_calc = self.find_element(CalculationPageLocators.LOCATOR_PRICE_CALC_IN_MODAL_ADDING_PRODUCT).text
            price_calc = price_calc.replace(' ', '')
            return float(price_calc)

    def click_button_adding_to_cart_on_page_calculation(self):
        """Клик по кнопке Добавить в корзину на странице расчета"""
        with allure.step('Клик по кнопке Добавить в корзину на странице расчета'):
            self.expecting_clickability(CalculationPageLocators.LOCATOR_BUTTON_ADD_TO_CART)
            btn_add_to_cart = self.find_element(CalculationPageLocators.LOCATOR_BUTTON_ADD_TO_CART)
            btn_add_to_cart.click()
            with allure.step('Ожидание появления заголовка Выберите количество товаров в модалке'):
                self.waiting_element_is_visibility_on_the_page(
                    CalculationPageLocators.LOCATOR_HEADER_IN_MODAL_FOR_ADDING_PRODUCTS_TO_CART)

    def save_count_products_in_modal_adding_products(self) -> int:
        """Сохранение количества товара в модалке добавления товара"""
        with allure.step('Сохранение количества товара в модалке добавления товара'):
            count_products = self.find_element(
                CalculationPageLocators.LOCATOR_INPUT_ITEM_QUANTITY_INPUT_FIELD_IN_MODAL_ADDING_PRODUCTS
            ).get_attribute('value')
            return int(count_products)

    def save_article_in_modal_adding_product(self):
        """Сохранение артикула в модалке добавления товаров"""
        with allure.step('Сохранение артикула в модалке добавления товаров'):
            self.waiting_element_is_visibility_on_the_page(
                CalculationPageLocators.LOCATOR_ARTICLE_IN_MODAL_ADDING_PRODUCT)
            article = self.find_element(CalculationPageLocators.LOCATOR_ARTICLE_IN_MODAL_ADDING_PRODUCT).text
            return article

    def increase_in_quantity_of_goods_in_modal_adding_products(self, count_product: int):
        """Увеличение количества товара в модалке добавления товара"""
        with allure.step('Увеличение количества товара в модалке добавления товара'):
            for count in range(count_product - 1):
                self.expecting_clickability(
                    CalculationPageLocators.LOCATOR_BUTTON_PLUS_QUANTITY_OF_PRODUCT_IN_MODAL_ADDING_PRODUCTS)
                btn_plus = self.find_element(
                    CalculationPageLocators.LOCATOR_BUTTON_PLUS_QUANTITY_OF_PRODUCT_IN_MODAL_ADDING_PRODUCTS)
                self.click_js(btn_plus)

    def click_button_adding_to_cart_in_modal_for_adding_products_to_cart(self):
        """Клик по кнопке Добавить в корзину в модалке добавления товара в корзину"""
        with allure.step('Клик по кнопке Добавить в корзину в модалке добавления товара в корзину'):
            self.expecting_clickability(
                CalculationPageLocators.LOCATOR_BTN_ADD_TO_CART_IN_MODAL_FOR_ADDING_PRODUCTS_TO_CART)
            btn_add_to_cart = self.find_element(
                CalculationPageLocators.LOCATOR_BTN_ADD_TO_CART_IN_MODAL_FOR_ADDING_PRODUCTS_TO_CART)
            btn_add_to_cart.click()
            with allure.step('Ожидание отображения заголовка Товары добавлены в корзину!'):
                self.waiting_element_is_visibility_on_the_page(
                    CalculationPageLocators.LOCATOR_HEADER_ITEMS_ADDED_TO_CART_IN_MODAL)

    def click_button_continue_shopping(self):
        """Клик по кнопке Продолжить покупки"""
        with allure.step('Клик по кнопке Продолжить покупки'):
            time.sleep(0.5)
            self.expecting_clickability(CalculationPageLocators.LOCATOR_BTN_CONTINUE_SHOPPING)
            btn_continue = self.find_element(CalculationPageLocators.LOCATOR_BTN_CONTINUE_SHOPPING)
            self.click_js(btn_continue)
            with allure.step('Ожидание невидимости заголовка Товары добавлены в корзину!'):
                self.waiting_element_invisibility(CalculationPageLocators.LOCATOR_HEADER_ITEMS_ADDED_TO_CART_IN_MODAL)

    def click_button_go_to_cart(self):
        """Клик по кнопке Перейти в корзину"""
        with allure.step('Клик по кнопке Перейти в корзину'):
            self.expecting_clickability(CalculationPageLocators.LOCATOR_BTN_GO_TO_CART_IN_MODAL)
            btn_go_to_cart = self.find_element(CalculationPageLocators.LOCATOR_BTN_GO_TO_CART_IN_MODAL)
            self.click_js(btn_go_to_cart)
            time.sleep(2)
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)

    def save_count_products_in_cart_icon(self) -> int:
        """Сохранение количества товара в значке Корзина"""
        with allure.step('Сохранение количества товара в значке Корзина'):
            count_products = self.find_element(HeaderLocators.LOCATOR_COUNT_OF_PRODUCTS_IN_CART_ICON).text
            return int(count_products)
