import re
import time

import allure
from selenium.webdriver import Keys
from selenium.webdriver.common.by import By

from base_page.base_page import BasePage
from base_page.base_page_locators import BaseOpenLocators
from open_pages.objects_page.fastening_requests.locators_fastening_requests import FasteningRequestsLocators, \
    CreatingRequestForFasteningLocators, ModalNumberOfYourApplicationLocators


@allure.feature('Страница Заявки на крепление')
class FasteningRequestsPage(BasePage):
    """Страница Заявки на крепление"""

    def click_advanced_search(self):
        """Клик по кнопке Расширенный поиск"""
        with allure.step('Клик по кнопке Расширенный поиск'):
            advanced_search = self.find_element(FasteningRequestsLocators.LOCATOR_ADVANCED_SEARCH)
            advanced_search.click()
            time.sleep(0.5)
            open_block_advanced_search = len(self.driver.find_elements(
                *FasteningRequestsLocators.LOCATOR_BLOCK_OPEN_ADVANCED_SEARCH))
            assert open_block_advanced_search == 1, \
                f'Блок расширенного поиска не открылся. len - {open_block_advanced_search}'

    def search_fastening_requests(self, application_number):
        """Поиск заявки на крепление по номеру и в статусе Принята"""
        with allure.step(f'Поиск заявки на крепление {application_number} по номеру и в статусе Принята'):
            with allure.step('Поиск заявки на крепление по номеру, ввод номера'):
                input_search_advanced = self.find_element(FasteningRequestsLocators.LOCATOR_INPUT_NAME_OBJECT)
                input_search_advanced.send_keys(application_number)
                with allure.step('Клик на кнопку Найти'):
                    button_search = self.find_element(FasteningRequestsLocators.LOCATOR_BUTTON_SEARCH)
                    button_search.click()
                    self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT, sec=40)
                    application = self.driver.find_elements(*FasteningRequestsLocators.LOCATOR_LINK_APPLICATION)
                    application_count = len(application)
                    assert application_count == 1, \
                        f'В результате поиска найдено больше одной заявки. len - {application_count}'
                    num_application = application[0].text
                    assert num_application == application_number, \
                        f'В результате поиска найдена не та заявка - ({num_application}). Искомая - ({application_number})'

    def go_to_fastening_requests(self, application_number):
        """Переход в Заявку на крепление"""
        with allure.step(f'Клик на найденную заявку {application_number}'):
            fastening_requests = self.driver.find_element(By.XPATH, f"//div[text()='{application_number}']")
            self.driver.execute_script("arguments[0].click()", fastening_requests)
            self.waiting_for_loader_processing_in_dom(FasteningRequestsLocators.LOCATOR_LOADER_OLD)
            self.waiting_element_is_visibility_on_the_page(CreatingRequestForFasteningLocators.LOCATOR_HEADER_IN_MODAL)

    def button_new_requests(self):
        """Кнопка Создать новую заявку"""
        with allure.step('Кнопка Создать новую заявку'):
            button_new_requests = self.find_element(FasteningRequestsLocators.LOCATOR_BUTTON_CREATE)
            self.driver.execute_script("arguments[0].click()", button_new_requests)
            with allure.step('Ожидание отображения заголовка Создание заявки на крепление'):
                self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT, sec=30)
                self.waiting_element_is_visibility_on_the_page(
                    CreatingRequestForFasteningLocators.LOCATOR_HEADER_CREATING_REQUEST_FOR_FASTENING, sec=5)


@allure.feature('Создание заявки на крепление')
class CreatingRequestForFasteningPage(BasePage):
    """Страница Создание заявки на крепление"""

    def click_edit_button(self):
        """Клик по кнопке Редактировать"""
        with allure.step('Клик по кнопке Редактировать заявку'):
            button_edit = self.find_element(CreatingRequestForFasteningLocators.LOCATOR_BUTTON_EDIT)
            self.scroll_to(button_edit)
            self.expecting_clickability(CreatingRequestForFasteningLocators.LOCATOR_BUTTON_EDIT)
            button_edit.click()
            self.waiting_element_is_visibility_located_dom(CreatingRequestForFasteningLocators.LOCATOR_EDIT_HEADER)

    def click_investor_customer(self):
        """Клик по разделу Инвестор/заказчик"""
        with allure.step('Клик по разделу Инвестор/заказчик в Заявке'):
            investor_customer = self.find_element(CreatingRequestForFasteningLocators.LOCATOR_BUTTON_INVESTOR_CUSTOMER)
            self.driver.execute_script("arguments[0].click()", investor_customer)
            self.waiting_element_is_visibility_located_dom(
                CreatingRequestForFasteningLocators.LOCATOR_INPUT_COMPANY_NAME_OR_INN)

    def type_email_investor(self, email):
        """Ввод email в поле email в разделе Инвестор/Заказчик"""
        with allure.step(f'Ввод email ({email}) в поле email в разделе Инвестор/Заказчик в Заявке'):
            input_email = self.find_element(CreatingRequestForFasteningLocators.LOCATOR_INPUT_EMAIL_INVESTOR)
            self.driver.execute_script("arguments[0].click()", input_email)
            time.sleep(1)
            input_email.send_keys(Keys.CONTROL + "a")
            input_email.send_keys(email)

    def click_send_for_approval(self):
        """Клик по кнопке Отправить на согласование"""
        with allure.step('Клик по кнопке Отправить на согласование Заявку'):
            button_send = self.find_element(CreatingRequestForFasteningLocators.LOCATOR_BUTTON_SEND_FOR_APPROVAL)
            self.driver.execute_script("arguments[0].click()", button_send)
            self.waiting_for_loader_processing_in_dom(CreatingRequestForFasteningLocators.LOCATOR_LOADER_MODAL)

    def click_learn_more(self):
        """Клик по кнопке Подробнее"""
        with allure.step('Клик по кнопке Подробнее в Заявке'):
            self.is_element_present(*CreatingRequestForFasteningLocators.LOCATOR_BUTTON_LEARN_MORE)
            button_learn_more = self.find_element(CreatingRequestForFasteningLocators.LOCATOR_BUTTON_LEARN_MORE)
            self.driver.execute_script("arguments[0].click()", button_learn_more)
            self.waiting_for_loader_processing_in_dom(FasteningRequestsLocators.LOCATOR_LOADER_OLD)

    def email_change_check(self, desired_email):
        """Проверка изменения email"""
        with allure.step('Проверка изменения email в Заявке'):
            email_on_the_page = self.find_element(CreatingRequestForFasteningLocators.LOCATOR_INPUT_EMAIL_INVESTOR)
            email_on_the_page = email_on_the_page.get_attribute('value')
            assert desired_email == email_on_the_page, \
                f'{desired_email} новый сгенерированный email не равен email на странице {email_on_the_page}'

    def input_name_object(self, name_object: str):
        """Ввод названия объекта или номера в поле Объект"""
        with allure.step(f'Ввод название объекта или номера ({name_object}) в поле Объект'):
            input_name_obj = self.find_element(CreatingRequestForFasteningLocators.LOCATOR_INPUT_NAME_OBJECT)
            input_name_obj.send_keys(name_object)
            time.sleep(2)
            with allure.step('Ожидание появления выпадающего списка в поле Объект'):
                self.waiting_for_loader_processing_on_page(
                    CreatingRequestForFasteningLocators.LOCATOR_LOADER_IN_INPUT_OBJECT_NAME, sec=90)
                self.waiting_element_is_visibility_on_the_page(
                    CreatingRequestForFasteningLocators.LOCATOR_ACTIVE_UL_OBJECTS,
                    sec=5)

    def select_first_object_in_object_name_field(self):
        """Выбор первого объекта из выпадающего списка в поле ввода объекта"""
        with allure.step('Выбор первого объекта из выпадающего списка в поле ввода объекта'):
            self.expecting_clickability(CreatingRequestForFasteningLocators.LOCATOR_LI_IN_UL_OBJECT_NAME, sec=3)
            item_first_name_object_in_ul = self.find_element(
                CreatingRequestForFasteningLocators.LOCATOR_LI_IN_UL_OBJECT_NAME)
            name_entered_object = item_first_name_object_in_ul.text
            item_first_name_object_in_ul.click()
            self.check_entered_object_in_input_name_object(name_entered_object)

    def check_entered_object_in_input_name_object(self, expected_name_object: str):
        """Проверка выбранного объекта в поле Название объекта"""
        with allure.step('Проверка выбранного объекта в поле Название объекта'):
            name_object = self.find_element(CreatingRequestForFasteningLocators.LOCATOR_INPUT_NAME_OBJECT
                                            ).get_attribute('value')
            assert name_object in expected_name_object, \
                f'Название ожидаемого объекта - ({expected_name_object}) не соответствует выбранному объекту - ' \
                f'({name_object})'

    def checkbox_enter_name_yourself_must_not_be_selected(self):
        """Чек-бокс Ввести название самостоятельно в поле Объект должен быть не выбран"""
        with allure.step('Чек-бокс Ввести название самостоятельно в поле Объект должен быть не выбран'):
            check_box_enter_name_yourself = self.find_element(
                CreatingRequestForFasteningLocators.LOCATOR_CHECK_BOX_ENTER_NAME_YOURSELF).is_selected()
            assert check_box_enter_name_yourself is False, \
                f'Чек-бокс Ввести название самостоятельно в поле Объект выбран. {check_box_enter_name_yourself}'

    def checking_selected_sales_office(self, expected_sales_office='Все'):
        """Проверка выбранного офиса продаж"""
        with allure.step(f'Проверка выбранного офиса продаж. Ожидаемый - ({expected_sales_office})'):
            self.waiting_element_is_visibility_located_dom(
                CreatingRequestForFasteningLocators.LOCATOR_SELECTED_SALES_OFFICE,
                sec=5)
            entered_sales_office = self.find_element(CreatingRequestForFasteningLocators.LOCATOR_SELECTED_SALES_OFFICE
                                                     ).text
            assert entered_sales_office == expected_sales_office, \
                f'Выбранный офис продаж - ({entered_sales_office}) не соответствует ожидаемому - ({expected_sales_office})'

    def check_object_address_field_is_not_editable(self):
        """Проверка, что поле Адрес объекта нередактируемо"""
        with allure.step('Проверка, что поле Адрес объекта нередактируемо'):
            expected_attribute = 'disabled'
            self.waiting_element_is_visibility_located_dom(
                CreatingRequestForFasteningLocators.LOCATOR_INPUT_ADDRESS_OBJECT,
                sec=3)
            input_address_object = self.find_element(CreatingRequestForFasteningLocators.LOCATOR_INPUT_ADDRESS_OBJECT)
            attribute_input_address_object = self.get_attributes(input_address_object)
            assert expected_attribute in attribute_input_address_object, \
                f'Поле Адрес объекта редактируемо. Все атрибуты инпута - {attribute_input_address_object}'

    def check_object_address_not_empty(self):
        """Проверка, что поле Адрес объекта не пустое"""
        with allure.step('Проверка, что поле Адрес объекта не пустое'):
            self.waiting_element_is_visibility_located_dom(
                CreatingRequestForFasteningLocators.LOCATOR_INPUT_ADDRESS_OBJECT,
                sec=3)
            input_address_object = self.find_element(CreatingRequestForFasteningLocators.LOCATOR_INPUT_ADDRESS_OBJECT
                                                     ).get_attribute('value')
            assert input_address_object != '', \
                f'Поле Адрес объекта пустое. Значение в поле - ({input_address_object})'

    def expand_drop_down_list_engineering_section(self):
        """Раскрытие выпадающего списка Инженерный раздел"""
        with allure.step('Раскрытие выпадающего списка Инженерный раздел'):
            self.waiting_element_is_visibility_on_the_page(
                CreatingRequestForFasteningLocators.LOCATOR_BTN_DROP_UL_ENGINEERING_SECTION, sec=3)
            btn_drop = self.find_element(CreatingRequestForFasteningLocators.LOCATOR_BTN_DROP_UL_ENGINEERING_SECTION)
            btn_drop.click()
            len_active_ul = len(self.driver.find_elements(
                *CreatingRequestForFasteningLocators.LOCATOR_ACTIVE_DROP_UL_ENGINEERING_SECTION))
            assert len_active_ul == 1, \
                f'Выпадающий список Инженерный раздел не отображается на странице. len - ({len_active_ul})'

    def selecting_an_engineering_section(self, engineering_section: str):
        """Выбор инженерного раздела"""
        with allure.step(f'Выбор инженерного раздела {engineering_section}'):
            self.expand_drop_down_list_engineering_section()
            self.expecting_clickability(
                CreatingRequestForFasteningLocators.locator_item_drop_list_by_engineering_section(engineering_section),
                sec=3)
            item_engineering_section = self.find_element(
                CreatingRequestForFasteningLocators.locator_item_drop_list_by_engineering_section(engineering_section))
            item_engineering_section.click()
            selected_engineering_section = self.save_selected_engineering_section()
            assert selected_engineering_section == engineering_section, \
                f'Выбранный инженерный раздел - ({selected_engineering_section}) не соответствует ожидаемому - ' \
                f'({engineering_section})'

    def save_selected_engineering_section(self) -> str:
        """Сохранение выбранного инженерного раздела"""
        with allure.step('Сохранение выбранного инженерного раздела'):
            selected_engineering_section = self.find_element(
                CreatingRequestForFasteningLocators.LOCATOR_SELECTED_ENGINEER_SECTION).text
            return selected_engineering_section

    def expand_drop_down_list_access_to_object_manager(self):
        """Раскрытие выпадающего списка Доступ менеджеру объекта"""
        with allure.step('Раскрытие выпадающего списка Доступ менеджеру объекта'):
            self.waiting_element_is_visibility_on_the_page(
                CreatingRequestForFasteningLocators.LOCATOR_BTN_DROP_UL_ACCESS_TO_OBJECT_MANAGER, sec=3)
            btn_drop_list_access_to_object_manager = self.find_element(
                CreatingRequestForFasteningLocators.LOCATOR_BTN_DROP_UL_ACCESS_TO_OBJECT_MANAGER)
            btn_drop_list_access_to_object_manager.click()
            len_active_ul = len(self.driver.find_elements(
                *CreatingRequestForFasteningLocators.LOCATOR_ACTIVE_DROP_UL_ACCESS_TO_OBJECT_MANAGER))
            assert len_active_ul == 1, \
                f'Выпадающий список Доступ менеджеру объекта не отображается на странице. len - ({len_active_ul})'

    def checking_contents_of_drop_down_list_access_to_object_manager(self):
        """Проверка наполнения выпадающего списка Доступ менеджеру объекта"""
        with allure.step('Проверка наполнения выпадающего списка Доступ менеджеру объекта'):
            expected_item_list = ['Не указано', 'Есть', 'Нет']  # Ожидаемые значения в выпадающем списке
            res_list_error_item = []  # Список со значениями, которые не соответствуют ожидаемым

            self.waiting_element_is_visibility_on_the_page(
                CreatingRequestForFasteningLocators.LOCATOR_ITEM_IN_DROP_UL_ACCESS_TO_OBJECT_MANAGER, sec=3)
            item_list_on_page = self.driver.find_elements(
                *CreatingRequestForFasteningLocators.LOCATOR_ITEM_IN_DROP_UL_ACCESS_TO_OBJECT_MANAGER)
            assert len(item_list_on_page) != 0, \
                f'В выпадающем списке Доступ менеджеру объекта не найдено ни одного элемента'

            item_list_on_page = [el.text for el in item_list_on_page]
            for el in item_list_on_page:
                if el not in expected_item_list:
                    res_list_error_item.append(el)

            assert len(res_list_error_item) == 0, \
                f'Ожидаемый список - ({expected_item_list}) элементов в выпадающем списке Доступ менеджеру объекта ' \
                f'не соответствует списку на странице - ({item_list_on_page}). Значения на странице, ' \
                f'которые не соответствуют - ({res_list_error_item})'

    def select_value_from_drop_down_list_access_to_object_manager(self, value: str):
        """Выбор значения в выпадающем списке Доступ менеджеру объекта"""
        with allure.step('Выбор значения в выпадающем списке Доступ менеджеру объекта'):
            self.waiting_element_is_visibility_on_the_page(
                CreatingRequestForFasteningLocators.locator_item_in_drop_list_access_to_object_manager(value), sec=3)
            item_in_drop_list = self.find_element(
                CreatingRequestForFasteningLocators.locator_item_in_drop_list_access_to_object_manager(value))
            item_in_drop_list.click()
            selected_item_in_drop_list = self.save_selected_access_to_object_manager()
            assert selected_item_in_drop_list == value, \
                f'Выбранный доступ менеджеру объекта - ({selected_item_in_drop_list}) не соответствует ожидаемому - ({value})'

    def save_selected_access_to_object_manager(self) -> str:
        """Сохранения выбранного элемента в выпадающем списке Доступ менеджеру объекта"""
        with allure.step('Сохранения выбранного элемента в выпадающем списке Доступ менеджеру объекта'):
            selected_item_in_drop_list = self.find_element(
                CreatingRequestForFasteningLocators.LOCATOR_SELECTED_ACCESS_TO_OBJECT_MANAGER).text
            return selected_item_in_drop_list

    def attaching_specification(self, path_to_file: str):
        """Прикрепление спецификации
        path_to_file - путь к файлу для прикрепления
        """
        with allure.step('Прикрепление спецификации'):
            with allure.step(
                    f'Сохраняем название файла для загрузки в спецификацию из пути к файлу - ({path_to_file})'):
                expected_name_file = path_to_file.split('\\')[-1]
            self.waiting_element_is_visibility_located_dom(
                CreatingRequestForFasteningLocators.LOCATOR_INPUT_SPECIFICATION,
                sec=3)
            input_specification = self.find_element(CreatingRequestForFasteningLocators.LOCATOR_INPUT_SPECIFICATION)
            input_specification.send_keys(path_to_file)
            load_file = \
                self.find_element(CreatingRequestForFasteningLocators.LOCATOR_INPUT_WITH_LOADED_SPECIFICATION_FILES
                                  ).get_attribute('value').split('\\')[-1]  # Название подгруженного файла на странице
            assert expected_name_file == load_file, \
                f'В разделе Спецификация не отображается название подгружаемого файла - ({expected_name_file}). ' \
                f'Отображается название - ({load_file})'

    def market_dropdown_list_expansion(self):
        """Раскрытие выпадающего списка рынок"""
        with allure.step('Раскрытие выпадающего списка рынок'):
            self.expecting_clickability(CreatingRequestForFasteningLocators.LOCATOR_BTN_DROP_UL_MARKET, sec=5)
            btn_drop_ul_market = self.find_element(CreatingRequestForFasteningLocators.LOCATOR_BTN_DROP_UL_MARKET)
            btn_drop_ul_market.click()
            with allure.step('Ожидание отображения выпадающего списка Рынок'):
                self.waiting_element_is_visibility_on_the_page(
                    CreatingRequestForFasteningLocators.LOCATOR_DROP_UL_MARKET,
                    sec=5)

    def check_values_in_market_drop_down_list(self):
        """Проверка значений для выбора в выпадающем списке Рынок"""
        with allure.step('Проверка значений для выбора в выпадающем списке Рынок'):
            expected_value = ['Индустрия', 'Новое строительство', 'Реконструкция']
            self.market_dropdown_list_expansion()
            values_market_drop = self.find_elements(
                CreatingRequestForFasteningLocators.LOCATOR_ITEM_VALUE_IN_DROP_UL_MARKET)
            values_market_drop = [el.text for el in values_market_drop]
            for el in expected_value:
                assert el in values_market_drop, \
                    f'Ожидаемого значения - ({el}) нет в выпадающем списке Рынок. Все ожидаемые значения - ' \
                    f'({expected_value}). Все значения в выпадающем списке Рынок на странице - ({values_market_drop})'
            btn_close_ul = self.find_element(CreatingRequestForFasteningLocators.LOCATOR_BTN_DROP_UL_MARKET)
            btn_close_ul.click()

    def check_selected_market(self, expected_market='Реконструкция'):
        """Проверка выбранного рынка"""
        with allure.step(f'Проверка выбранного рынка. Ожидаемый - ({expected_market})'):
            self.waiting_element_is_visibility_located_dom(CreatingRequestForFasteningLocators.LOCATOR_SELECTED_MARKET,
                                                           sec=5)
            entered_market = self.find_element(CreatingRequestForFasteningLocators.LOCATOR_SELECTED_MARKET
                                               ).text
            assert expected_market == entered_market, \
                f'Выбранный рынок - ({entered_market}) не соответствует ожидаемому - ({expected_market})'

    def click_investor_customer_section_btn(self):
        """Клик по кнопке Инвестор/Заказчик"""
        with allure.step('Клик по кнопке Инвестор/Заказчик'):
            scroll_to_elem = self.find_element(
                CreatingRequestForFasteningLocators.LOCATOR_ADDITIONAL_DISTRIBUTOR_DETAILS_BTN)
            self.scroll_to(scroll_to_elem)

            self.expecting_clickability(CreatingRequestForFasteningLocators.LOCATOR_INVESTOR_CUSTOMER_SECTION_BTN,
                                        sec=3)
            btn_investor_customer_section = self.find_element(
                CreatingRequestForFasteningLocators.LOCATOR_INVESTOR_CUSTOMER_SECTION_BTN)
            btn_investor_customer_section.click()

            time.sleep(0.5)
            open_section_investor_customer = len(self.driver.find_elements(
                *CreatingRequestForFasteningLocators.LOCATOR_INVESTOR_CUSTOMER_SECTION_OPEN))
            assert open_section_investor_customer == 1, \
                f'Раздел Инвестор/Заказчик не раскрыт. len - {open_section_investor_customer}'

    def enter_name_or_inn_in_investor_customer_section(self, inn_or_name_company: str):
        """Ввод названия или ИНН компании в разделе Инвестор/Заказчик"""
        with allure.step(f'Ввод названия или ИНН компании {inn_or_name_company} в разделе Инвестор/Заказчик'):
            input_inn_or_name_company = self.find_element(
                CreatingRequestForFasteningLocators.LOCATOR_INPUT_NAME_COMPANY_OR_INN_IN_SECTION_INVESTOR_CUSTOMER)
            input_inn_or_name_company.send_keys(inn_or_name_company)
            self.waiting_element_is_visibility_on_the_page(
                CreatingRequestForFasteningLocators.LOCATOR_ITEM_IN_DROP_LIST_NAME_OR_INN_COMPANY_SECTION_INVESTOR_CUSTOMER,
                sec=3)
            item_drop_list = self.find_element(
                CreatingRequestForFasteningLocators.LOCATOR_ITEM_IN_DROP_LIST_NAME_OR_INN_COMPANY_SECTION_INVESTOR_CUSTOMER)
            item_drop_list.click()
            self.check_selected_inn_company_in_investor_customer_section(inn_or_name_company)

    def check_selected_inn_company_in_investor_customer_section(self, expected_inn: str):
        """Проверка ИНН выбранной компании в разделе Инвестор/Заказчик"""
        with allure.step('Проверка ИНН выбранной компании в разделе Инвестор/Заказчик'):
            selected_company = self.find_element(
                CreatingRequestForFasteningLocators.LOCATOR_INPUT_NAME_COMPANY_OR_INN_IN_SECTION_INVESTOR_CUSTOMER
            ).get_attribute('value').split(' ')[0]

            assert expected_inn == selected_company, \
                f'ИНН выбранной компании - ({selected_company}) в разделе Инвестор/Заказчик не соответствует ' \
                f'ожидаемому ИНН - ({expected_inn})'

    def enter_contact_person_in_section_investor_customer(self, name_person: str):
        """Ввод имени контактного лица в разделе Инвестор/Заказчик"""
        with allure.step(f'Ввод имени контактного лица {name_person} в разделе Инвестор/Заказчик'):
            input_contact_person = self.find_element(
                CreatingRequestForFasteningLocators.INPUT_CONTACT_PERSON_INVESTOR_CUSTOMER)
            input_contact_person.send_keys(name_person)

            entering_contact_person = input_contact_person.get_attribute('value')

            assert entering_contact_person == name_person, \
                f'Контактное лицо в поле ввода Контактное лицо - ({entering_contact_person}) не соответствует тому, ' \
                f'которое вводили - ({name_person}) в разделе Инвестор/Заказчик'

    def enter_mail_address_in_section_investor_customer(self, mail_address: str):
        """Ввод мэйла в поле Email в разделе Инвестор/Заказчик"""
        with allure.step(f'Ввод мэйла {mail_address} в поле Email в разделе Инвестор/Заказчик'):
            input_mail = self.find_element(CreatingRequestForFasteningLocators.INPUT_MAIL_ADDRESS_INVESTOR_CUSTOMER)
            input_mail.send_keys(mail_address)

            entering_mail = input_mail.get_attribute('value')
            assert entering_mail == mail_address, \
                f'Мэйл адрес в поле ввода Email - ({entering_mail}) не соответствует тому, который вводили - ' \
                f'({mail_address}) в разделе Инвестор/Заказчик'

    def enter_phone_in_section_investor_customer(self, phone_number: str):
        """Ввод номера телефона в поле Телефон в разделе Инвестор/Заказчик"""
        with allure.step(f'Ввод номера телефона {phone_number} в поле Телефон в разделе Инвестор/Заказчик'):
            phone_number = re.sub(r'[()\-+\s7]', '', phone_number)  # Удаляем символы пробелов, '+', '(', ')', '-'
            print(phone_number)
            input_mail = self.find_element(CreatingRequestForFasteningLocators.INPUT_PHONE_INVESTOR_CUSTOMER)
            input_mail.send_keys(phone_number)

            entering_mail = input_mail.get_attribute('value')
            entering_mail = re.sub(r'[()\-+\s7]', '', entering_mail)  # Удаляем символы пробелов, '+', '(', ')', '-'
            assert entering_mail == phone_number, \
                f'Номер телефона в поле ввода Телефон - ({entering_mail}) не соответствует тому, ' \
                f'который вводили - ({phone_number}) в разделе Инвестор/Заказчик'

    def open_section_general_contractor(self):
        """Раскрытие раздела Генеральный подрядчик"""
        with allure.step('Раскрытие раздела Генеральный подрядчик'):
            self.expecting_clickability(CreatingRequestForFasteningLocators.LOCATOR_GENERAL_CONTRACTOR_BTN, sec=3)
            btn_section_general_contractor = self.find_element(
                CreatingRequestForFasteningLocators.LOCATOR_GENERAL_CONTRACTOR_BTN)
            btn_section_general_contractor.click()
            time.sleep(0.5)
            open_section_general_contractor = len(self.driver.find_elements(
                *CreatingRequestForFasteningLocators.LOCATOR_GENERAL_CONTRACTOR_OPEN))

            assert open_section_general_contractor == 1, \
                f'Раздел Генеральный подрядчик не раскрыт. len - {open_section_general_contractor}'

    def enter_name_or_inn_in_general_contractor_section(self, inn_or_name_company: str):
        """Ввод названия или ИНН компании в разделе Генеральный подрядчик"""
        with allure.step(f'Ввод названия или ИНН компании {inn_or_name_company} в разделе Генеральный подрядчик'):
            input_inn_or_name_company = self.find_element(
                CreatingRequestForFasteningLocators.LOCATOR_INPUT_NAME_COMPANY_OR_INN_IN_SECTION_GENERAL_CONTRACTOR)
            input_inn_or_name_company.send_keys(inn_or_name_company)
            self.waiting_element_is_visibility_on_the_page(
                CreatingRequestForFasteningLocators.LOCATOR_ITEM_IN_DROP_LIST_NAME_OR_INN_COMPANY_SECTION_GENERAL_CONTRACTOR,
                sec=3)
            item_drop_list = self.find_element(
                CreatingRequestForFasteningLocators.LOCATOR_ITEM_IN_DROP_LIST_NAME_OR_INN_COMPANY_SECTION_GENERAL_CONTRACTOR)
            item_drop_list.click()
            self.check_selected_inn_company_in_general_contractor_section(inn_or_name_company)

    def check_selected_inn_company_in_general_contractor_section(self, expected_inn: str):
        """Проверка ИНН выбранной компании в разделе Генеральный подрядчик"""
        with allure.step('Проверка ИНН выбранной компании в разделе Генеральный подрядчик'):
            selected_company = self.find_element(
                CreatingRequestForFasteningLocators.LOCATOR_INPUT_NAME_COMPANY_OR_INN_IN_SECTION_GENERAL_CONTRACTOR
            ).get_attribute('value').split(' ')[0]

            assert expected_inn == selected_company, \
                f'ИНН выбранной компании - ({selected_company}) в разделе Генеральный подрядчик не соответствует ' \
                f'ожидаемому ИНН - ({expected_inn})'

    def enter_contact_person_in_section_general_contractor(self, name_person: str):
        """Ввод имени контактного лица в разделе Генеральный подрядчик"""
        with allure.step(f'Ввод имени контактного лица {name_person} в разделе Генеральный подрядчик'):
            input_contact_person = self.find_element(
                CreatingRequestForFasteningLocators.INPUT_CONTACT_PERSON_SECTION_GENERAL_CONTRACTOR)
            input_contact_person.send_keys(name_person)

            entering_contact_person = input_contact_person.get_attribute('value')
            assert entering_contact_person == name_person, \
                f'Контактное лицо в поле ввода Контактное лицо - ({entering_contact_person}) не соответствует тому, ' \
                f'которое вводили - ({name_person}) в разделе Генеральный подрядчик'

    def enter_mail_address_in_section_general_contractor(self, mail_address: str):
        """Ввод мэйла в поле Email в разделе Генеральный подрядчик"""
        with allure.step(f'Ввод мэйла {mail_address} в поле Email в разделе Генеральный подрядчик'):
            input_mail = self.find_element(CreatingRequestForFasteningLocators.INPUT_MAIL_ADDRESS_GENERAL_CONTRACTOR)
            input_mail.send_keys(mail_address)

            entering_mail = input_mail.get_attribute('value')
            assert entering_mail == mail_address, \
                f'Мэйл адрес в поле ввода Email - ({entering_mail}) не соответствует тому, который вводили - ' \
                f'({mail_address}) в разделе Генеральный подрядчик'

    def enter_phone_in_section_general_contractor(self, phone_number: str):
        """Ввод номера телефона в поле Телефон в разделе Генеральный подрядчик"""
        with allure.step(f'Ввод номера телефона {phone_number} в поле Телефон в разделе Генеральный подрядчик'):
            phone_number = re.sub(r'[()\-+\s7]', '', phone_number)  # Удаляем символы пробелов, '+', '(', ')', '-'

            input_mail = self.find_element(CreatingRequestForFasteningLocators.INPUT_PHONE_GENERAL_CONTRACTOR)
            input_mail.send_keys(phone_number)

            entering_mail = input_mail.get_attribute('value')
            entering_mail = re.sub(r'[()\-+\s7]', '', entering_mail)  # Удаляем символы пробелов, '+', '(', ')', '-'
            assert entering_mail == phone_number, \
                f'Номер телефона в поле ввода Телефон - ({entering_mail}) не соответствует тому, ' \
                f'который вводили - ({phone_number}) в разделе Генеральный подрядчик'

    def activate_toggle_switch_is_buyer_general_contractor(self):
        """Активация тумблера Является закупщиком в разделе Генеральный подрядчик"""
        with allure.step('Активация тумблера Является закупщиком в разделе Генеральный подрядчик'):
            self.expecting_clickability(
                CreatingRequestForFasteningLocators.LOCATOR_TOGGLE_SWITCH_IS_BUYER_GENERAL_CONTRACTOR, sec=3)
            toggle_switch = self.find_element(
                CreatingRequestForFasteningLocators.LOCATOR_TOGGLE_SWITCH_IS_BUYER_GENERAL_CONTRACTOR)
            toggle_switch.click()
            is_selected = toggle_switch.is_selected()
            assert is_selected is True, \
                f'Тумблер Является закупщиком в разделе Генеральный подрядчик не выбран. is_selected - {is_selected}'

    def click_btn_send(self):
        """Клик по кнопке Отправить"""
        with allure.step('Клик по кнопке Отправить'):
            btn_send = self.find_element(CreatingRequestForFasteningLocators.LOCATOR_BTN_SEND)
            self.scroll_to_elem_perform(btn_send)
            self.expecting_clickability(CreatingRequestForFasteningLocators.LOCATOR_BTN_SEND, sec=5)
            btn_send.click()
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT, sec=60)
            header = len(self.driver.find_elements(*ModalNumberOfYourApplicationLocators.LOCATOR_HEADER))
            assert header == 1, \
                f'Не отображается модалка с номером созданной заявки. len - {header}'


class ModalNumberOfYourApplication(BasePage):
    """Модалка Номер вашей Заявки"""

    def save_num_application(self) -> str:
        """Сохранение номера заявки"""
        with allure.step('Сохранение номера заявки'):
            num_application = self.find_element(ModalNumberOfYourApplicationLocators.LOCATOR_HEADER).text.split(' ')[-1]
            return num_application

    def click_btn_return_to_application_list(self):
        """Клик по кнопке Вернуться в список заявок"""
        with allure.step('Клик по кнопке Вернуться в список заявок'):
            self.expecting_clickability(ModalNumberOfYourApplicationLocators.LOCATOR_BTN_RETURN_TO_APPLICATION_LIST,
                                        sec=3)
            btn_return_to_application_list = self.find_element(
                ModalNumberOfYourApplicationLocators.LOCATOR_BTN_RETURN_TO_APPLICATION_LIST)
            btn_return_to_application_list.click()
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT, sec=60)
            header_fastening_request = len(self.driver.find_elements(*FasteningRequestsLocators.LOCATOR_H1_HEADER))
            assert header_fastening_request == 1, \
                f'Страница Заявки на крепление не открылась. Не найден заголовок Заявки на крепление. ' \
                f'len - {header_fastening_request}'
