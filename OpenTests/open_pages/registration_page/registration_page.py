import re

import allure

from base_page.base_page import BasePage
from open_pages.community_ridan.community_ridan_locators import CommunityRidan
from open_pages.main_page.main_page_locators import MainPageLocators
from open_pages.registration_page.registration_page_locators import RegistrationPageLocators
from faker import Faker


@allure.feature('Страница Регистрация')
class RegistrationPage(BasePage):
    """Страница Регистрация"""

    def should_be_header_personal_data(self):
        """Должен быть заголовок Личные данные"""
        with allure.step('Должен быть заголовок Личные данные'):
            self.waiting_element_is_visibility_on_the_page(RegistrationPageLocators.LOCATOR_HEADER_PERSONAL_DATA)

    def entering_user_name(self):
        """Ввод имени пользователя"""
        with allure.step('Ввод имени пользователя'):
            fake = Faker('ru_RU')
            user_name = fake.first_name()

            self.waiting_element_is_visibility_on_the_page(RegistrationPageLocators.LOCATOR_INPUT_USER_NAME, sec=5)
            input_user_name = self.find_element(RegistrationPageLocators.LOCATOR_INPUT_USER_NAME)
            input_user_name.send_keys(user_name)
            entering_user_name = input_user_name.get_attribute('value')
            assert entering_user_name == user_name, \
                f'Имя пользователя на странице - ({entering_user_name}) не соответствует ожидаемому - ({user_name})'

    def entering_surname(self):
        """Ввод фамилии"""
        with allure.step('Ввод фамилии'):
            fake = Faker('ru_RU')
            surname = fake.last_name()

            self.waiting_element_is_visibility_on_the_page(RegistrationPageLocators.LOCATOR_INPUT_SURNAME, sec=5)
            input_user_surname = self.find_element(RegistrationPageLocators.LOCATOR_INPUT_SURNAME)
            input_user_surname.send_keys(surname)
            entering_user_surname = input_user_surname.get_attribute('value')
            assert entering_user_surname == surname, \
                f'Фамилия пользователя на странице - ({entering_user_surname}) не соответствует ожидаемому - ({surname})'

    def entering_user_patronymic(self):
        """Ввод Отчества"""
        with allure.step('Ввод Отчества'):
            fake = Faker('ru_RU')
            patronymic = fake.name().split(' ')[2]

            self.waiting_element_is_visibility_on_the_page(RegistrationPageLocators.LOCATOR_INPUT_PATRONYMIC, sec=5)
            input_user_patronymic = self.find_element(RegistrationPageLocators.LOCATOR_INPUT_PATRONYMIC)
            input_user_patronymic.send_keys(patronymic)
            entering_user_patronymic = input_user_patronymic.get_attribute('value')
            assert entering_user_patronymic == patronymic, \
                f'Отчество пользователя на странице - ({entering_user_patronymic}) не соответствует ожидаемому ' \
                f'- ({patronymic})'

    def entering_date_of_birth(self, date_of_birth: str):
        """Ввод даты рождения"""
        with allure.step('Ввод даты рождения'):
            self.waiting_element_is_visibility_on_the_page(RegistrationPageLocators.LOCATOR_DATE_OF_BIRTH, sec=5)
            input_user_date_of_birth = self.find_element(RegistrationPageLocators.LOCATOR_DATE_OF_BIRTH)
            input_user_date_of_birth.send_keys(date_of_birth)

    def click_on_next_button_in_first_registration_step(self):
        """Клик по кнопке Далее в первом шаге регистрации"""
        with allure.step('Клик по кнопке Далее в первом шаге регистрации'):
            self.expecting_clickability(RegistrationPageLocators.LOCATOR_BUTTON_NEXT, sec=5)
            btn_next = self.find_element(RegistrationPageLocators.LOCATOR_BUTTON_NEXT)
            self.expecting_clickability(RegistrationPageLocators.LOCATOR_BUTTON_NEXT)
            self.click_js(btn_next)
            self.waiting_element_is_visibility_on_the_page(RegistrationPageLocators.LOCATOR_HEADER_HOW_DO_YOU_WORK,
                                                           sec=10)

    def region_selection(self, region: str):
        """Выбор первого региона в списке"""
        with allure.step('Выбор первого региона в списке'):
            drop_ul_region = self.find_element(RegistrationPageLocators.LOCATOR_SELECTED_REGION)
            drop_ul_region.click()
            self.expecting_clickability(RegistrationPageLocators.locator_li_item(region), sec=5)
            li_item = self.find_element(RegistrationPageLocators.locator_li_item(region))
            li_item.click()

            selected_region = self.find_element(RegistrationPageLocators.LOCATOR_SELECTED_REGION).text

            assert selected_region == region, \
                f'Выбранное значение региона ({selected_region}) не соответствует ожидаемому значению - ' \
                f'({region}'

    def choosing_type_of_work(self, type_of_work: str):
        """Выбор типа работы"""
        with allure.step('Выбор типа работы'):
            with allure.step('Раскрытие выпадающего списка'):
                drop_ul_type_of_work = self.find_element(RegistrationPageLocators.LOCATOR_SELECTED_OF_TYPE_WORK)
                drop_ul_type_of_work.click()
                self.waiting_element_is_visibility_on_the_page(RegistrationPageLocators.locator_li_item(type_of_work))
            with allure.step('Выбор элемента в выпадающем списке'):
                li_item = self.find_element(RegistrationPageLocators.locator_li_item(type_of_work))
                li_item.click()
                select_type_of_work = self.find_element(RegistrationPageLocators.LOCATOR_SELECTED_OF_TYPE_WORK).text

            assert select_type_of_work == type_of_work, \
                f'Выбранное значение Типа работы ({select_type_of_work}) не соответствует ожидаемому значению - ' \
                f'({type_of_work}'

            text_step = self.find_element(RegistrationPageLocators.LOCATOR_TEXT_STEP).text
            assert type_of_work in text_step, \
                f'Выбранный тип работы - ({type_of_work}) отсутствует в описании к шагу - ({text_step})'

    def checking_access_in_designer_work_type(self):
        """Проверка доступов в типе работы проектировщик"""
        with allure.step('Проверка доступов в типе работы проектировщик'):
            expected_access = ['Документация', 'Инструменты', 'Электронный магазин', 'Программа лояльности']
            access_on_page = self.find_elements(RegistrationPageLocators.LOCATOR_NAME_OF_ACCESS_BY_TYPE_OF_WORK)
            access_on_page = [access.text for access in access_on_page]
            assert access_on_page == expected_access, \
                f'Доступы у типа работ Проектировщик на странице - ({access_on_page}) не соответствуют ожидаемым ' \
                f'- ({expected_access})'

    def checking_access_in_distributor_work_type(self):
        """Проверка доступов в типе работы Дистрибьютор"""
        with allure.step('Проверка доступов в типе работы Дистрибьютор'):
            expected_access = ['Электронная коммерция', 'Объекты', 'Инструменты', 'Электронный магазин', 'Документация']
            access_on_page = self.find_elements(RegistrationPageLocators.LOCATOR_NAME_OF_ACCESS_BY_TYPE_OF_WORK)
            access_on_page = [access.text for access in access_on_page]
            assert access_on_page == expected_access, \
                f'Доступы у типа работ Дистрибьютор на странице - ({access_on_page}) не соответствуют ожидаемым ' \
                f'- ({expected_access})'

    def click_on_next_button_in_second_registration_step(self):
        """Клик по кнопке Далее во втором шаге регистрации"""
        with allure.step('Клик по кнопке Далее во втором шаге регистрации'):
            self.waiting_element_is_visibility_on_the_page(RegistrationPageLocators.LOCATOR_BUTTON_NEXT)
            btn_next = self.find_element(RegistrationPageLocators.LOCATOR_BUTTON_NEXT)
            self.expecting_clickability(RegistrationPageLocators.LOCATOR_BUTTON_NEXT, sec=5)
            self.click_js(btn_next)
            self.waiting_element_is_visibility_on_the_page(RegistrationPageLocators.LOCATOR_HEADER_REGISTRATION_DATA)

    def entering_email_address(self, email_address: str):
        """Ввод электронного адреса"""
        with allure.step('Ввод электронного адреса'):
            input_mail = self.find_element(RegistrationPageLocators.LOCATOR_INPUT_MAIL_ADDRESS)
            input_mail.send_keys(email_address)
            introduced_mail = input_mail.get_attribute('value')
            assert introduced_mail == email_address, \
                f'Введенный адрес - ({introduced_mail}) не соответствует ожидаемому - ({email_address})'

    def entering_phone_num(self, num_phone):
        """Ввод телефона"""
        with allure.step('Ввод телефона'):
            num_phone = num_phone.replace(' ', '')
            num_phone = re.sub(r'[\s()-]', '', num_phone)
            if len(num_phone) > 10:
                num_phone = num_phone[1:10]

            input_num_phone = self.find_element(RegistrationPageLocators.LOCATOR_INPUT_PHONE_NUM)
            input_num_phone.send_keys(num_phone)
            introduced_num_phone = input_num_phone.get_attribute('value')
            introduced_num_phone = re.sub(r'[\s()-]', '', introduced_num_phone)
            assert introduced_num_phone == num_phone, \
                f'Введенный номер телефона - ({introduced_num_phone}) не соответствует ожидаемому - ({num_phone})'

    def entering_password(self, password='123456789'):
        """Ввод пароля"""
        with allure.step('Ввод пароля'):
            input_password = self.find_element(RegistrationPageLocators.LOCATOR_INPUT_PASSWORD)
            input_password.send_keys(password)

    def entering_repeat_password(self, password='123456789'):
        """Ввод повторного пароля"""
        with allure.step('Ввод повторного пароля'):
            input_repeat_password = self.find_element(RegistrationPageLocators.LOCATOR_REPEAT_PASSWORD)
            input_repeat_password.send_keys(password)

    def confirmation_of_consent(self):
        """Подтверждение согласия"""
        with allure.step('Подтверждение согласия'):
            self.expecting_clickability(RegistrationPageLocators.LOCATOR_CHECKBOX_CONFIRMATION_OF_CONSENT)
            check_box = self.find_element(RegistrationPageLocators.LOCATOR_CHECKBOX_CONFIRMATION_OF_CONSENT)
            self.click_js(check_box)
            selected_check_box = check_box.get_attribute('value')
            assert selected_check_box == 'on', f'Чек-бокс подтверждения согласия не выбран. Значение - {selected_check_box}'

    def entering_answer_captcha(self, answer: str):
        """Ввод ответа по капче"""
        with allure.step(f'Ввод ответа {answer} по капче'):
            input_captcha = self.find_element(RegistrationPageLocators.LOCATOR_INPUT_ANSWER_CAPTCHA)
            input_captcha.send_keys(answer)
            entered_answer = input_captcha.get_attribute('value')
            assert entered_answer == answer, \
                f'Введенный ответ капчи - ({entered_answer}) не соответствует ожидаемому - ({answer})'

    def click_button_register(self):
        """Клик по кнопке Зарегистрироваться"""
        with allure.step('Клик по кнопке Зарегистрироваться'):
            # Ожидаемый текст в модалке успешной регистрации
            expected_text_in_modal = 'Ваша учетная запись успешно создана!'

            btn_register = self.find_element(RegistrationPageLocators.LOCATOR_BUTTON_REGISTER)
            self.expecting_clickability(RegistrationPageLocators.LOCATOR_BUTTON_REGISTER)
            self.click_js(btn_register)
            self.waiting_element_is_visibility_on_the_page(
                RegistrationPageLocators.LOCATOR_MODAL_SUCCESSFUL_REGISTRATION)
            text_in_modal = self.find_element(
                RegistrationPageLocators.LOCATOR_HEADER_IN_MODAL_SUCCESSFUL_REGISTRATION).text
            assert text_in_modal == expected_text_in_modal, \
                f'Заголовок в модалке успешной регистрации - ({text_in_modal}) не соответствует ожидаемому - ' \
                f'({expected_text_in_modal})'

    def choice_checkbox_i_am_an_employee_of_a_legal_entity(self):
        """Выбор чек-бокса Я являюсь сотрудником юридического лица (организации)"""
        with allure.step('Выбор чек-бокса Я являюсь сотрудником юридического лица (организации)'):
            check_box = self.find_element(RegistrationPageLocators.LOCATOR_CHECKBOX_I_AM_AN_EMPLOYEE_OF_A_LEGAL_ENTITY)
            self.expecting_clickability(RegistrationPageLocators.LOCATOR_CHECKBOX_I_AM_AN_EMPLOYEE_OF_A_LEGAL_ENTITY)
            self.click_js(check_box)
            selected_check_box = check_box.get_attribute('value')
            assert selected_check_box == 'on', \
                f'Чек-бокс  "Я являюсь сотрудником юридического лица (организации)" не выбран. Значение- ' \
                f'({selected_check_box})'

    def entering_inn_of_organization(self, inn: str):
        """Ввод ИНН организации"""
        with allure.step(f'Ввод ИНН {inn} организации'):
            self.waiting_element_is_visibility_on_the_page(RegistrationPageLocators.LOCATOR_NAME_AND_INN_OF_ORGANIZATION)
            input_inn = self.find_element(RegistrationPageLocators.LOCATOR_NAME_AND_INN_OF_ORGANIZATION)
            input_inn.send_keys(inn)
            entered_inn = input_inn.get_attribute('value')
            assert entered_inn == inn, \
                f'Введенный ИНН - ({entered_inn}) не соответствует ожидаемому - ({inn})'
            self.waiting_element_is_visibility_on_the_page(RegistrationPageLocators.locator_item_result_organization(inn))
            organization = self.find_element(RegistrationPageLocators.locator_item_result_organization(inn))
            self.click_js(organization)
            selected_organization = input_inn.get_attribute('value')
            assert inn in selected_organization, \
                f'Ожидаемый номер ИНН не найден в строке выбранной организации - ({selected_organization})'

    def click_btn_stay_in_open(self):
        """Клик по кнопке Остаться в Опен"""
        with allure.step('Клик по кнопке Остаться в Опен'):
            self.expecting_clickability(RegistrationPageLocators.LOCATOR_BTN_STAY_IN_OPEN)
            btn_stay_in_open = self.find_element(RegistrationPageLocators.LOCATOR_BTN_STAY_IN_OPEN)
            btn_stay_in_open.click()
            self.waiting_element_is_visibility_on_the_page(MainPageLocators.LOCATOR_SLIDER_CONTAINER)

    def click_btn_go_to_community(self):
        """Клик по кнопке Перейти в комьюнити"""
        with allure.step('Клик по кнопке Перейти в комьюнити'):
            self.expecting_clickability(RegistrationPageLocators.LOCATOR_BTN_GO_TO_COMMUNITY)
            btn_stay_in_open = self.find_element(RegistrationPageLocators.LOCATOR_BTN_GO_TO_COMMUNITY)
            btn_stay_in_open.click()
            self.waiting_element_is_visibility_on_the_page(CommunityRidan.LOCATOR_HEADER)

    def company_name_from_tin_field_must_match_name_in_company_field(self):
        """Название компании из поля ИНН должно соответствовать названию в поле компания"""
        with allure.step('Название компании из поля ИНН должно соответствовать названию в поле компания'):
            self.waiting_element_is_visibility_on_the_page(RegistrationPageLocators.LOCATOR_NAME_AND_INN_OF_ORGANIZATION)
            input_inn = self.find_element(RegistrationPageLocators.LOCATOR_NAME_AND_INN_OF_ORGANIZATION
                                          ).get_attribute('value')
            expected_name_company = input_inn.split('- ')[1]
            input_company = self.find_element(RegistrationPageLocators.LOCATOR_INPUT_COMPANY).get_attribute('value')
            assert input_company == expected_name_company, \
                f'Название компании - ({expected_name_company}) в поле "Название или ИНН организации" не совпадает с' \
                f' названием компании в поле "Компания" - ({input_company})'
