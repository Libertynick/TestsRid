import time

import allure
from selenium.webdriver.support.select import Select

from base_page.base_page import BasePage
from base_page.base_page_locators import BaseOpenLocators
from open_pages.calculations_of_ol_and_pto_page.calculations_of_ol_and_pto_locators import \
    CalculationsOfOlAndPtoLocators
from open_pages.pto_configurator_page.locators_configurator import TwoStageMixedGws2Locators, \
    VerificationCalculationGws2Locators, ModalSaveCalculationLocators


@allure.feature('Страница Двухступенчатая смешанная схема ГВС2')
class TwoStageMixedGws2(BasePage):
    """Страница Двухступенчатая смешанная схема ГВС2"""

    def there_should_be_a_default_value_in_field_return_heating_water_temperature_co(self):
        """Должно быть значение по умолчанию в поле Температура обратной теплосетевой воды СО"""
        with allure.step('должно быть значение по умолчанию в поле Температура обратной теплосетевой воды СО'):
            default_value = '42'
            return_heating_water_temperature_co = self.find_element(
                TwoStageMixedGws2Locators.LOCATOR_RETURN_HEATING_WATER_TEMPERATURE_CO)
            value_return_heating_water_temperature_co = return_heating_water_temperature_co.get_attribute('value')
            assert value_return_heating_water_temperature_co == default_value, \
                f'Значение по умолчанию в поле Температура обратной теплосетевой воды СО - ' \
                f'({value_return_heating_water_temperature_co}) не соответствует ожидаемому значению - ({default_value})'

    def checking_the_default_value_in_the_heating_side_loss_field(self):
        """Проверка значения по умолчанию в поле Потери по греющей стороне"""
        with allure.step('Проверка значения по умолчанию в поле Потери по греющей стороне'):
            default_value = '2'
            heating_side_loss_1_stage = self.find_element(TwoStageMixedGws2Locators.LOCATOR_HEATING_SIDE_LOSS_1_STAGE
                                                          ).get_attribute('value')
            heating_side_loss_2_stage = self.find_element(TwoStageMixedGws2Locators.LOCATOR_HEATING_SIDE_LOSS_2_STAGE
                                                          ).get_attribute('value')
            assert heating_side_loss_1_stage == default_value, \
                f'Значение по умолчанию на странице в поле  <Потери по греющей стороне 1 ступень> ' \
                f'({heating_side_loss_1_stage}) не соответствует ожидаемому значению - ({default_value})'
            assert heating_side_loss_2_stage == default_value, \
                f'Значение по умолчанию на странице в поле  <Потери по греющей стороне 2 ступень> ' \
                f'({heating_side_loss_2_stage}) не соответствует ожидаемому значению - ({default_value})'

    def checking_the_default_value_in_the_heated_side_loss_field(self):
        """Проверка значения по умолчанию в поле Потери по нагреваемой стороне"""
        with allure.step('Проверка значения по умолчанию в поле Потери по нагреваемой стороне'):
            default_value = '2'
            heat_loss_1 = self.find_element(TwoStageMixedGws2Locators.LOCATOR_HEAT_LOSS_1).get_attribute('value')
            heat_loss_2 = self.find_element(TwoStageMixedGws2Locators.LOCATOR_HEAT_LOSS_2).get_attribute('value')
            assert heat_loss_1 == default_value, \
                f'Значение по умолчанию в поле 1 <Потери по нагреваемой стороне> ({heat_loss_1}) не соответствует ' \
                f'ожидаемому значению - ({default_value})'
            assert heat_loss_2 == default_value, \
                f'Значение по умолчанию в поле 2 <Потери по нагреваемой стороне> ({heat_loss_2}) не соответствует ' \
                f'ожидаемому значению - ({default_value})'

    def checking_default_value_in_surface_contamination_margin_field(self):
        """Проверка значения по умолчанию в поле Запас поверхности на загрязнение"""
        with allure.step('Проверка значения по умолчанию в поле Запас поверхности на загрязнение'):
            default_value = '10'
            margin_of_surface_for_contamination_1 = self.find_element(
                TwoStageMixedGws2Locators.LOCATOR_MARGIN_OF_SURFACE_FOR_CONTAMINATION_1).get_attribute('value')
            margin_of_surface_for_contamination_2 = self.find_element(
                TwoStageMixedGws2Locators.LOCATOR_MARGIN_OF_SURFACE_FOR_CONTAMINATION_2).get_attribute('value')
            assert margin_of_surface_for_contamination_1 == default_value, \
                f'Значение по умолчанию на странице в поле 1  <Запас поверхности на загрязнение> ' \
                f'({margin_of_surface_for_contamination_1}) не соответствует ожидаемому значению - ({default_value})'
            assert margin_of_surface_for_contamination_2 == default_value, \
                f'Значение по умолчанию на странице в поле 2 <Запас поверхности на загрязнение> ' \
                f'({margin_of_surface_for_contamination_2}) не соответствует ожидаемому значению - ({default_value})'

    def checking_inclusion_of_radio_button_automatically_split_loads_of_gws_system(self):
        """Проверка включения радиобаттона  Автоматически разбивать нагрузки системы ГВС"""
        with allure.step('Проверка включения радиобаттона  Автоматически разбивать нагрузки системы ГВС'):
            radio_button = self.find_element(
                TwoStageMixedGws2Locators.LOCATOR_RADIO_BUTTON_AUTOMATICALLY_SPLIT_LOAD_OF_GWS_SYSTEM).is_selected()
            assert radio_button is True, f'Радио-баттон Автоматически разбивать нагрузки системы ГВС не включен. Значения' \
                                         f'поля - {radio_button}'

    def checking_selection_in_calculation_scheme_field_of_check_box_monoblock(self):
        """Проверка выбора в поле Схема расчета чек-бокса Моноблок"""
        with allure.step('Проверка выбора в поле Схема расчета чек-бокса Моноблок'):
            check_box_monoblock = self.find_element(
                TwoStageMixedGws2Locators.LOCATOR_CHECKBOX_CALCULATION_SCHEME_MONOBLOCK
            ).is_selected()
            assert check_box_monoblock is True, f'На странице не выбран по умолчанию чек-бокс Схема расчета - Моноблок.' \
                                                f'Значение чек-бокса - {check_box_monoblock}'

    def switch_to_advanced_selection(self):
        """Переход в расширенный режим"""
        with allure.step('Переход в расширенный режим'):
            button_advanced = self.find_element(TwoStageMixedGws2Locators.LOCATOR_BUTTON_ADVANCED)
            button_advanced.click()
            self.waiting_element_is_visibility_located_dom(TwoStageMixedGws2Locators.LOCATOR_ACTIVE_BUTTON_ADVANCED)

    def checking_radio_button_selection_include_mating_flanges_sleeves_in_price(self):
        """Проверка выбора radio button Включить в стоимость ответные фланцы/втулки"""
        with allure.step('Проверка выбора radio button Включить в стоимость ответные фланцы/втулки'):
            radio_button = self.find_element(
                TwoStageMixedGws2Locators.LOCATOR_RADIO_BUTTON_INCLUDE_COUNTER_FLANGES_IN_PRICE
            ).is_selected()
            assert radio_button is True, f'Радио-баттон Включить в стоимость ответные фланцы не выбран на странице. ' \
                                         f'Значение - {radio_button}'

    def checking_radio_button_selection_allow_program_to_change_initial_data(self):
        """Проверка выбора radio button Разрешить программе изменять начальные данные,
        чтобы находить более дешевые варианты"""
        with allure.step('Проверка выбора radio button Разрешить программе изменять начальные данные, '
                         'чтобы находить более дешевые варианты'):
            radio_button = self.find_element(
                TwoStageMixedGws2Locators.LOCATOR_RADIO_BUTTON_ALLOW_PROGRAM_TO_CHANGE_INITIAL_DATA).is_selected()
            assert radio_button is True, f'Радио-баттон Разрешить программе изменять начальные данные на странице не выбран.' \
                                         f'Значение - {radio_button}'

    def entering_value_in_field(self, locator, value: str):
        """Ввод значения в поле """
        with allure.step('Ввод значения в поле'):
            self.waiting_element_is_visibility_on_the_page(locator)
            input = self.find_element(locator)
            input.send_keys(value)
            value_in_input = input.get_attribute('value')
            assert value_in_input == value, f'Введенное значение в поле - ({value_in_input}) не соответствует ожидаемому - ' \
                                            f'({value})'

    def input_heating_water_supply_temperature_summer(self, value_heating_water_supply_temperature_summer: str):
        """Ввод Температура подающей теплосетевой воды, Лето,
        value_heating_water_supply_temperature_summer - Температура подающей теплосетевой воды Лето"""
        with allure.step('Ввод Температура подающей теплосетевой воды, Лето'):
            self.entering_value_in_field(
                TwoStageMixedGws2Locators.LOCATOR_INPUT_HEATING_WATER_SUPPLY_TEMPERATURE_SUMMER,
                value_heating_water_supply_temperature_summer
            )

    def input_heating_water_supply_temperature_winter(self, value_heating_water_supply_temperature_winter):
        """Ввод Температура подающей теплосетевой воды, Зима,
                value_heating_water_supply_temperature_summer - Температура подающей теплосетевой воды Зима"""
        with allure.step('Ввод Температура подающей теплосетевой воды, Зима'):
            self.entering_value_in_field(
                TwoStageMixedGws2Locators.LOCATOR_INPUT_HEATING_WATER_SUPPLY_TEMPERATURE_WINTER,
                value_heating_water_supply_temperature_winter
            )

    def input_return_heating_water_temperature_summer(self, value_heating_water_return_temperature_summer: str):
        """Ввод Температура обратной теплосетевой воды. Лето
        value_heating_water_return_temperature_summer - Температура обратной теплосетевой воды Лето"""
        with allure.step('Ввод Температура обратной теплосетевой воды. Лето'):
            self.entering_value_in_field(
                TwoStageMixedGws2Locators.LOCATOR_HEATING_WATER_RETURN_TEMPERATURE_SUMMER,
                value_heating_water_return_temperature_summer
            )

    def input_return_heating_water_temperature_winter(self, value_heating_water_return_temperature_winter: str):
        """Ввод Температура обратной теплосетевой воды. Зима
        value_heating_water_return_temperature_winter - Температура обратной теплосетевой воды Зима"""
        with allure.step('Ввод Температура обратной теплосетевой воды. Зима'):
            self.entering_value_in_field(
                TwoStageMixedGws2Locators.LOCATOR_HEATING_WATER_RETURN_TEMPERATURE_WINTER,
                value_heating_water_return_temperature_winter
            )

    def input_heating_system_power(self, value_heating_system_power: str):
        """Ввод Мощность системы отопления,
        value_heating_system_power - Мощность системы отопления"""
        with allure.step('Ввод Мощность системы отопления'):
            self.entering_value_in_field(TwoStageMixedGws2Locators.LOCATOR_HEATING_SYSTEM_POWER,
                                         value_heating_system_power)

    def entering_cold_water_temperature(self, value_cold_water_temperature: str):
        """Ввод температуры холодной воды,
        value_cold_water_temperature - Температура холодной воды"""
        with allure.step('Ввод температуры холодной воды'):
            self.entering_value_in_field(
                TwoStageMixedGws2Locators.LOCATOR_COLD_WATER_TEMPERATURE, value_cold_water_temperature
            )

    def input_dhw_heated_water_temperature_tz(self, value_hot_water_temperature: str):
        """Ввод Температура нагретой воды ГВС (ТЗ)"""
        with allure.step('Ввод Температура нагретой воды ГВС (ТЗ)'):
            self.entering_value_in_field(
                TwoStageMixedGws2Locators.LOCATOR_HOT_WATER_TEMPERATURE, value_hot_water_temperature)

    def input_of_gws_system_power(self, gws_system_power: str):
        """Ввод мощности системы ГВС"""
        with allure.step('Ввод мощности системы ГВС'):
            self.entering_value_in_field(TwoStageMixedGws2Locators.LOCATOR_GWS_SYSTEM_POWER, gws_system_power)

    def choice_unit_of_measurement_heating_system_output_kwt(self):
        """Выбор единицы измерения мощности системы отопления кВт"""
        with allure.step('Выбор единицы измерения мощности системы отопления кВт'):
            option_kwt = '04399cad-00fb-4ce2-8de2-31bb946792dc'
            true_value = 'кВт'

            unit = self.find_element(TwoStageMixedGws2Locators.LOCATOR_UNIT_OF_MEASUREMENT_POWER_OF_HEATING_SYSTEM)
            select = Select(unit)
            select.select_by_value(option_kwt)
            selected_option = select.first_selected_option.text
            assert selected_option == true_value, f'Выбранная опция единица измерения мощности системы - ' \
                                                  f'({selected_option}) не соответствует ожидаемой - ({true_value})'

    def click_on_the_select_button(self):
        """Клик по кнопке подобрать пто"""
        with allure.step('Клик по кнопке подобрать пто'):
            button_select = self.find_element(TwoStageMixedGws2Locators.LOCATOR_SELECT_BUTTON)
            self.click_js(button_select)
            time.sleep(0.5)
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT, sec=90)
            result_selection = self.find_elements(TwoStageMixedGws2Locators.LOCATOR_RESULT_SELECTION)
            assert len(result_selection) > 1, f'Количество найденных решений для подбора одно или меньше - ' \
                                              f'({len(result_selection)})'

    def checking_the_opening_of_calculation_details(self):
        """Проверка открытия деталей расчета"""
        with allure.step('Проверка открытия деталей расчета'):
            calculation_details = self.find_element(TwoStageMixedGws2Locators.LOCATOR_CALCULATION_DETAILS)
            self.click_js(calculation_details)
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
            self.waiting_element_is_visibility_on_the_page(TwoStageMixedGws2Locators.LOCATOR_HEADER_CALCULATION_DETAILS)
            button_close_calculation_details = self.find_element(
                TwoStageMixedGws2Locators.LOCATOR_BUTTON_CLOSE_CALCULATION_DETAILS)
            self.click_js(button_close_calculation_details)

    def click_button_verification_calculation(self):
        """Клик по кнопке Поверочный расчет"""
        with allure.step('Клик по кнопке Поверочный расчет'):
            button_verification_calculation = self.find_element(
                TwoStageMixedGws2Locators.LOCATOR_BUTTON_VERIFICATION_CALCULATION)
            self.click_js(button_verification_calculation)
            self.switching_window(-1)
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
            self.waiting_element_is_visibility_on_the_page(
                VerificationCalculationGws2Locators.LOCATOR_HEADER_VERIFICATION_CALCULATION)

    def checking_the_check_box_and_choosing_a_solution(self):
        """Проверка чек-бокса Выбор решения"""
        with allure.step('Проверка чек-бокса Выбор решения'):
            check_box = self.find_element(TwoStageMixedGws2Locators.LOCATOR_CHECKBOX_CHOOSE_SOLUTION)
            self.click_js(check_box)
            check_box_is_selected = check_box.is_selected()
            assert check_box_is_selected is True, f'Чек-бокс Выбор решения не выбран'
            self.waiting_element_is_visibility_on_the_page(
                TwoStageMixedGws2Locators.LOCATOR_BUTTON_CALCULATION_TO_SAVE_SELECTED_SOLUTION)

    def click_on_button_to_save_calculation_for_the_selected_products(self):
        """Клик по кнопке Сохранить расчет в выбранных товарах"""
        with allure.step('Клик по кнопке Сохранить расчет в выбранных товарах'):
            button_save = self.find_element(
                TwoStageMixedGws2Locators.LOCATOR_BUTTON_CALCULATION_TO_SAVE_SELECTED_SOLUTION)
            self.click_js(button_save)
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
            self.waiting_element_is_visibility_on_the_page(ModalSaveCalculationLocators.LOCATOR_HEADER_SAVE_CALCULATION)


@allure.feature('Модалка Сохранить расчет')
class ModalSaveCalculation(BasePage):
    """Модалка Сохранить расчет"""

    def input_name_object(self):
        """Ввод названия объекта"""
        with allure.step('Ввод названия объекта'):
            name_object = 'test_web_selenium'
            input_name_obj = self.find_element(ModalSaveCalculationLocators.LOCATOR_INPUT_OBJECT_NAME)
            input_name_obj.send_keys(name_object)

    def input_description_for_calculation(self):
        """Ввод описания к расчету"""
        with allure.step('Ввод описания к расчету'):
            description_for_calculation = 'тестирование через автотесты!!!'
            input_description = self.find_element(
                ModalSaveCalculationLocators.LOCATOR_INPUT_DESCRIPTION_FOR_CALCULATION)
            input_description.send_keys(description_for_calculation)

    def click_button_save(self):
        """Клик по кнопке Сохранить расчет"""
        with allure.step('Клик по кнопке Сохранить расчет'):
            button_save = self.find_element(ModalSaveCalculationLocators.LOCATOR_BUTTON_SAVE_CALCULATION)
            self.click_js(button_save)
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT, sec=90)
            self.waiting_element_is_visibility_on_the_page(
                ModalSaveCalculationLocators.LOCATOR_HEADER_SUCCESSFUL_SAVEMENT)

    def saving_the_calculation_number(self) -> str:
        """Сохранение номера расчета"""
        with allure.step('Сохранение номера расчета'):
            num_calculation = self.find_element(ModalSaveCalculationLocators.LOCATOR_CALCULATION_NUMBER).text
            return num_calculation

    def click_button_calculation_of_ol_and_pto(self):
        """Клик по кнопке Расчеты ОЛ и ПТО"""
        with allure.step('Клик по кнопке Расчеты ОЛ и ПТО'):
            button_calculation_of_ol_and_pto = self.find_element(
                ModalSaveCalculationLocators.LOCATOR_BUTTON_CALCULATION_OF_OL_AND_PTO)
            self.click_js(button_calculation_of_ol_and_pto)
            time.sleep(3)
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
            self.waiting_element_is_visibility_on_the_page(CalculationsOfOlAndPtoLocators.LOCATOR_H1)
