import re
import time

import allure

from base_page.base_page import BasePage
from base_page.base_page_locators import BaseOpenLocators
from open_pages.calculations_of_ol_and_pto_page.calculations_of_ol_and_pto_locators import \
    CalculationsOfOlAndPtoLocators
from open_pages.pto_configurator_page.locators_configurator import StandardPtoCalculationLocators, \
    TwoStageMixedGws2Locators


@allure.feature('Страница Стандартный расчет ПТО')
class StandardPtoPage(BasePage):
    """Страница Стандартный расчет ПТО"""

    def click_btn_standard_mode(self):
        """Клик по кнопке Стандартный режим"""
        with allure.step('Клик по кнопке Стандартный режим'):
            self.expecting_clickability(StandardPtoCalculationLocators.LOCATOR_BTN_STANDARD_MODE, sec=10)
            btn_standard_mode = self.find_element(StandardPtoCalculationLocators.LOCATOR_BTN_STANDARD_MODE)
            btn_standard_mode.click()
            with allure.step('Ожидание отображения заголовка Основные параметры расчета'):
                self.waiting_element_is_visibility_on_the_page(
                    StandardPtoCalculationLocators.LOCATOR_HEADER_MAIN_CALCULATION_PARAMETERS, sec=5)

    def should_be_heat_supply(self):
        """Должен быть выбран Теплоснабжение в Назначение расчета"""
        with allure.step('Должен быть выбран Теплоснабжение в Назначение расчета'):
            check_input = self.find_element(StandardPtoCalculationLocators.LOCATOR_HEAT_SUPPLY_INPUT)
            check_input = check_input.is_selected()
            if not check_input:
                button_heat_supply = self.find_element(StandardPtoCalculationLocators.LOCATOR_HEAT_SUPPLY_BUTTON)
                button_heat_supply.click()
                check_input = self.find_element(StandardPtoCalculationLocators.LOCATOR_HEAT_SUPPLY_INPUT)
                check_input = check_input.is_selected()
                assert check_input, 'Не выбран пункт Теплоснабжение в Назначение расчета '

    def type_power(self, value):
        """Ввод мощности"""
        with allure.step('Ввод мощности'):
            input_power = self.find_element(StandardPtoCalculationLocators.LOCATOR_POWER_INPUT)
            input_power.send_keys(value)

    def type_hot_water_in(self, value):
        """Ввод горячей воды Температура на входе в ПТО"""
        with allure.step('Ввод горячей воды Температура на входе в ПТО'):
            input_hot_water = self.find_element(StandardPtoCalculationLocators.LOCATOR_HOT_WATER_IN_INPUT)
            input_hot_water.send_keys(value)

    def type_cold_water_in(self, value):
        """Ввод холодной воды Температура на входе в ПТО"""
        with allure.step('Ввод холодной воды Температура на входе в ПТО'):
            input_cold_water = self.find_element(StandardPtoCalculationLocators.LOCATOR_COLD_WATER_IN_INPUT)
            input_cold_water.send_keys(value)

    def type_hot_water_from(self, value):
        """Ввод горячей воды Температура на выходе из ПТО"""
        with allure.step('Ввод горячей воды Температура на выходе из ПТО'):
            input_hot_water = self.find_element(StandardPtoCalculationLocators.LOCATOR_HOT_WATER_FROM_INPUT)
            input_hot_water.send_keys(value)

    def type_cold_water_from(self, value):
        """Ввод холодной воды Температура на выходе из ПТО"""
        with allure.step('Ввод холодной воды Температура на выходе из ПТО'):
            input_cold_water = self.find_element(StandardPtoCalculationLocators.LOCATOR_COLD_FROM_INPUT)
            input_cold_water.send_keys(value)

    def click_pick_pto(self):
        """Клик по кнопке Подобрать ПТО и ожидание появления результатов"""
        with allure.step('Клик по кнопке Подобрать ПТО и ожидание появления результатов'):
            button_pick_pto = self.find_element(StandardPtoCalculationLocators.LOCATOR_PICK_PTO)
            self.driver.execute_script("arguments[0].click()", button_pick_pto)
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT, sec=120)
            self.is_element_present(*StandardPtoCalculationLocators.LOCATOR_RESULT_PTO)

    def click_button_generate_a_questionnaire(self):
        """Клик по кнопке Сформировать опросный лист"""
        with allure.step('Клик по кнопке Сформировать опросный лист'):
            button_generate_a_questionnaire = self.find_element(
                StandardPtoCalculationLocators.LOCATOR_BUTTON_GENERATE_A_QUESTIONNAIRE)
            self.click_js(button_generate_a_questionnaire)
            with allure.step('Ожидание отображения заголовка Сформировать опросный лист'):
                self.waiting_element_is_visibility_on_the_page(
                    StandardPtoCalculationLocators.LOCATOR_H2_GENERATE_A_QUESTIONNAIRE)

    def entering_a_comment_in_the_questionnaire_description_field(self):
        """Ввод комментария в поле Описание опросного листа"""
        with allure.step('Ввод комментария в поле Описание опросного листа'):
            comment = 'ТЕСТИРОВАНИЕ!!! СОЗДАНО ДЛЯ ТЕСТИРОВАНИЯ!!!'
            self.waiting_element_is_visibility_on_the_page(
                StandardPtoCalculationLocators.LOCATOR_FIELD_DESCRIPTION_OF_THE_QUESTIONNAIRE)
            input_field_description_of_the_questionnaire = self.find_element(
                StandardPtoCalculationLocators.LOCATOR_FIELD_DESCRIPTION_OF_THE_QUESTIONNAIRE)
            input_field_description_of_the_questionnaire.clear()
            input_field_description_of_the_questionnaire.send_keys(comment)

    def click_button_send_to_billing_department(self):
        """Клик по кнопке Отправить в расчетный отдел"""
        with allure.step('Клик по кнопке Отправить в расчетный отдел'):
            button_send_to_billing_department = self.find_element(
                StandardPtoCalculationLocators.LOCATOR_BUTTON_SEND_TO_BILLING_DEPARTMENT)
            self.click_js(button_send_to_billing_department)
            time.sleep(0.5)
            with allure.step(
                    'Ожидание отработки лоадера и отображения модалки Спасибо за обращение! с номером опросного листа'):
                self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT, sec=120)
                self.waiting_element_is_visibility_on_the_page(
                    StandardPtoCalculationLocators.LOCATOR_MODAL_WITH_THE_NUMBER_OF_THE_QUESTIONNAIRE, sec=90)

    def saving_the_number_of_the_questionnaire_from_the_modal_window(self) -> str:
        """Сохранение номера опросного листа из модального окна после отправки в расчетный отдел"""
        with allure.step('Сохранение номера опросного листа из модального окна после отправки в расчетный отдел'):
            line_with_the_number_of_the_questionnaire = self.find_element(
                StandardPtoCalculationLocators.LOCATOR_LINE_WITH_THE_NUMBER_OF_THE_QUESTIONNAIRE_IN_MODAL).text
            questionnaire_number = line_with_the_number_of_the_questionnaire.split(': ')[1]
            return questionnaire_number

    def save_all_solutions(self) -> list:
        """Сохранение всех решений"""
        with allure.step('Сохранение всех решений'):
            self.waiting_element_is_visibility_located_dom(StandardPtoCalculationLocators.LOCATOR_NAME_SOLUTION, sec=5)
            all_solutions = self.find_elements(StandardPtoCalculationLocators.LOCATOR_NAME_SOLUTION)
            all_solutions = [el.text for el in all_solutions]
            return all_solutions

    def should_be_solution_details(self):
        """Проверка отображения модалки Детали решения"""
        with allure.step('Проверка отображения модалки Детали решения'):
            button_solution_details = self.find_elements(StandardPtoCalculationLocators.LOCATOR_LINK_SOLUTION_DETAILS)
            button_solution_details = button_solution_details[0]
            button_solution_details.click()
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
            self.is_element_present(*StandardPtoCalculationLocators.LOCATOR_MODAL)
            button_close_modal = self.find_element(StandardPtoCalculationLocators.LOCATOR_BUTTON_CLOSE_MODAL_DETAILS)
            button_close_modal.click()

    def click_save_solution(self):
        """Клик по кнопке Сохранить расчет в подобранном решении"""
        with allure.step('Клик по кнопке Сохранить расчет в подобранном решении'):
            button_save_solution = self.find_elements(StandardPtoCalculationLocators.LOCATOR_SAVE_SOLUTION)
            button_save_solution = button_save_solution[0]
            button_save_solution.click()
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
            self.is_element_present(*StandardPtoCalculationLocators.LOCATOR_MODAL)
            self.is_element_present(*StandardPtoCalculationLocators.LOCATOR_H5_SAVE_CALCULATION)

    def type_form_save_solution(self, name, description):
        """Заполнение формы модалки Сохранить расчет"""
        with allure.step('Заполнение формы модалки Сохранить расчет'):
            input_name_obj = self.find_element(StandardPtoCalculationLocators.LOCATOR_INPUT_NAME_OBJ)
            input_name_obj.send_keys(name)
            input_description = self.find_element(StandardPtoCalculationLocators.LOCATOR_INPUT_DESCRIPTION)
            input_description.send_keys(description)
            time.sleep(1)

    def click_save_calculation_in_modal(self):
        """Сохранение расчета в модалке"""
        with allure.step('Сохранение расчета в модалке'):
            button_save = self.find_element(StandardPtoCalculationLocators.LOCATOR_BUTTON_SAVE_IN_MODAL)
            button_save.click()
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT, sec=120)
            self.is_element_present(*StandardPtoCalculationLocators.LOCATOR_MODAL)

    def save_num_calculation(self):
        """Сохранение номера расчета"""
        with allure.step('Сохранение номера расчета'):
            num_calc = self.find_element(StandardPtoCalculationLocators.LOCATOR_H5_NUM_CALCULATION).text
            num_calc = num_calc.split(': ')[1]
            return num_calc

    def click_calculations_of_ol_and_pto(self):
        """Клик по кнопке Расчеты ОЛ и ПТО"""
        with allure.step('Клик по кнопке Расчеты ОЛ и ПТО'):
            button_ol_pto = self.find_element(StandardPtoCalculationLocators.LOCATOR_CALCULATIONS_OF_OL_AND_PTO)
            button_ol_pto.click()
            time.sleep(1)
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
            self.waiting_element_is_visibility_on_the_page(CalculationsOfOlAndPtoLocators.LOCATOR_H1)

    def go_to_two_stage_mixed_gws_2(self):
        """Переход в раздел Двухступенчатая смешанная схема ГВС2"""
        with allure.step('Переход в раздел Двухступенчатая смешанная схема ГВС2'):
            button_two_stage_mixed_gws_2 = self.find_element(
                StandardPtoCalculationLocators.LOCATOR_BUTTON_TWO_STAGE_MIXED_GWS_2)
            button_two_stage_mixed_gws_2.click()
            self.waiting_element_is_visibility_on_the_page(TwoStageMixedGws2Locators.LOCATOR_H1_GWS_2, sec=30)

    def save_rice_rub_in_tooltip_by_name_solution(self, name_solution: str) -> float:
        """Сохранение стоимости в рублях по наименованию решения в тултипе инфо о стоимости"""
        with allure.step('Сохранение стоимости в рублях по наименованию решения в тултипе инфо о стоимости'):
            self.waiting_element_is_visibility_located_dom(
                StandardPtoCalculationLocators.locator_btn_tooltip_info_price_by_solution(name_solution), sec=5)
            price_solution_rub = self.find_element(
                StandardPtoCalculationLocators.locator_btn_tooltip_info_price_by_solution(name_solution)
            ).get_attribute('data-bs-original-title').split('₽')[0]
            price_solution_rub = float(price_solution_rub.replace(' ', ''))
            return price_solution_rub

    def save_promo_course_in_tooltip_by_name_solution(self, name_solution: str) -> int:
        """Сохранение промо курса по наименованию решения в тултипе инфо о стоимости"""
        with allure.step('Сохранение промо курса по наименованию решения в тултипе инфо о стоимости'):
            self.waiting_element_is_visibility_located_dom(
                StandardPtoCalculationLocators.locator_btn_tooltip_info_price_by_solution(name_solution), sec=5)
            price_solution_rub = self.find_element(
                StandardPtoCalculationLocators.locator_btn_tooltip_info_price_by_solution(name_solution)
            ).get_attribute('data-bs-original-title')
            price_solution_rub = int(re.findall(r'\d+', price_solution_rub)[-1])  # Извлекаем все числа из строки
            return price_solution_rub

    def save_price_ue_by_name_solution(self, name_solution: str) -> float:
        """Сохранение стоимости в УЕ по наименованию решения"""
        with allure.step('Сохранение стоимости в УЕ по наименованию решения'):
            self.waiting_element_is_visibility_located_dom(
                StandardPtoCalculationLocators.locator_price_ue_by_solution(name_solution), sec=5)
            price_ue = self.find_element(
                StandardPtoCalculationLocators.locator_price_ue_by_solution(name_solution)).text.replace(' ', '')
            return float(price_ue)
