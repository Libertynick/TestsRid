import json
import time

import allure

from base_page.base_page import BasePage
from base_page.base_page_locators import BaseOpenLocators
from open_pages.shipment_statuses_page.locators_shipment_statuses import ShipmentInTransitLocators, \
    ShipmentInStockLocators, ModalTermsOfShipmentLocators


@allure.feature('Страница Отгрузки - На складе')
class ShipmentInStock(BasePage):
    """Страница Отгрузки - На складе"""

    def verify_present_information(self):
        """Проверка появления информации о доставках"""
        with allure.step('Проверка появления информации о '):
            self.is_element_present(*ShipmentInTransitLocators.LOCATOR_DIV_DELIVERY_IN_TRANSIT)
            self.expecting_clickability(ShipmentInTransitLocators.LOCATOR_BUTTON_DISCLOSURE)
            button_info = self.find_element(ShipmentInTransitLocators.LOCATOR_BUTTON_DISCLOSURE)
            self.scroll_to(button_info)
            self.driver.execute_script("arguments[0].click()", button_info)
            time.sleep(1)
            self.waiting_element_is_visibility_located_dom(ShipmentInTransitLocators.LOCATOR_BLOCK_WITH_INFORMATION)

    def search_order(self, num_order: str):
        """Поиск заказа"""
        with allure.step(f'Поиск заказа {num_order}'):
            input_search = self.find_element(ShipmentInStockLocators.LOCATOR_SEARCH_INPUT_ORDER)
            input_search.clear()
            input_search.send_keys(num_order)
            self.waiting_for_loader_processing_on_page(ShipmentInStockLocators.LOCATOR_LOADER_IN_ORDER_SEARCH_FIELD)
            res_search = self.driver.find_elements(*ShipmentInStockLocators.LOCATOR_BLOCK_ORDER)
            assert len(res_search) == 1, f'Найдено заказов - {len(res_search)}. В результате поиска найдено больше ' \
                                         f'1-ого заказа или 0'
            found_order = self.find_element(ShipmentInStockLocators.LOCATOR_LINK_ORDER).text
            assert found_order == num_order, \
                f'Номер найденного заказа - ({found_order}) не соответствует ожидаемому номеру - ({num_order})'

    def select_checkbox_to_request_shipment_of_entire_order(self):
        """Выбрать чек-бокс Запросить отгрузку всего заказа"""
        with allure.step('Выбрать чек-бокс Запросить отгрузку всего заказа'):
            check_box = self.find_element(
                ShipmentInStockLocators.LOCATOR_CHECKBOX_REQUEST_SHIPMENT_OF_YOUR_ENTIRE_ORDER)
            self.click_js(check_box)
            is_selected_checkbox = check_box.is_selected()
            assert is_selected_checkbox is True, f'Чек- бокс не выбран. is_selected_checkbox - {is_selected_checkbox}'
            inactive_button_request_shipment = self.driver.find_elements(
                *ShipmentInStockLocators.LOCATOR_INACTIVE_BUTTON_REQUEST_SHIPMENT)  # Неактивная кнопка Запросить отгрузку
            assert len(inactive_button_request_shipment) == 0, \
                f'Кнопка Запросить отгрузку неактивна'

    def click_button_request_shipment(self):
        """Клик по кнопке Запросить отгрузку"""
        with allure.step('Клик по кнопке Запросить отгрузку'):
            self.expecting_clickability(ShipmentInStockLocators.LOCATOR_BUTTON_REQUEST_SHIPMENT)
            button_request_shipment = self.find_element(ShipmentInStockLocators.LOCATOR_BUTTON_REQUEST_SHIPMENT)
            button_request_shipment.click()
            time.sleep(0.3)
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
            self.waiting_element_is_visibility_on_the_page(ModalTermsOfShipmentLocators.LOCATOR_HEADER_MODAL)


@allure.feature('Модалка Условия отгрузки')
class ModalTermsOfShipment(BasePage):
    """Модалка Условия отгрузки"""

    def choosing_a_delivery_method(self, delivery_method: str):
        """Выбор способа доставки
        delivery_method - способ доставки
        """
        with allure.step(f'Выбор способа доставки {delivery_method}'):
            button_drop_menu_delivery_method = self.find_element(
                ModalTermsOfShipmentLocators.LOCATOR_DELIVERY_METHODS_DROP_DOWN_MENU_BUTTON)
            button_drop_menu_delivery_method.click()
            self.waiting_element_is_visibility_on_the_page(ModalTermsOfShipmentLocators.LOCATOR_MENU_DELIVERY_METHOD)
            self.waiting_element_is_visibility_on_the_page(
                ModalTermsOfShipmentLocators.locator_method_delivery(delivery_method)).click()
            self.waiting_element_is_visibility_on_the_page(
                ModalTermsOfShipmentLocators.LOCATOR_SELECTED_DELIVERY_METHOD)
            selected_delivery_method = self.find_element(ModalTermsOfShipmentLocators.LOCATOR_SELECTED_DELIVERY_METHOD
                                                         ).text
            assert selected_delivery_method == delivery_method, \
                f'Выбранный способ доставки - ({selected_delivery_method}) не соответствует ожидаемому - ' \
                f'({delivery_method})'

    def entering_delivery_address(self, delivery_address: str):
        """Ввод адреса доставки
        delivery_address - адрес доставки
        """
        with allure.step(f'Ввод адреса доставки {delivery_address}'):
            input_delivery_address = self.find_element(ModalTermsOfShipmentLocators.LOCATOR_INPUT_DELIVERY_ADDRESS)
            input_delivery_address.send_keys(delivery_address)
            self.waiting_element_is_visibility_on_the_page(
                ModalTermsOfShipmentLocators.locator_li_result_search_delivery_address(delivery_address)).click()
            selected_delivery_address = input_delivery_address.get_attribute('value')
            print(selected_delivery_address)
            assert selected_delivery_address == delivery_address, \
                f'Введенный адрес - ({selected_delivery_address}) не соответствует ожидаемому - ({delivery_address})'

    def click_button_calculate_delivery_costs(self):
        """Клик по кнопке Рассчитать стоимость доставки"""
        with allure.step('Клик по кнопке Рассчитать стоимость доставки'):
            button_calculate_delivery_costs = self.find_element(
                ModalTermsOfShipmentLocators.LOCATOR_BUTTON_CALCULATE_DELIVERY_COSTS)
            button_calculate_delivery_costs.click()
            self.waiting_for_loader_processing_in_dom(ModalTermsOfShipmentLocators.LOCATOR_DELIVERY_CALCULATION_LOADER)
            cost_delivery = self.find_element(ModalTermsOfShipmentLocators.LOCATOR_DELIVERY_COST
                                              ).text
            cost_delivery = float(cost_delivery.replace(' ₽', ''))
            assert cost_delivery != 0.0, f'Стоимость доставки - ({cost_delivery}) равна 0 или в поле не числовое значение'

    def click_button_send_request(self):
        """Клик по кнопке Отправить запрос"""
        with allure.step('Клик по кнопке Отправить запрос'):
            btn_send_request = self.find_element(ModalTermsOfShipmentLocators.LOCATOR_BUTTON_SEND_REQUEST)
            self.scroll_to(btn_send_request)
            self.expecting_clickability(ModalTermsOfShipmentLocators.LOCATOR_BUTTON_SEND_REQUEST)
            btn_send_request.click()
            time.sleep(0.2)
            self.waiting_for_loader_processing_on_page(ModalTermsOfShipmentLocators.LOCATOR_LOADER_BTN_SEND_REQUEST)

    def status_must_be_sent_to_customer_service_in_json(self):
        """Должен быть статус Отправлено в кл. сервис в json(тестовый режим) при отмене заказа"""
        with allure.step('Должен быть статус Отправлено в кл. сервис в json(тестовый режим) при отмене заказа'):
            true_status_response = 'Отправлено в кл.сервис'

            self.waiting_element_is_visibility_located_dom(ModalTermsOfShipmentLocators.LOCATOR_RESPONSE_JSON_TST,
                                                           sec=20)
            json_response = self.find_element(ModalTermsOfShipmentLocators.LOCATOR_RESPONSE_JSON_TST).text
            json_response = json_response.replace('\n', '').replace('\t', '')
            json_response_dict = json.loads(json_response)  # словарь с полным ответом
            response_data = json_response_dict.get('responseData')
            objects = response_data.get('Objects')
            objects_dict = objects[0]
            status_response = objects_dict.get('Status')
            assert true_status_response == status_response, \
                f'Статус ответа заявки на странице - ({status_response}) не соответствует ожидаемому - ' \
                f'({true_status_response})'

    def saving_ticket_number(self) -> str:
        """Сохранение номера тикета"""
        with allure.step('Сохранение номера тикета'):
            self.waiting_element_is_visibility_located_dom(ModalTermsOfShipmentLocators.LOCATOR_RESPONSE_JSON_TST,
                                                           sec=20)
            json_response = self.find_element(ModalTermsOfShipmentLocators.LOCATOR_RESPONSE_JSON_TST).text
            json_response = json_response.replace('\n', '').replace('\t', '')
            json_response_dict = json.loads(json_response)  # словарь с полным ответом
            response_data = json_response_dict.get('responseData')
            objects = response_data.get('Objects')
            objects_dict = objects[0]
            num_ticket = objects_dict.get('Code')
            return str(num_ticket)
