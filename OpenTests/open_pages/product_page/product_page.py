import time

import allure
import requests
from selenium.webdriver.common.by import By

from base_page.base_page import BasePage
from base_page.base_page_locators import BaseOpenLocators
from open_pages.cart_page.cart_locators import CartLocators
from open_pages.product_page.product_page_locators import ProductPageLocators


@allure.feature('Страница продукта, оборудования')
class ProductPage(BasePage):
    """Страница продукта, оборудования"""

    def should_be_article_in_page(self, article: str):
        """Должен быть артикул на странице, article - номер артикула"""
        with allure.step('Проверка что есть Артикул на странице'):
            locator_article = (By.XPATH, f"//h1/following::span[@data-text-to-copy and text()='{article}'][2]")
            self.waiting_element_is_visibility_on_the_page(locator_article, sec=30)

    def check_that_the_item_is_not_archived(self):
        """Проверка, что товар не архивный"""
        with allure.step('Проверка, что товар не архивный'):
            try:
                self.waiting_element_is_visibility_on_the_page(ProductPageLocators.LOCATOR_H4_ARCHIVED_ITEM, sec=1)
            except:
                return False
            return True

    def store_price_product(self) -> str:
        """Сохранение стоимости продукта"""
        with allure.step('Сохранение стоимости продукта'):
            price_product = self.find_element(ProductPageLocators.LOCATOR_PRICE_PRODUCT)
            price_product = price_product.text
            return price_product

    def click_button_buy(self):
        """Клик по кнопке Купить"""
        with allure.step('Клик по кнопке Купить'):
            self.expecting_clickability(ProductPageLocators.BUTTON_BUY)
            button_buy = self.find_element(ProductPageLocators.BUTTON_BUY)
            button_buy.click()
            self.waiting_element_is_visibility_on_the_page(
                ProductPageLocators.LOCATOR_INFORMATION_MODAL_ADD_PRODUCT_TO_CART, sec=120)

    def click_button_go_to_cart(self):
        """Клик Перейти в корзину"""
        with allure.step('Клик Перейти в корзину'):
            self.expecting_clickability(ProductPageLocators.LOCATOR_BUTTON_DESIGN_IN_MODAL)
            button_design = self.find_element(ProductPageLocators.LOCATOR_BUTTON_DESIGN_IN_MODAL)
            button_design.click()
            with allure.step('Ожидание загрузки страницы после клика'):
                self.waiting_element_invisibility(ProductPageLocators.LOCATOR_INFORMATION_MODAL_ADD_PRODUCT_TO_CART)
                self.waiting_element_is_visibility_on_the_page(CartLocators.LOCATOR_H1_BASKET, sec=90)
                time.sleep(1)
                self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT, sec=120)

    def checking_that_headings_in_product_description_are_not_empty(self):
        """Проверка, что заголовки в описании товара не пустые"""
        with allure.step('Проверка, что заголовки в описании товара не пустые'):
            self.waiting_element_is_visibility_on_the_page(ProductPageLocators.LOCATOR_HEADINGS_IN_PRODUCT_DESCRIPTION,
                                                           sec=5)
            headings_in_product_description = self.find_elements(
                ProductPageLocators.LOCATOR_HEADINGS_IN_PRODUCT_DESCRIPTION)
            headings_in_product_description = [heading.text for heading in headings_in_product_description]
            for heading in headings_in_product_description:
                assert heading != '', f'Один из заголовков в описании на странице товара пустой - ({heading})'

    def checking_that_product_information_is_not_empty(self):
        """Проверка, что информация о товаре не пустая"""
        with allure.step('Проверка, что информация о товаре не пустая'):
            self.waiting_element_is_visibility_on_the_page(ProductPageLocators.LOCATOR_PRODUCT_INFORMATION, sec=5)
            information_product = self.find_elements(ProductPageLocators.LOCATOR_PRODUCT_INFORMATION)
            information_product = [info.text for info in information_product]
            for info in information_product:
                assert info != '', f'В одной из строк в информации о товаре пустая строка - ({info})'

    def checking_that_src_attribute_in_photo_in_carousel_is_not_empty(self):
        """Проверка, что в фото в карусели атрибут src не пустой"""
        with allure.step('Проверка, что в фото в карусели атрибут src не пустой'):
            self.waiting_element_is_visibility_on_the_page(ProductPageLocators.LOCATOR_ACTIVE_IMG_IN_CAROUSEL, sec=5)
            active_photo = self.find_element(ProductPageLocators.LOCATOR_ACTIVE_IMG_IN_CAROUSEL)
            src_attr_active_photo = active_photo.get_attribute('src')
            assert src_attr_active_photo != '', f'Аттрибут src в активном фото пустой - ({src_attr_active_photo})'
            inactive_photo = self.find_elements(ProductPageLocators.LOCATOR_INACTIVE_PHOTOS_IN_CAROUSEL)
            inactive_photo = [photo.get_attribute('src') for photo in inactive_photo]
            for photo_src in inactive_photo:
                assert photo_src != '', f'В одном из неактивном фото атрибут src пустой - ({photo_src})'

    def click_on_characteristics_button_if_there_is_one(self):
        """Клик по кнопке Характеристики, если она есть на странице"""
        with allure.step('Клик по кнопке Характеристики, если она есть на странице'):
            btn_characteristics = self.driver.find_elements(*ProductPageLocators.LOCATOR_BTN_CHARACTERISTICS)
            if len(btn_characteristics) == 1:
                self.scroll_to_elem_perform(btn_characteristics[0])
                self.expecting_clickability(ProductPageLocators.LOCATOR_BTN_CHARACTERISTICS)
                btn_characteristics[0].click()
                self.waiting_element_is_visibility_on_the_page(ProductPageLocators.LOCATOR_HEADINGS_IN_CHARACTERISTICS,
                                                               sec=5)

    def checking_that_headers_in_characteristics_are_not_empty(self):
        """Проверка, что заголовки в характеристиках не пустые"""
        with allure.step('Проверка, что заголовки в характеристиках не пустые'):
            headers_in_characteristics = self.find_elements(ProductPageLocators.LOCATOR_HEADINGS_IN_CHARACTERISTICS)
            headers_in_characteristics = [header.text for header in headers_in_characteristics]
            for header in headers_in_characteristics:
                assert header != '', f'Один из заголовков в характеристиках пустой - ({header})'

    def checking_that_information_in_characteristics_are_not_empty(self):
        """Проверка, что информация в характиристиках не пустая"""
        with allure.step('Проверка, что информация в характиристиках не пустая'):
            information_in_characteristics = self.find_elements(
                ProductPageLocators.LOCATOR_INFORMATION_IN_CHARACTERISTICS)
            information_in_characteristics = [information.text for information in information_in_characteristics]
            for information in information_in_characteristics:
                assert information != '', f'Одна из строк информации в характеристиках пустая - ({information})'

    def click_btn_documentation(self):
        """Клик по кнопке Документация"""
        with allure.step('Клик по кнопке Документация'):
            self.waiting_element_is_visibility_on_the_page(ProductPageLocators.LOCATOR_BTN_DOCUMENTATION, sec=5)
            btn_documentation = self.find_element(ProductPageLocators.LOCATOR_BTN_DOCUMENTATION)
            btn_documentation.click()

    def click_btn_passport(self):
        """Клик по кнопке Паспорт - выпадающее мею"""
        with allure.step('Клик по кнопке Паспорт - выпадающее меню'):
            btn_doc = self.find_element(ProductPageLocators.LOCATOR_BTN_DOCUMENTATION)
            self.scroll_to(btn_doc)
            self.waiting_element_is_visibility_on_the_page(ProductPageLocators.LOCATOR_BTN_PASSPORT)
            btn_passport = self.find_element(ProductPageLocators.LOCATOR_BTN_PASSPORT)
            btn_passport.click()
            self.waiting_element_is_visibility_on_the_page(ProductPageLocators.LOCATOR_BTN_SAVE_PASSPORT, sec=5)

    def download_passport(self, article: str):
        """Скачивание паспорта"""
        with allure.step('Скачивание паспорта'):
            link_download_passport = self.find_element(ProductPageLocators.LOCATOR_BTN_SAVE_PASSPORT).get_attribute(
                'href')
            href = link_download_passport.split('/')[-1].split('_')[0]  # Вытаскиваем из ссылки часть для названия
            name_file_passport = f'{href}_Паспорт.pdf'

            response = requests.get(link_download_passport, verify=True)
            status_code = response.status_code
            assert status_code == 200, f'Код ответа от ссылки по скачиванию паспорта - ({status_code})'
            self.find_element(ProductPageLocators.LOCATOR_BTN_SAVE_PASSPORT).click()
            self.checking_the_download_document_in_the_download_folder(name_file_passport)
            self.delete_file_by_name_in_download_folder(name_file_passport)

    def click_btn_certificate(self):
        """Клик по кнопке Сертификат - выпадающее меню"""
        with allure.step('Клик по кнопке Сертификат - выпадающее меню'):
            btn_doc = self.find_element(ProductPageLocators.LOCATOR_BTN_DOCUMENTATION)
            self.scroll_to(btn_doc)
            self.waiting_element_is_visibility_on_the_page(ProductPageLocators.LOCATOR_BTN_CERTIFICATE)
            btn_certificate = self.find_element(ProductPageLocators.LOCATOR_BTN_CERTIFICATE)
            btn_certificate.click()
            self.waiting_element_is_visibility_on_the_page(ProductPageLocators.LOCATOR_BTN_SAVE_CERTIFICATE, sec=5)

    def save_name_certificate(self) -> str:
        """Сохранение названия сертификата"""
        with allure.step('Сохранение названия сертификата'):
            self.waiting_element_is_visibility_on_the_page(ProductPageLocators.LOCATOR_LINK_NAME_CERTIFICATE, sec=5)
            name_certificate = self.find_element(ProductPageLocators.LOCATOR_LINK_NAME_CERTIFICATE).text
            return name_certificate

    def download_certificate(self):
        """Скачивание сертификата"""
        with allure.step('Скачивание сертификата'):
            link_download_certificate = self.find_element(
                ProductPageLocators.LOCATOR_BTN_SAVE_CERTIFICATE).get_attribute('href')

            href_contains = link_download_certificate.split('/')[5].split('-')[0]
            name_file_certificate = self.save_name_certificate()
            name_file_certificate = name_file_certificate.split('_pdf')[0]
            name_file_certificate = f'{name_file_certificate.replace("_", ".")}.pdf'
            name_file_certificate = f'{href_contains}-{name_file_certificate[:27]}_{name_file_certificate[28:]}'

            status_code = requests.get(link_download_certificate).status_code
            assert status_code == 200, f'Код ответа от ссылки по скачиванию сертификата - ({status_code})'
            self.find_element(ProductPageLocators.LOCATOR_BTN_SAVE_CERTIFICATE).click()
            self.delete_file_by_name_in_download_folder(name_file_certificate)
            self.checking_the_download_document_in_the_download_folder(name_file_certificate)
            self.delete_file_by_name_in_download_folder(name_file_certificate)

    def click_btn_replacement_letter(self):
        """Клик по кнопке Письмо о замене"""
        with allure.step('Клик по кнопке Письмо о замене'):
            btn_doc = self.find_element(ProductPageLocators.LOCATOR_BTN_DOCUMENTATION)
            self.scroll_to(btn_doc)
            self.waiting_element_is_visibility_on_the_page(ProductPageLocators.LOCATOR_BTN_REPLACEMENT_LETTER)
            btn_certificate = self.find_element(ProductPageLocators.LOCATOR_BTN_REPLACEMENT_LETTER)
            btn_certificate.click()
            self.waiting_element_is_visibility_on_the_page(ProductPageLocators.LOCATOR_BTN_SAVE_REPLACEMENT_LETTER,
                                                           sec=5)

    def save_name_replacement_letter(self) -> str:
        with allure.step('Сохранение имени письма о замене'):
            self.waiting_element_is_visibility_on_the_page(ProductPageLocators.LOCATOR_LINK_NAME_REPLACEMENT_LETTER,
                                                           sec=5)
            name_replacement_letter = self.find_element(ProductPageLocators.LOCATOR_LINK_NAME_REPLACEMENT_LETTER).text
            return name_replacement_letter

    def download_replacement_letter(self):
        """Скачивание письма о замене"""
        with allure.step('Скачивание письма о замене'):
            name_replacement_letter = self.save_name_replacement_letter()
            name_replacement_letter = f'{name_replacement_letter.replace("_", ".")}'

            link_replacement_letter = self.find_element(
                ProductPageLocators.LOCATOR_BTN_SAVE_REPLACEMENT_LETTER).get_attribute('href')
            status_code = requests.get(link_replacement_letter).status_code
            assert status_code == 200, f'Код ответа от ссылки по скачиванию письма о замене - ({status_code})'
            self.find_element(ProductPageLocators.LOCATOR_BTN_SAVE_REPLACEMENT_LETTER).click()
            self.checking_the_download_document_in_the_download_folder(name_replacement_letter)
            self.delete_file_by_name_in_download_folder(name_replacement_letter)
