import time

import allure

from base_page.base_page import BasePage
from open_pages.purchase_order_page.purchase_order_page_locators import PurchaseOrderPageLocators


@allure.feature('Страница Заявка на покупку')
class PurchaseOrderPage(BasePage):
    """Страница Заявка на покупку"""

    def the_selected_distributor_should_be_displayed(self, selected_distributor: str):
        """Должен отображаться выбранный дистрибьютор"""
        name_distributor = self.find_element(PurchaseOrderPageLocators.LOCATOR_DISTRIBUTOR_NAME).text
        assert selected_distributor in name_distributor, \
            f'Имя выбранного дистрибьютора - ({selected_distributor}) не совпадает с именем, ' \
            f'которое отображается на странице - ({name_distributor})'

    def should_be_status_pending_response(self):
        """Должен быть статус менеджера дитрибьютора Ожидает ответа"""
        desired_status = 'Ожидает ответа'
        status_on_the_page = self.find_element(
            PurchaseOrderPageLocators.LOCATOR_DISTRIBUTOR_MANAGER_STATUS).text.strip()
        assert status_on_the_page == desired_status, \
            f'Статус менеджера дистрибьютора на странице - ({status_on_the_page}) не соответствует ожидаемому статусу- ' \
            f'({desired_status})'

    def application_status_should_be_new(self):
        """Статус заявки должен быть Новая"""
        desired_status = 'Новая'
        status_application_on_the_page = self.find_element(PurchaseOrderPageLocators.LOCATOR_STATUS_APPLICATION).text
        assert status_application_on_the_page == desired_status, \
            f'Статус заявки на странице - ({status_application_on_the_page}) не соответствует ожидаемому статусу - ' \
            f'({desired_status})'

    def store_total_price(self) -> float:
        """Сохранение итоговой стоимости"""
        total_price = self.find_element(PurchaseOrderPageLocators.LOCATOR_SPAN_TOTAL_PRICE).text
        total_price = total_price.replace(' ', '')
        return float(total_price)

    def availability_check(self):
        """Проверка наличия"""
        button_check_availability = self.find_element(PurchaseOrderPageLocators.LOCATOR_BUTTON_CHECK_AVAILABILITY)
        self.click_js(button_check_availability)
        self.waiting_element_is_visibility_on_the_page(PurchaseOrderPageLocators.LOCATOR_TD_AVAILABILITY)
        availability_list = self.driver.find_elements(*PurchaseOrderPageLocators.LOCATOR_TD_AVAILABILITY)
        for availability in availability_list:
            availability_text = availability.text
            assert availability_text != '', \
                f'Строка №{availability.index(availability) + 1} наличия пустая - ({availability_text})'

    def checking_the_desired_payment_terms(self, selected_payment_terms: str):
        """Проверка желаемых условий оплаты
        selected_payment_terms - выбранные условия оплаты
        """
        desired_payment_terms = self.find_element(PurchaseOrderPageLocators.LOCATOR_DESIRED_PAYMENT_TERMS).text.strip()
        selected_payment_terms = selected_payment_terms.strip()
        assert desired_payment_terms == selected_payment_terms, \
            f'Желаемые условия оплаты на странице Заявка на покупку - ({desired_payment_terms}) не соответствуют ' \
            f'выбранным условиям оплаты - ({selected_payment_terms})'

    def checking_the_desired_delivery_conditions(self, selected_delivery_terms: str):
        """Проверка желаемых условий доставки
        selected_delivery_terms - выбранные условия доставки
        """
        desired_delivery_conditions = self.find_element(
            PurchaseOrderPageLocators.LOCATOR_DESIRED_DELIVERY_TERMS).text.strip()
        selected_delivery_terms = selected_delivery_terms.strip()
        assert desired_delivery_conditions == selected_delivery_terms, \
            f'Желаемые условия доставки на странице Заявка на покупку - ({desired_delivery_conditions}) ' \
            f'не соответствуют выбранным условиям доставки - ({selected_delivery_terms})'

    def check_order_comment(self, entered_comment_to_the_order: str):
        """Проверка комментария к заказу
        entered_comment_to_the_order - введенный комментарий
        """
        order_comment_on_the_page = self.find_element(PurchaseOrderPageLocators.LOCATOR_ORDER_COMMENT).text.strip()
        entered_comment_to_the_order = entered_comment_to_the_order.strip()
        assert order_comment_on_the_page == entered_comment_to_the_order, \
            f'Комментарий к заказу на странице Заявка на покупку - ({order_comment_on_the_page}) не соответствует' \
            f'введенному комментарию - ({entered_comment_to_the_order})'

    def check_shipping_comment(self, entered_shipping_comment: str):
        """Проверка комментария к доставке
        entered_shipping_comment - введенный комментарий к доставке
        """
        shipping_comment_on_the_page = self.find_element(
            PurchaseOrderPageLocators.LOCATOR_SHIPPING_COMMENT).text.strip()
        entered_shipping_comment = entered_shipping_comment.strip()
        assert shipping_comment_on_the_page == entered_shipping_comment, \
            f'Комментарий к доставке на странице Заявка на покупку - ({shipping_comment_on_the_page}) не соответствует' \
            f'введенному комментарию к доставке - ({entered_shipping_comment})'

    def check_delivery_address(self, entered_delivery_address: str):
        """Проверка адреса доставки
        entered_delivery_address - введенный адрес доставки
        """
        delivery_address_on_the_page = self.find_element(
            PurchaseOrderPageLocators.LOCATOR_DELIVERY_ADDRESS).text.strip()
        entered_delivery_address = entered_delivery_address.strip()
        assert entered_delivery_address in delivery_address_on_the_page, \
            f'Адрес доставки на странице Заявка на покупку - ({delivery_address_on_the_page}) не соответствует ' \
            f'введенному адресу - ({entered_delivery_address})'

    def store_indirect_client_organization(self) -> str:
        """Сохранение организации непрямого клиента"""
        organization = self.find_element(PurchaseOrderPageLocators.LOCATOR_ORGANIZATION_IN_THE_ACCOUNT).text.strip()
        return organization

    def store_autor_application(self) -> str:
        """Сохранение имени пользователя непрямого клиента"""
        name = self.find_element(PurchaseOrderPageLocators.LOCATOR_AUTOR_APPLICATION).text.strip()
        return name

    def application_status_to_be_processed(self):
        """Статус заявки должен быть Обработана"""
        true_status = 'Обработана'
        status_on_the_page = self.find_element(PurchaseOrderPageLocators.LOCATOR_STATUS_APPLICATION).text.strip()
        assert true_status == status_on_the_page, \
            f'Статус заявки на странице - ({status_on_the_page}) не соответствует ожидаемомму статусу - ({true_status})'

    def must_be_supplied_from_the_distributor_warehouse(self):
        """Должна быть поставка со склада дистрибьютора"""
        true_delivery_condition = 'Поставка со склада дистрибьютора'
        delivery_condition = self.find_element(PurchaseOrderPageLocators.LOCATOR_DELIVERY_CONDITION).text.strip()
        assert delivery_condition == true_delivery_condition, \
            f'Условия поставки не равны - ({true_delivery_condition}); ' \
            f'условия поставки на странице - ({delivery_condition})'

    def click_button_cargo_received(self):
        """Груз получен"""
        true_last_modified_status = 'В заявке подтверждена доставка груза'

        button_cargo_received = self.find_element(PurchaseOrderPageLocators.LOCATOR_BUTTON_CARGO_RECEIVED)
        self.click_js(button_cargo_received)
        time.sleep(1)
        self.waiting_element_is_visibility_located_dom(PurchaseOrderPageLocators.LOCATOR_BODY, sec=90)
        button_history_of_changes = self.find_element(PurchaseOrderPageLocators.LOCATOR_BUTTON_HISTORY_OF_CHANGES)
        self.scroll_to(button_history_of_changes)
        time.sleep(0.5)
        self.click_js(button_history_of_changes)
        self.waiting_element_is_visibility_located_dom(PurchaseOrderPageLocators.LOCATOR_OPEN_CHANGE_HISTORY_LIST)
        self.waiting_element_is_visibility_on_the_page(PurchaseOrderPageLocators.LOCATOR_LAST_MODIFIED_STATUS, sec=5)
        last_modified_status_on_page = self.find_element(
            PurchaseOrderPageLocators.LOCATOR_LAST_MODIFIED_STATUS).text.strip()
        assert last_modified_status_on_page == true_last_modified_status, \
            f'Статус истории изменений на странице - ({last_modified_status_on_page}) не соответствует ' \
            f'ожидаемому - ({true_last_modified_status})'
