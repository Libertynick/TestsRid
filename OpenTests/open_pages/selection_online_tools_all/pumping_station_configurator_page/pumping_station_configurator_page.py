import time

import allure
from selenium.common import TimeoutException

from base_page.base_page import BasePage
from open_pages.selection_online_tools_all.pumping_station_configurator_page.pumping_station_configurator_locators \
    import PumpingStationConfiguratorLocators


@allure.feature('Конфигуратор Насосных станций')
class PumpingStationConfiguratorPage(BasePage):
    """Конфигуратор Насосных станций"""

    def configurator_description_should_not_be_empty(self):
        """Описание конфигуратора не должно быть пустым"""
        with allure.step('Описание конфигуратора не должно быть пустым'):
            self.waiting_element_is_visibility_on_the_page(
                PumpingStationConfiguratorLocators.LOCATOR_DESCRIPTION_CONFIGURATOR, sec=5)
            description_conf = self.find_element(
                PumpingStationConfiguratorLocators.LOCATOR_DESCRIPTION_CONFIGURATOR).text
            assert description_conf != '', f'Описание конфигуратора пустое - ({description_conf})'

    def switch_to_frame_configurator(self):
        """Переключение во Фрэйм Конфигуратор"""
        with allure.step('Переключение во Фрэйм Конфигуратор'):
            self.waiting_element_is_visibility_located_dom(
                PumpingStationConfiguratorLocators.LOCATOR_FRAME_CONFIGURATOR)
            self.switch_to_frame(PumpingStationConfiguratorLocators.LOCATOR_FRAME_CONFIGURATOR)

    def switch_to_frame_selection_of_pumping_station(self):
        """Переключение во фрэйм Подбор насосной станции"""
        with allure.step('Переключение во фрэйм Подбор насосной станции'):
            self.waiting_element_is_visibility_located_dom(
                PumpingStationConfiguratorLocators.LOCATOR_FRAME_SELECTION_OF_PUMPING_STATION)
            self.switch_to_frame(PumpingStationConfiguratorLocators.LOCATOR_FRAME_SELECTION_OF_PUMPING_STATION)

    def activating_system_type_drop_down_list(self):
        """Активация выпадающего списка тип системы"""
        with allure.step('Активация выпадающего списка тип системы'):
            self.expecting_clickability(PumpingStationConfiguratorLocators.LOCATOR_BTN_DROP_MENU_SYSTEM_TYPE, sec=5)
            btn_drop_menu_system_type = self.find_element(
                PumpingStationConfiguratorLocators.LOCATOR_BTN_DROP_MENU_SYSTEM_TYPE)
            self.click_js(btn_drop_menu_system_type)
            self.waiting_element_is_visibility_on_the_page(
                PumpingStationConfiguratorLocators.LOCATOR_ITEM_SYSTEM_TYPE_CIRCULATION)

    def system_type_selection(self, system_type: str):
        """Выбор типа системы"""
        with allure.step(f'Выбор типа системы {system_type}'):
            self.waiting_element_is_visibility_on_the_page(
                PumpingStationConfiguratorLocators.locator_system_type(system_type))
            btn_system_type = self.find_element(PumpingStationConfiguratorLocators.locator_system_type(system_type))
            btn_system_type.click()
            selected_system_type = self.find_element(
                PumpingStationConfiguratorLocators.LOCATOR_SELECTED_SYSTEM_TYPE).text
            assert selected_system_type == system_type, \
                f'Выбранный тип системы - ({selected_system_type}) не соответствует ожидаемому - ({system_type})'

    def entering_system_flow(self, value_system_flow: str):
        """Ввод расхода системы"""
        with allure.step(f'Ввод расхода системы {value_system_flow}'):
            self.waiting_element_is_visibility_on_the_page(PumpingStationConfiguratorLocators.LOCATOR_INPUT_SYSTEM_FLOW)
            input_system_flow = self.find_element(PumpingStationConfiguratorLocators.LOCATOR_INPUT_SYSTEM_FLOW)
            input_system_flow.send_keys(value_system_flow)
            entered_system_flow = input_system_flow.get_attribute('value')
            assert entered_system_flow == value_system_flow, \
                f'Введенное значение расзода системы - ({entered_system_flow}) не соответствует ожидаемому ' \
                f'- ({value_system_flow})'

    def entering_required_pressure(self, value_required_pressure: str):
        """Ввод требуемого напора"""
        with allure.step(f'Ввод требуемого напора {value_required_pressure}'):
            self.waiting_element_is_visibility_on_the_page(
                PumpingStationConfiguratorLocators.LOCATOR_INPUT_REQUIRED_PRESSURE)
            input_required_pressure = self.find_element(
                PumpingStationConfiguratorLocators.LOCATOR_INPUT_REQUIRED_PRESSURE)
            input_required_pressure.send_keys(value_required_pressure)
            entered_required_pressure = input_required_pressure.get_attribute('value')
            assert entered_required_pressure == value_required_pressure, \
                f'Введенное значение требуемого напора - ({entered_required_pressure}) не соответствует ожидаемому ' \
                f'- ({value_required_pressure})'

    def activation_of_control_cabinet_drop_down_menu(self):
        """Активация выпадающего меню шкафа управления"""
        with allure.step('Активация выпадающего меню шкафа управления'):
            self.expecting_clickability(PumpingStationConfiguratorLocators.LOCATOR_BTN_CONTROL_CABINET_DROP_DOWN_MENU,
                                        sec=5)
            btn_drop_menu = self.find_element(
                PumpingStationConfiguratorLocators.LOCATOR_BTN_CONTROL_CABINET_DROP_DOWN_MENU)
            self.click_js(btn_drop_menu)
            self.waiting_element_is_visibility_on_the_page(
                PumpingStationConfiguratorLocators.LOCATOR_ITEM_C_R_P_FOR_EACH_PUMP_IN_CONTROL_CABINET)

    def selection_of_control_cabinet_c_r_p_for_each_pump(self):
        """Выбор шкафа управления ч р п на каждый насос"""
        with allure.step('Выбор шкафа управления ч р п на каждый насос'):
            expected_selection_of_control_cabinet = 'ЧРП на каждый насос'
            self.waiting_element_is_visibility_on_the_page(
                PumpingStationConfiguratorLocators.LOCATOR_ITEM_C_R_P_FOR_EACH_PUMP_IN_CONTROL_CABINET)
            btn_c_r_p_for_each_pump = self.find_element(
                PumpingStationConfiguratorLocators.LOCATOR_ITEM_C_R_P_FOR_EACH_PUMP_IN_CONTROL_CABINET)
            btn_c_r_p_for_each_pump.click()
            selected_item = self.find_element(PumpingStationConfiguratorLocators.LOCATOR_SELECTED_ITEM_CONTROL_CABINET
                                              ).text
            assert selected_item == expected_selection_of_control_cabinet, \
                f'Выбранное значение в Шкаф управления - ({selected_item}) не соответствует ожидаемому ' \
                f'- ({expected_selection_of_control_cabinet})'

    def activation_total_number_of_pumps_drop_down_menu(self):
        """Активация выпадающего меню Общее количество насосов"""
        with allure.step('Активация выпадающего меню Общее количество насосов'):
            self.expecting_clickability(PumpingStationConfiguratorLocators.LOCATOR_BTN_DROP_MENU_TOTAL_NUMBER_OF_PUMPS,
                                        sec=5)
            btn_drop_menu = self.find_element(
                PumpingStationConfiguratorLocators.LOCATOR_BTN_DROP_MENU_TOTAL_NUMBER_OF_PUMPS)
            btn_drop_menu.click()
            self.waiting_element_is_visibility_on_the_page(
                PumpingStationConfiguratorLocators.LOCATOR_LIST_DROP_DOWN_MENU_TOTAL_NUMBER_OF_PUMPS)

    def selecting_a_value_in_menu_total_number_of_pumps(self, value_total_number_of_pumps: str):
        """Выбор значения в меню Общее количество насосов"""
        with allure.step(f'Выбор значения {value_total_number_of_pumps} в меню Общее количество насосов'):
            self.waiting_element_is_visibility_on_the_page(
                PumpingStationConfiguratorLocators.locator_item_drop_down_menu_total_number_of_pumps(
                    value_total_number_of_pumps))
            item_value = self.find_element(
                PumpingStationConfiguratorLocators.locator_item_drop_down_menu_total_number_of_pumps(
                    value_total_number_of_pumps))
            item_value.click()
            selected_item = self.find_element(
                PumpingStationConfiguratorLocators.LOCATOR_SELECTED_ITEM_TOTAL_NUMBER_OF_PUMPS).text
            assert selected_item == value_total_number_of_pumps, \
                f'Выбранное значение в меню Общее количество насосов - ({selected_item}) не соответствует ожидаемому ' \
                f'значению - ({value_total_number_of_pumps})'

    def check_box_selection_without_taking_into_account_losses_on_equipment_should_not_be_selected(self):
        """Чек бокс Подбор без учета потерь на оборудовании должен быть не выбран"""
        with allure.step('Чек бокс Подбор без учета потерь на оборудовании должен быть не выбран'):
            self.waiting_element_is_visibility_on_the_page(
                PumpingStationConfiguratorLocators.LOCATOR_CHECKBOX_SELECTION_WITHOUT_TAKING_INTO_ACCOUNT_EQUIPMENT_LOSSES)
            check_box = self.find_element(
                PumpingStationConfiguratorLocators.LOCATOR_CHECKBOX_SELECTION_WITHOUT_TAKING_INTO_ACCOUNT_EQUIPMENT_LOSSES
            ).get_attribute('aria-checked')
            assert check_box == 'false', f'Чек-бокс "Подбор без учета потерь на оборудовании" выбран. ' \
                                         f'Значение - ({check_box})'

    def check_box_selection_without_taking_into_account_losses_on_equipment_must_be_selected(self):
        """Чек бокс Подбор без учета потерь на оборудовании должен быть выбран"""
        with allure.step('Чек бокс Подбор без учета потерь на оборудовании должен быть выбран'):
            self.waiting_element_is_visibility_on_the_page(
                PumpingStationConfiguratorLocators.LOCATOR_CHECKBOX_SELECTION_WITHOUT_TAKING_INTO_ACCOUNT_EQUIPMENT_LOSSES)
            check_box = self.find_element(
                PumpingStationConfiguratorLocators.LOCATOR_CHECKBOX_SELECTION_WITHOUT_TAKING_INTO_ACCOUNT_EQUIPMENT_LOSSES
            ).get_attribute('aria-checked')
            assert check_box == 'true', f'Чек-бокс "Подбор без учета потерь на оборудовании" не выбран. ' \
                                        f'Значение - ({check_box})'

    def click_btn_region_selection(self):
        """Клик по кнопке Выбор региона"""
        with allure.step('Клик по кнопке Выбор региона'):
            try:
                self.scroll_to_height()
                self.waiting_element_is_visibility_located_dom(
                    PumpingStationConfiguratorLocators.LOCATOR_BTN_MENU_CHOOSE_REGION, sec=5)
            except TimeoutException:
                self.driver.execute_script("document.body.style.zoom='80%'")
                time.sleep(1)
                self.waiting_element_is_visibility_located_dom(
                    PumpingStationConfiguratorLocators.LOCATOR_BTN_MENU_CHOOSE_REGION, sec=5)
            btn_selection_region = self.find_element(PumpingStationConfiguratorLocators.LOCATOR_BTN_MENU_CHOOSE_REGION)
            self.scroll_to(btn_selection_region)
            self.click_js(btn_selection_region)
            self.waiting_element_is_visibility_located_dom(
                PumpingStationConfiguratorLocators.LOCATOR_DROP_DOWN_MENU_REGION_LIST, sec=10)

    def select_region(self, name_region: str):
        """Выбор региона"""
        with allure.step(f'Выбор региона {name_region}'):
            self.click_btn_region_selection()
            self.waiting_element_is_visibility_located_dom(
                PumpingStationConfiguratorLocators.locator_region_button(name_region), sec=10)
            btn_region = self.find_element(PumpingStationConfiguratorLocators.locator_region_button(name_region))
            self.click_js(btn_region)
            self.waiting_element_is_visibility_on_the_page(PumpingStationConfiguratorLocators.LOCATOR_SELECTED_REGION)
            selected_region = self.find_element(PumpingStationConfiguratorLocators.LOCATOR_SELECTED_REGION).text
            assert selected_region == name_region, f'Выбранный регион - ({selected_region}) не соответствует ' \
                                                   f'ожидаемому - ({name_region})'

    def click_btn_select(self):
        """Клик по кнопке Подобрать"""
        with allure.step('Клик по кнопке Подобрать'):
            self.expecting_clickability(PumpingStationConfiguratorLocators.LOCATOR_BTN_SELECT)
            btn_select = self.find_element(PumpingStationConfiguratorLocators.LOCATOR_BTN_SELECT)
            scroll_to_elem = self.find_element(PumpingStationConfiguratorLocators.LOCATOR_SELECTED_ITEM_CONTROL_CABINET)
            self.scroll_to(scroll_to_elem)
            self.expecting_clickability(PumpingStationConfiguratorLocators.LOCATOR_BTN_SELECT)
            btn_select.click()
            self.waiting_for_loader_processing_on_page(PumpingStationConfiguratorLocators.LOCATOR_SPINNER_SELECT)
            self.waiting_element_is_visibility_located_dom(PumpingStationConfiguratorLocators.LOCATOR_TR_RESULT_SELECT,
                                                           sec=10)

    def name_of_selected_module_must_not_be_empty(self):
        """Название подобранного модуля не должно быть пустым"""
        with allure.step('Название подобранного модуля не должно быть пустым'):
            self.waiting_element_is_visibility_located_dom(
                PumpingStationConfiguratorLocators.LOCATOR_COLUMN_WITH_NAME_OF_SELECTION_RESULT_MODULE, sec=10)
            name_of_selected_module = self.find_elements(
                PumpingStationConfiguratorLocators.LOCATOR_COLUMN_WITH_NAME_OF_SELECTION_RESULT_MODULE)
            for name in name_of_selected_module:
                name_text = name.text
                assert name_text != '', f'Название подобранного модуля пустое - ({name_text})'
