import time

import allure

from base_page.base_page import BasePage
from base_page.base_page_locators import BaseOpenLocators
from open_pages.cart_page.cart_locators import CartLocators
from open_pages.selection_online_tools_all.cool_confi.cool_config_locators import CoolConfigLocators, \
    CoolingDiagramsLocators, CoolingCompressors, CoolConfigExpansionValvesLocators, CoolConfigExpansionValvesLocators, \
    CoolConfigNonReturnValvesLocators, CoolConfigSelectPipelinesLocators

"""Страница подбора Cool Config"""


@allure.feature('Основная страница подбора Cool Config')
class CoolConfigPage(BasePage):
    """Основная страница подбора Cool Config"""

    def click_menu_to_cooling_diagrams(self):
        """Переход на страницу подбора Схемы Холодснабжения"""
        with allure.step('Переход на страницу подбора Схемы Холодснабжения'):
            self.expecting_clickability(CoolConfigLocators.LOCATOR_MENU_CHOOSE_COOLING_DIAGRAMS, sec=120)
            click_to_cooling_diagrams = self.find_element(CoolConfigLocators.LOCATOR_MENU_CHOOSE_COOLING_DIAGRAMS)
            self.driver.execute_script("arguments[0].click()", click_to_cooling_diagrams)
            self.expecting_clickability(CoolingDiagramsLocators.LOCATOR_BTN_SELECT_COMPRESSORS_AND_PACKING)

    def click_menu_compressors(self):
        """Переход на страницу подбора Компрессоров"""
        with allure.step('Переход на страницу подбора Компрессоров'):
            self.expecting_clickability(CoolConfigLocators.LOCATOR_MENU_CHOOSE_COMPRESSORS, sec=120)
            click_to_menu_compressors = self.find_element(CoolConfigLocators.LOCATOR_MENU_CHOOSE_COMPRESSORS)
            self.driver.execute_script("arguments[0].click()", click_to_menu_compressors)
            self.expecting_clickability(CoolingCompressors.LOCATOR_BTN_SELECT_COMPRESSOR)

    def open_menu_expansion_valves(self):
        """Открытие меню Расширительные клапаны"""
        with allure.step('Открытие меню Расширительные клапаны'):
            self.expecting_clickability(CoolConfigLocators.LOCATOR_MENU_CHOOSE_EXPANSION_VALVES, sec=120)
            btn_drop_menu_expansion_valves = self.find_element(
                CoolConfigLocators.LOCATOR_MENU_CHOOSE_EXPANSION_VALVES)
            btn_drop_menu_expansion_valves.click()
            with allure.step('Ожидание появления выпадающего меню Расширительные клапаны'):
                self.waiting_element_is_visibility_on_the_page(CoolConfigLocators.LOCATOR_BTN_CHECK_VALVES_IN_DROP_MENU,
                                                               sec=5)

    def click_menu_selection_of_expansion_valves(self):
        """Переход на страницу подбора Расширительных клапанов"""
        with allure.step('Переход на страницу подбора Расширительных клапанов'):
            self.open_menu_expansion_valves()
            self.expecting_clickability(CoolConfigLocators.LOCATOR_BTN_EXPANSION_VALVES_IN_DROP_MENU, sec=5)
            btn_expansion_valves = self.find_element(CoolConfigLocators.LOCATOR_BTN_EXPANSION_VALVES_IN_DROP_MENU)
            btn_expansion_valves.click()
            self.expecting_clickability(CoolConfigExpansionValvesLocators.LOCATOR_BTN_SELECT_EXPANSION_VALVES)

    def click_menu_non_return_valve_selection(self):
        """Переход на страницу подбора Обратных клапанов"""
        with allure.step('Переход на страницу подбора Обратных клапанов'):
            self.open_menu_expansion_valves()
            self.expecting_clickability(CoolConfigLocators.LOCATOR_BTN_CHECK_VALVES_IN_DROP_MENU, sec=5)
            btn_valve_selection = self.find_element(
                CoolConfigLocators.LOCATOR_BTN_CHECK_VALVES_IN_DROP_MENU)
            btn_valve_selection.click()
            self.waiting_element_is_visibility_located_dom(
                CoolConfigNonReturnValvesLocators.LOCATOR_BTN_CHECK_VALVES_ACTIVE, sec=5)

    def click_menu_pipelines(self):
        """Переход на страницу подбора Трубопроводы"""
        with allure.step('Переход на страницу подбора Трубопроводы'):
            self.expecting_clickability(CoolConfigLocators.LOCATOR_MENU_CHOOSE_PIPELINES, sec=120)
            click_menu_pipelines = self.find_element(
                CoolConfigLocators.LOCATOR_MENU_CHOOSE_PIPELINES)
            self.driver.execute_script("arguments[0].click()", click_menu_pipelines)
            self.waiting_element_is_visibility_on_the_page(
                CoolConfigSelectPipelinesLocators.LOCATOR_BTN_PIPELINES_SELECT)


@allure.feature('Страница подбора Схемы Холодоснабжения')
class CoolingDiagramsPage(BasePage):
    """Страница подбора Схемы Холодоснабжения"""

    def click_btn_select_compressors_and_packing(self):
        """Клик по кнопке Подобрать компрессоры и Обвязку"""
        with allure.step('Клик по кнопке Подобрать компрессоры и Обвязку'):
            click_btn_select_compressors_and_packing = (
                self.find_element(CoolingDiagramsLocators.LOCATOR_BTN_SELECT_COMPRESSORS_AND_PACKING))
            self.driver.execute_script("arguments[0].click()", click_btn_select_compressors_and_packing)
            self.waiting_element_is_visibility_located_dom(CoolingDiagramsLocators.LOCATOR_TABLE_WITH_RESULT)

    def click_btn_download_pdf(self):
        """Кнопка Скачать PDF на странице Схемы Холодснабжения"""
        with allure.step('Клик по кнопке Скачать PDF на странице Схемы Холодснабжения'):
            # downloads_path = str(Path.home() / "Downloads")
            name_file = f'PDF обвязки компрессоров.pdf'  # expect
            self.delete_file_by_name_in_download_folder(name_file)

            click_btn_download_pdf = self.find_element(CoolingDiagramsLocators.LOCATOR_BTN_DOWNLOAD_PDF)
            self.driver.execute_script("arguments[0].click()", click_btn_download_pdf)
            time.sleep(1)
            self.checking_the_download_document_in_the_download_folder(name_file)
            self.delete_file_by_name_in_download_folder(name_file)

    def click_btn_download_xls(self):
        """Кнопка Скачать XLS на странице Схемы Холодоснабжения"""
        with allure.step('Клик по кнопке Скачать XLS на странице Схемы Холодоснабжения'):
            # downloads_path = str(Path.home() / "Downloads")
            name_file = 'Excel обвязки компрессоров.xlsx'  # expect

            self.delete_file_by_name_in_download_folder(name_file)
            click_btn_download_xls = self.find_element(CoolingDiagramsLocators.LOCATOR_BTN_DOWNLOAD_XLS)
            self.driver.execute_script("arguments[0].click()", click_btn_download_xls)
            time.sleep(1)
            self.checking_the_download_document_in_the_download_folder(name_file)
            self.delete_file_by_name_in_download_folder(name_file)

    def click_btn_generate_list_of_code(self):
        """Нажать на кнопку Сгенерировать список кодов"""
        with allure.step('Нажать на кнопку Сгенерировать список кодов'):
            click_btn_generate_list_of_code = self.find_element(CoolingDiagramsLocators.LOCATOR_GENERATE_LIST_OF_CODES)
            self.driver.execute_script("arguments[0].click()", click_btn_generate_list_of_code)
            self.waiting_element_is_visibility_located_dom(CoolingDiagramsLocators.LOCATOR_BTN_ADD_CODE_IN_SALES,
                                                           sec=120)
            assert f'Список кодов не был сгенерирован'

    def click_btn_add_code_in_sales(self):
        """Нажать на кнопку Добавить коды в Корзину"""
        with allure.step('Нажать на кнопку Добавить коды в Корзину'):
            click_btn_add_code_in_sales = self.find_element(CoolingDiagramsLocators.LOCATOR_BTN_ADD_CODE_IN_SALES)
            self.driver.execute_script("arguments[0].click()", click_btn_add_code_in_sales)
            self.switching_window(-1)
            self.waiting_element_is_visibility_on_the_page(CartLocators.LOCATOR_HEADER_SHARED_YOUR_CART_WITH_YOU)


@allure.feature('Страница подбора Компрессоры')
class CoolingCompressorsPage(BasePage):
    """Страница подбора Компрессоры"""

    def click_btn_select_compressor(self):
        """Клик по кнопке Подобрать"""
        with allure.step('Клик по кнопке Подобрать'):
            click_btn_select_compressor = self.find_element(CoolingCompressors.LOCATOR_BTN_SELECT_COMPRESSOR)
            self.driver.execute_script("arguments[0].click()", click_btn_select_compressor)
            self.waiting_element_is_visibility_located_dom(CoolingCompressors.LOCATOR_BTN_DOWNLOAD_FIRST, sec=120)

    def save_first_num_code(self) -> str:
        """Сохранение первого кодового номера в списке подбора"""
        with allure.step('Сохранение первого кодового номера в списке подбора'):
            num_code = self.find_element(CoolingCompressors.LOCATOR_NUM_CODE_FIRST)
            return num_code.text

    def save_first_num_model(self) -> str:
        """Сохранение номера модели у первого подобранного компрессора"""
        with allure.step('Сохранение номера модели у первого подобранного компрессора'):
            self.waiting_element_is_visibility_located_dom(CoolingCompressors.LOCATOR_NUM_MODEL_FIRST, sec=5)
            num_model = self.find_element(CoolingCompressors.LOCATOR_NUM_MODEL_FIRST).text
            return num_model

    def click_btn_download_first_code(self, num_model: str):
        """Клик по кнопке Скачать у первого кода"""
        with allure.step('Клик по кнопке Скачать у первого кода'):
            name_file = f'Компрессор Ридан {num_model}.pdf'  # expect
            self.delete_file_by_name_in_download_folder(name_file)

            click_btn_download_first_code = self.find_element(CoolingCompressors.LOCATOR_BTN_DOWNLOAD_FIRST)
            self.driver.execute_script("arguments[0].click()", click_btn_download_first_code)
            time.sleep(1)
            self.checking_the_download_document_in_the_download_folder(name_file)
            self.delete_file_by_name_in_download_folder(name_file)

    def click_btn_open(self):
        """Клик по кнопке Открыть у первого кода в списке"""
        with allure.step('Клик по кнопке Открыть у первого кода в списке'):
            btn_open = self.find_element(CoolingCompressors.LOCATOR_BTN_OPEN_FIRST)
            self.driver.execute_script("arguments[0].click()", btn_open)
            self.switching_window(-1)
            self.waiting_element_is_visibility_on_the_page(CoolingCompressors.LOCATOR_PAGE_OPENING_CHECK)
            time.sleep(1)
            assert f'Не открытлась страница с информацией о товаре при нажатии на кнопку Открыть Компрессора'

    def switch_to_frame_compressors(self):
        """Фрейм таблицы компрессоров"""
        with allure.step('Фрейм таблицы компрессоров'):
            iframe = self.find_element(CoolingCompressors.LOCATOR_FRAME)
            self.driver.switch_to.frame(iframe)

    def click_btn_buy(self):
        """Клик по кнопке купить у первого кода"""
        with allure.step('Клик по кнопке купить у первого кода'):
            self.switch_to_frame_compressors()
            self.waiting_element_is_visibility_located_dom(CoolingCompressors.LOCATOR_BTN_SELECT_COMPRESSOR)
            time.sleep(0.5)
            btn_buy = self.find_element(CoolingCompressors.LOCATOR_BTN_BOUGHT_FIRST)
            self.click_js(btn_buy)
            time.sleep(1)
            self.switching_window(-1)
            self.waiting_element_is_visibility_on_the_page(CartLocators.LOCATOR_BTN_ADD_SALES)


@allure.feature('Страница подбора Расширительных клапанов')
class CoolConfigExpansionValvesPage(BasePage):
    """Страница подбора Расширительных клапанов"""

    def click_btn_select_expansion_valves(self):
        """Кнопка подобрать расширительные клапаны"""
        with allure.step('Клик по кнопке подобрать расширительные клапаны'):
            click_btn_select_expansion_valves = self.find_element(
                CoolConfigExpansionValvesLocators.LOCATOR_BTN_SELECT_EXPANSION_VALVES)
            self.driver.execute_script("arguments[0].click()", click_btn_select_expansion_valves)
            self.waiting_element_is_visibility_on_the_page(CoolConfigExpansionValvesLocators.LOCATOR_BTN_OPEN_FIRST)
            assert f'Не найдена кнопка Открыть у первого кода после нажатия кнопки Подобрать (Расширительные клапаны)'

    def click_btn_open_first_code(self):
        """Клик по кнопке Открыть у первого кода в списке"""
        with allure.step('Клик по кнопке Открыть у первого кода в списке'):
            self.expecting_clickability(CoolConfigExpansionValvesLocators.LOCATOR_BTN_OPEN_FIRST)
            btn_open_first_code = self.find_element(CoolConfigExpansionValvesLocators.LOCATOR_BTN_OPEN_FIRST)
            self.driver.execute_script("arguments[0].click()", btn_open_first_code)
            self.switching_window(-1)
            self.waiting_element_is_visibility_on_the_page(
                CoolConfigExpansionValvesLocators.LOCATOR_CHECKING_PAGE_OPENING_AFTER_CLICK_BTN_OPEN)
            time.sleep(1)
            self.switching_window(0)

    def switch_to_frame_expansion_valves(self):
        """Фрейм таблицы"""
        with allure.step('Фрейм таблицы'):
            iframe = self.find_element(CoolingCompressors.LOCATOR_FRAME)
            self.driver.switch_to.frame(iframe)

    def click_btn_buy_expansion_valves(self):
        """Клик по кнопке купить у первого подобранного расширительного клапана"""
        with allure.step('Клик по кнопке купить у первого подобранного расширительного клапана'):
            self.switch_to_frame_expansion_valves()
            self.expecting_clickability(CoolConfigExpansionValvesLocators.LOCATOR_BTN_BOUGHT_FIRST)
            btn_buy = self.find_element(CoolConfigExpansionValvesLocators.LOCATOR_BTN_BOUGHT_FIRST)
            self.driver.execute_script("arguments[0].click()", btn_buy)
            time.sleep(1)
            self.switching_window(-1)


@allure.feature('Страница подбора Обратных клапанов')
class CoolConfigNonReturnValvesPage(BasePage):
    """Страница подбора Обратных клапанов"""

    def click_btn_select_non_return(self):
        """Кнопка подобрать обратные клапаны"""
        with allure.step('Кнопка подобрать обратные клапаны'):
            self.expecting_clickability(CoolConfigNonReturnValvesLocators.LOCATOR_BTN_VALVES_SELECT)
            click_btn_non_return = self.find_element(CoolConfigNonReturnValvesLocators.LOCATOR_BTN_VALVES_SELECT)
            self.driver.execute_script("arguments[0].click()", click_btn_non_return)
            self.waiting_element_is_visibility_located_dom(CoolConfigNonReturnValvesLocators.LOCATOR_BTN_BOUGHT_FIRST)

    def click_btn_buy_non_return(self):
        """Нажать на кнопку Купить у первого кода"""
        with allure.step('Нажать на кнопку Купить у первого кода'):
            btn_buy = self.find_element(CoolConfigNonReturnValvesLocators.LOCATOR_BTN_BOUGHT_FIRST)
            self.driver.execute_script("arguments[0].click()", btn_buy)
            time.sleep(2)
            self.switching_window(-1)
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
            self.waiting_element_is_visibility_on_the_page(CartLocators.LOCATOR_BTN_ADD_SALES)


@allure.feature('Страница подбора Трубопроводов')
class CoolConfigSelectPipelinesPage(BasePage):
    """Страница подбора Трубопроводов"""

    def click_btn_select_pipelines(self):
        """Кнопка подобрать Трубопроводов"""
        with allure.step('Кнопка подобрать Трубопроводов'):
            click_btn_select_pipelines = self.find_element(
                CoolConfigSelectPipelinesLocators.LOCATOR_BTN_PIPELINES_SELECT)
            self.driver.execute_script("arguments[0].click()", click_btn_select_pipelines)
            self.waiting_element_is_visibility_located_dom(
                CoolConfigSelectPipelinesLocators.LOCATOR_HEADER_INJECTION_LINE_PIPELINE)
