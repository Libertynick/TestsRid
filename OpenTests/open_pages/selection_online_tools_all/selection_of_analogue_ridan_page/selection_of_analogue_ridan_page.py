import time

import allure
from selenium.common import TimeoutException
from selenium.webdriver.support.select import Select

from base_page.base_page import BasePage
from base_page.base_page_locators import BaseOpenLocators
from open_pages.cart_page.cart_locators import CartLocators
from open_pages.selection_online_tools_all.selection_of_analogue_ridan_page.selection_of_analogue_ridan_locators import \
    SelectionOfAnalogueRidanLocators


@allure.feature('Страница Подбор аналога Ридан')
class SelectionOfAnalogueRidanPage(BasePage):
    """Страница Подбор аналога Ридан"""

    def click_btn_search_by_article(self):
        """Клик по кнопке Поиск по артикулу"""
        with allure.step('Клик по кнопке Поиск по артикулу'):
            self.waiting_element_is_visibility_on_the_page(
                SelectionOfAnalogueRidanLocators.LOCATOR_BTN_SEARCH_BY_ARTICLE, sec=5)

            active_btn_search_by_article = self.driver.find_elements(
                *SelectionOfAnalogueRidanLocators.LOCATOR_BTN_SEARCH_BY_ARTICLE_ACTIVE)
            if len(active_btn_search_by_article) == 0:
                btn_search_by_article = self.find_element(
                    SelectionOfAnalogueRidanLocators.LOCATOR_BTN_SEARCH_BY_ARTICLE)
                btn_search_by_article.click()
                self.waiting_element_is_visibility_located_dom(
                    SelectionOfAnalogueRidanLocators.LOCATOR_BTN_SEARCH_BY_ARTICLE_ACTIVE, sec=5)

    def click_btn_search_by_name(self):
        """Клик по кнопке Поиск по наименованию"""
        with allure.step('Клик по кнопке Поиск по наименованию'):
            self.waiting_element_is_visibility_on_the_page(SelectionOfAnalogueRidanLocators.LOCATOR_BTN_SEARCH_BY_NAME)
            btn_search_by_name = self.find_element(SelectionOfAnalogueRidanLocators.LOCATOR_BTN_SEARCH_BY_NAME)
            btn_search_by_name.click()
            self.waiting_element_is_visibility_located_dom(
                SelectionOfAnalogueRidanLocators.LOCATOR_BTN_SEARCH_BY_NAME_ACTIVE, sec=5)
            time.sleep(1)

    def article_entry_in_field_search_by_article(self, article: str):
        """Ввод артикула в поле поиска по артикулу"""
        with allure.step(f'Ввод артикула {article} в поле поиска по артикулу'):
            self.waiting_element_is_visibility_on_the_page(
                SelectionOfAnalogueRidanLocators.LOCATOR_INPUT_SEARCH_ARTICLE,
                sec=5)
            input_article = self.find_element(SelectionOfAnalogueRidanLocators.LOCATOR_INPUT_SEARCH_ARTICLE)
            input_article.send_keys(article)
            entered_article = input_article.get_attribute('value')
            assert entered_article == article, \
                f'Введенный артикул - ({entered_article}) не соответствует оиждаемлму - ({article})'

    def name_entry_in_field_search_by_name(self, name: str):
        """Ввод наименования в поле поиска по наименованию"""
        with allure.step(f'Ввод наименования {name} в поле поиска по наименованию'):
            self.waiting_element_is_visibility_on_the_page(SelectionOfAnalogueRidanLocators.LOCATOR_INPUT_NAME_ENTRY,
                                                           sec=5)
            input_name = self.find_element(SelectionOfAnalogueRidanLocators.LOCATOR_INPUT_NAME_ENTRY)
            input_name.send_keys(name)
            entered_name = input_name.get_attribute('value')
            assert entered_name == name, \
                f'Введенное имя - ({entered_name}) не соответствует оиждаемлму - ({name})'

    def click_btn_search_in_by_article_search(self):
        """Клик по кнопке Найти в поиске по артикулу"""
        with allure.step('Клик по кнопке Найти в поиске по артикулу'):
            self.expecting_clickability(SelectionOfAnalogueRidanLocators.LOCATOR_BTN_SEARCH_IN_BY_ARTICLE_SEARCH)
            btn_search = self.find_element(SelectionOfAnalogueRidanLocators.LOCATOR_BTN_SEARCH_IN_BY_ARTICLE_SEARCH)
            btn_search.click()
            self.waiting_element_is_visibility_on_the_page(
                SelectionOfAnalogueRidanLocators.LOCATOR_LOADER_IN_BTN_SEARCH_BY_ARTICLE)
            self.waiting_element_is_visibility_on_the_page(SelectionOfAnalogueRidanLocators.LOCATOR_CARD_ANALOG, sec=5)

    def click_btn_search_in_by_name_search(self):
        """Клик по кнопке Найти в поиске по наименованию"""
        with allure.step('Клик по кнопке Найти в поиске по наименованию'):
            self.expecting_clickability(SelectionOfAnalogueRidanLocators.LOCATOR_BTN_SEARCH_IN_BY_NAME_SEARCH)
            btn_search = self.find_element(SelectionOfAnalogueRidanLocators.LOCATOR_BTN_SEARCH_IN_BY_NAME_SEARCH)
            btn_search.click()
            self.waiting_element_is_visibility_on_the_page(
                SelectionOfAnalogueRidanLocators.LOCATOR_LOADER_IN_BTN_SEARCH_BY_NAME)
            try:
                self.waiting_element_is_visibility_on_the_page(SelectionOfAnalogueRidanLocators.LOCATOR_CARD_ANALOG,
                                                               sec=5)
            except TimeoutException:
                self.waiting_element_is_visibility_on_the_page(
                    SelectionOfAnalogueRidanLocators.LOCATOR_ARTICLE_ANALOG_LINK, sec=5
                )

    def choice_direction(self, direction_value: dict):
        """Выбор направления"""
        with allure.step(f'Выбор направления {direction_value}'):
            self.waiting_element_is_visibility_located_dom(SelectionOfAnalogueRidanLocators.LOCATOR_SELECT_DIRECTION,
                                                           sec=5)
            self.waiting_element_is_visibility_on_the_page(SelectionOfAnalogueRidanLocators.LOCATOR_SELECT_DIRECTION)
            select_direction = self.find_element(SelectionOfAnalogueRidanLocators.LOCATOR_SELECT_DIRECTION)
            select = Select(select_direction)
            select.select_by_value(direction_value['value'])
            entered_value = select.first_selected_option.text
            assert entered_value == direction_value['direction'], \
                f'Выбранное значение Направления - ({entered_value}) не соответствует ожидаемому -' \
                f' ({direction_value["direction"]})'

    def save_article_analog(self) -> str:
        """Сохранение артикула аналога"""
        with allure.step('Сохранение артикула аналога'):
            self.waiting_element_is_visibility_on_the_page(SelectionOfAnalogueRidanLocators.LOCATOR_ARTICLE_ANALOG,
                                                           sec=5)
            article_analog = self.find_element(SelectionOfAnalogueRidanLocators.LOCATOR_ARTICLE_ANALOG).text
            return article_analog

    def saving_analogue_article_as_a_link(self) -> str:
        """Сохранение артикула аналога в виде ссылки"""
        with allure.step('Сохранение артикула аналога в виде ссылки'):
            self.waiting_element_is_visibility_on_the_page(
                SelectionOfAnalogueRidanLocators.LOCATOR_ARTICLE_ANALOG_DESCRIPTION_BLOCK, sec=5)
            article_analog = self.driver.find_elements(*SelectionOfAnalogueRidanLocators.LOCATOR_ARTICLE_ANALOG_LINK
                                                       )
            # Если нет артикула в виде ссылки, то смотрим есть ли артикул без ссылки
            if len(article_analog) == 0:
                article_analog = self.save_article_analog()
            elif len(article_analog) > 0:
                article_analog = article_analog[0].text

            return article_analog

    def click_btn_add_to_cart_in_card_analog(self):
        """Клик по кнопке В корзину в карточке аналога"""
        with allure.step('Клик по кнопке В корзину в карточке аналога'):
            text_analog = self.find_element(SelectionOfAnalogueRidanLocators.LOCATOR_CARD_ANALOG)
            self.scroll_to(text_analog)
            self.expecting_clickability(SelectionOfAnalogueRidanLocators.LOCATOR_BTN_ADD_TO_CART_IN_CARD_ANALOG)
            btn_add_to_cart_in_card_analog = self.find_element(
                SelectionOfAnalogueRidanLocators.LOCATOR_BTN_ADD_TO_CART_IN_CARD_ANALOG)
            btn_add_to_cart_in_card_analog.click()
            self.waiting_element_is_visibility_on_the_page(
                SelectionOfAnalogueRidanLocators.LOCATOR_HEADER_IN_MODAL_ADD_TO_CART, sec=10)

    def save_article_in_modal_add_to_cart(self) -> str:
        """Сохранение артикула в модалке добавления в корзину"""
        with allure.step('Сохранение артикула в модалке добавления в корзину'):
            self.waiting_element_is_visibility_on_the_page(
                SelectionOfAnalogueRidanLocators.LOCATOR_ARTICLE_IN_MODAL_ADD_TO_CART, sec=5)
            article = self.find_element(SelectionOfAnalogueRidanLocators.LOCATOR_ARTICLE_IN_MODAL_ADD_TO_CART).text
            return article

    def click_btn_add_to_cart_in_modal_select_quantity_of_products(self):
        """Клик по кнопке Добавить в корзину в модалке Выберите количество товаров"""
        with allure.step('Клик по кнопке Добавить в корзину в модалке Выберите количество товаров'):
            self.expecting_clickability(
                SelectionOfAnalogueRidanLocators.LOCATOR_BTN_ADD_TO_CART_IN_MODAL_SELECT_QUANTITY_OF_PRODUCTS)
            btn_add_to_cart = self.find_element(
                SelectionOfAnalogueRidanLocators.LOCATOR_BTN_ADD_TO_CART_IN_MODAL_SELECT_QUANTITY_OF_PRODUCTS)
            btn_add_to_cart.click()
            self.waiting_element_is_visibility_on_the_page(
                SelectionOfAnalogueRidanLocators.LOCATOR_HEADER_IN_MODAL_ITEMS_ADDED_TO_CART, sec=10)

    def click_btn_go_to_cart_in_modal_items_added_to_cart(self):
        """Клик по кнопке Перейти в корзину в модалке Товары добавлены в корзину!"""
        with allure.step('Клик по кнопке Перейти в корзину в модалке Товары добавлены в корзину!'):
            self.waiting_element_is_visibility_on_the_page(
                SelectionOfAnalogueRidanLocators.LOCATOR_BTN_GO_TO_CART_IN_MODAL_ITEMS_ADDED_TO_CART, sec=5)
            btn_go_to_cart = self.find_element(
                SelectionOfAnalogueRidanLocators.LOCATOR_BTN_GO_TO_CART_IN_MODAL_ITEMS_ADDED_TO_CART)
            self.click_js(btn_go_to_cart)
            self.waiting_element_invisibility(
                SelectionOfAnalogueRidanLocators.LOCATOR_BTN_GO_TO_CART_IN_MODAL_ITEMS_ADDED_TO_CART)
            time.sleep(1)
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
            self.waiting_element_is_visibility_located_dom(CartLocators.LOCATOR_LOADER_HIDE_ON_PAGE, sec=10)
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
            self.waiting_element_is_visibility_located_dom(CartLocators.LOCATOR_LOADER_HIDE_ON_PAGE, sec=10)
            self.waiting_element_is_visibility_on_the_page(CartLocators.LOCATOR_H1_BASKET, sec=5)
