import time
from datetime import datetime
from pathlib import Path

import allure
from selenium.common import TimeoutException
from selenium.webdriver.support.select import Select

from base_page.base_page import BasePage
from open_pages.selection_online_tools_all.sha_select_panel_config.selection_of_automation_cabinets_locators import \
    ShaSelectLocators, ShaManagedSystemsLocators, ResultShaLocators


@allure.feature('Страницы для внесения данных для подбора ША (шкафы автоматизации)')
class ShaSelectPage(BasePage):
    """Страницы для внесения данных для подбора ША (шкафы автоматизации)"""

    def click_btn_go_to_configurator(self):
        """Нажать на кнопку Перейти в конфигуратор"""
        with allure.step('Нажать на кнопку Перейти в конфигуратор'):
            try:
                self.expecting_clickability(ShaSelectLocators.LOCATOR_BTN_GO_TO_CONFIGURATOR)
                btn_go_to_configurator = self.find_element(ShaSelectLocators.LOCATOR_BTN_GO_TO_CONFIGURATOR)
                self.driver.execute_script("arguments[0].click()", btn_go_to_configurator)
                self.switching_window(-1)
                self.waiting_element_is_visibility_on_the_page(ShaSelectLocators.LOCATOR_FIELD_CHOOSE_REGION)
            except TimeoutException:
                self.driver.refresh()
                self.waiting_element_is_visibility_on_the_page(ShaSelectLocators.LOCATOR_FIELD_CHOOSE_REGION)

    def choose_region(self, value_region: str):
        """Выбор Региона"""
        with allure.step(f'Выбор Региона {value_region}'):
            self.waiting_element_is_visibility_on_the_page(ShaSelectLocators.LOCATOR_FIELD_CHOOSE_REGION)
            field_region = self.find_element(ShaSelectLocators.LOCATOR_FIELD_CHOOSE_REGION)

            select_region = Select(field_region)
            select_region.select_by_value(value_region)
            selected_reg = select_region.first_selected_option
            print(selected_reg.text)

    def input_address_object(self, address_object: str):
        """Ввод адреса объекта
        address_object - адрес объекта
        """
        with allure.step(f'Ввод адреса объекта {address_object}'):
            self.waiting_element_is_visibility_on_the_page(ShaSelectLocators.LOCATOR_FIELD_SUBJECT_ADDRESS)
            input_address_object = self.find_element(ShaSelectLocators.LOCATOR_FIELD_SUBJECT_ADDRESS)
            input_address_object.click()
            input_address_object.send_keys(address_object)
            entered_input_address_object = input_address_object.get_attribute('value')
            assert entered_input_address_object == address_object, \
                f'Количество номинального расхода насосов на странице ' \
                f'- ({entered_input_address_object}) не соответствует ' \
                f'ожидаемому - ({address_object})'

    def btn_further(self, address_object: str, value_region: str):
        """Нажатие на кнопку Далее"""
        with allure.step('Нажатие на кнопку Далее'):
            try:
                btn_further = self.find_element(ShaSelectLocators.LOCATOR_BTN_FURTHER)
                self.driver.execute_script("arguments[0].click()", btn_further)
                self.expecting_clickability(ShaManagedSystemsLocators.LOCATOR_HEATING_SYSTEM_PLUS_ONE, sec=10)
            except TimeoutException:
                self.driver.refresh()
                self.choose_region(value_region)
                self.input_address_object(address_object)
                btn_further = self.find_element(ShaSelectLocators.LOCATOR_BTN_FURTHER)
                self.driver.execute_script("arguments[0].click()", btn_further)
                self.expecting_clickability(ShaManagedSystemsLocators.LOCATOR_HEATING_SYSTEM_PLUS_ONE)


@allure.feature('Страницы для внесения данных для подбора ША (шкафы автоматизации) вкладка управляемые системы')
class ShaManagedSystems(BasePage):
    """Страницы для внесения данных для подбора ША (шкафы автоматизации) вкладка управляемые системы"""

    def plus_one_heating_system(self):
        """Добавить одну систему отопления"""
        with allure.step('Добавить одну систему отопления'):
            time.sleep(1)
            self.expecting_clickability(ShaManagedSystemsLocators.LOCATOR_HEATING_SYSTEM_PLUS_ONE)
            btn_plus_heating_system = self.find_element(ShaManagedSystemsLocators.LOCATOR_HEATING_SYSTEM_PLUS_ONE)
            self.driver.execute_script("arguments[0].click()", btn_plus_heating_system)

    def input_name_system_heating(self, name_system: str):
        """Ввод имени системы отопления
        name_system - имя системы
        """
        with allure.step(f'Ввод имени системы отопления {name_system}'):
            self.waiting_element_is_visibility_on_the_page(ShaManagedSystemsLocators.LOCATOR_FIELD_NAME_SYSTEM_HEATING,
                                                           sec=5)
            input_name_system_heating = self.find_element(ShaManagedSystemsLocators.LOCATOR_FIELD_NAME_SYSTEM_HEATING)
            input_name_system_heating.send_keys(name_system)
            entered_input_name_system_heating = input_name_system_heating.get_attribute('value')
            assert entered_input_name_system_heating == name_system, \
                f'Введенное имя системы - ({entered_input_name_system_heating}) ' \
                f'не соответствует ожидаемому - ({name_system})'

    def input_count_pump(self, count_pump):
        """Ввод кол-ва насосов
        count_pump - кол-во насосов на системе"""
        with allure.step(f'Ввод кол-ва насосов {count_pump}'):
            input_count_pump = self.find_element(ShaManagedSystemsLocators.LOCATOR_FIELD_COUNT_PUMPS)
            input_count_pump.send_keys(count_pump)
            self.waiting_element_is_visibility_on_the_page(ShaManagedSystemsLocators.LOCATOR_BTN_PUMP_TYPE)

    def input_producer_pump(self, producer: str):
        """Выбор производителя насоса"""
        with allure.step(f'Выбор производителя насоса {producer}'):
            input_producer_pump = self.find_element(ShaManagedSystemsLocators.LOCATOR_INPUT_PRODUCER)
            input_producer_pump.click()
            self.waiting_element_is_visibility_on_the_page(ShaManagedSystemsLocators.locator_choose_producer(producer))
            choose_producer_pump = self.find_element(ShaManagedSystemsLocators.locator_choose_producer(producer))
            choose_producer_pump.click()
            time.sleep(0.5)

    def input_type_pump(self, choose_type: str):
        """Выбор Тима насоса"""
        with allure.step(f'Выбор Тима насоса {choose_type}'):
            input_type_pump = self.find_element(ShaManagedSystemsLocators.LOCATOR_INPUT_TYPE)
            input_type_pump.click()
            self.waiting_element_is_visibility_on_the_page(ShaManagedSystemsLocators.locator_choose_type(choose_type))
            choose_type_pump = self.find_element(ShaManagedSystemsLocators.locator_choose_type(choose_type))
            choose_type_pump.click()
            time.sleep(0.5)

    def input_mark_pump(self, choose_mark: str):
        """Выбор марки насоса"""
        with allure.step(f'Выбор марки насоса {choose_mark}'):
            input_mark_pump = self.find_element(ShaManagedSystemsLocators.LOCATOR_INPUT_MARK)
            input_mark_pump.click()
            self.waiting_element_is_visibility_on_the_page(ShaManagedSystemsLocators.locator_choose_mark(choose_mark))
            choose_mark_pump = self.find_element(ShaManagedSystemsLocators.locator_choose_mark(choose_mark))
            choose_mark_pump.click()
            time.sleep(0.5)

    def input_external_frequency_converters_on_pumps(self):
        """Выбор в поле Внешние преобразователи ПЧ на насосах"""
        with allure.step('Выбор в поле Внешние преобразователи ПЧ на насосах'):
            input_external_frequency_converters_on_pumps = self.find_element(
                ShaManagedSystemsLocators.LOCATOR_FIELD_EXTERNAL_FREQUENCY_CONVERTERS_ON_PUMPS)
            self.scroll_to(input_external_frequency_converters_on_pumps)
            input_external_frequency_converters_on_pumps.click()
            self.waiting_element_is_visibility_on_the_page(
                ShaManagedSystemsLocators.LOCATOR_CHOOSE_EXTERNAL_FREQUENCY_CONVERTERS_ON_PUMPS)
            choose_mark_pump = self.find_element(
                ShaManagedSystemsLocators.LOCATOR_CHOOSE_EXTERNAL_FREQUENCY_CONVERTERS_ON_PUMPS)
            choose_mark_pump.click()
            time.sleep(0.5)

    def click_btn_next_manager_system(self):
        """Нажать на кнопку Далее в разделе Управляемы системы"""
        with allure.step('Нажать на кнопку Далее в разделе Управляемы системы'):
            click_btn_next = self.find_element(ShaManagedSystemsLocators.LOCATOR_BTN_NEXT_MANAGED_SYSTEMS)
            self.driver.execute_script("arguments[0].click()", click_btn_next)
            self.waiting_element_is_visibility_on_the_page(ShaManagedSystemsLocators.LOCATOR_SCHEMATIC_REDACTION_PAGE)

    def click_btn_next_schema_editing(self):
        """Нажать на кнопку Далее в разделе Редактирование схемы"""
        with allure.step('Нажать на кнопку Далее в разделе Редактирование схемы'):
            click_btn_next = self.find_element(ShaManagedSystemsLocators.LOCATOR_BTN_NEXT_SCHEMA_EDITING)
            self.scroll_to(click_btn_next)
            self.driver.execute_script("arguments[0].click()", click_btn_next)
            time.sleep(2)
            self.waiting_element_is_visibility_on_the_page(ShaManagedSystemsLocators.LOCATOR_BTN_GET_RESULT)

    def click_btn_get_result(self):
        """Нажать по кнопке Подобрать"""
        with allure.step('Нажать по кнопке Подобрать'):
            self.expecting_clickability(ShaManagedSystemsLocators.LOCATOR_BTN_GET_RESULT)
            btn_get_result = self.find_element(ShaManagedSystemsLocators.LOCATOR_BTN_GET_RESULT)
            self.driver.execute_script("arguments[0].click()", btn_get_result)
            self.expecting_clickability(ResultShaLocators.LOCATOR_DOWNLOAD_PDF_SPEC)

    def click_btn_download_pdf_spec(self):
        """Нажать на кнопку для скачивания PDF ФСА, спецификации"""
        with allure.step('Нажать на кнопку для скачивания PDF ФСА, спецификации'):
            downloads_path = str(Path.home() / "Downloads")
            now = datetime.now().strftime("%d%m")
            name_file = f'Техника_BAST{now}'  # expect
            time_checking = 30  # sec
            time_step = 5  # sec

            btn_download_pdf_spec = self.find_element(ResultShaLocators.LOCATOR_DOWNLOAD_PDF_SPEC)
            self.driver.execute_script("arguments[0].click()", btn_download_pdf_spec)
            time.sleep(1)
            found_file = self.search_for_the_last_downloaded_file_in_a_folder(downloads_path)
            assert name_file in found_file, \
                f'Искомый файл {name_file} не найден в папке {downloads_path}'
            self.delete_file_by_name_in_download_folder(found_file)

    def click_btn_download_dxf_spec(self):
        """Нажать на кнопку для скачивания DXF ФСА, спецификации"""
        with allure.step('Нажать на кнопку для скачивания DXF ФСА, спецификации'):
            downloads_path = str(Path.home() / "Downloads")
            now = datetime.now().strftime("%d%m")
            name_file = f'Техника_BAST{now}'  # expect

            btn_download_dxf_spec = self.find_element(ResultShaLocators.LOCATOR_DOWNLOAD_DXF_SPEC)
            self.driver.execute_script("arguments[0].click()", btn_download_dxf_spec)
            time.sleep(1)

            found_file = self.search_for_the_last_downloaded_file_in_a_folder(downloads_path)
            assert name_file in found_file, \
                f'Искомый файл {name_file} не найден в папке {downloads_path}'
            self.delete_file_by_name_in_download_folder(found_file)

    def click_btn_download_pdf_kp(self):
        """Нажать на кнопку для скачивания PDF КП"""
        with allure.step('Нажать на кнопку для скачивания PDF КП'):
            downloads_path = str(Path.home() / "Downloads")
            now = datetime.now().strftime("%d%m")
            name_file = f'BAST{now}'  # expect

            btn_download_pdf_kp = self.find_element(ResultShaLocators.LOCATOR_DOWNLOAD_PDF_KP)
            self.driver.execute_script("arguments[0].click()", btn_download_pdf_kp)
            time.sleep(1)

            found_file = self.search_for_the_last_downloaded_file_in_a_folder(downloads_path)
            assert name_file in found_file, \
                f'Искомый файл {name_file} не найден в папке {downloads_path}'
            self.delete_file_by_name_in_download_folder(found_file)
