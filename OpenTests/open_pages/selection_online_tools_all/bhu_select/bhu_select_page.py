import time

import allure
from faker.generator import random
from selenium.common import StaleElementReferenceException

from base_page.base_page import BasePage
from open_pages.selection_online_tools_all.bhu_select.bhu_select_locators import BhuSelectLocators, \
    RefrigeratorPipingBlockLocators, HydraulicModuleLocators, PtoBindingModuleLocators


@allure.feature('Страница Подбор БХУ')
class BhuSelectPage(BasePage):
    """Страница Подбор БХУ"""

    def authorization(self, login: str, password: str):
        """Авторизация"""
        with allure.step('Авторизация'):
            self.waiting_element_is_visibility_on_the_page(BhuSelectLocators.LOCATOR_BTN_LOG_IN, sec=5)
            btn_log_in = self.find_element(BhuSelectLocators.LOCATOR_BTN_LOG_IN)
            btn_log_in.click()
            self.waiting_element_is_visibility_on_the_page(BhuSelectLocators.LOCATOR_ICON_USER_LOG_IN, sec=20)
            self.find_element(BhuSelectLocators.LOCATOR_INPUT_EMAIL).send_keys(login)
            self.find_element(BhuSelectLocators.LOCATOR_INPUT_PASSWORD).send_keys(password)
            self.find_element(BhuSelectLocators.LOCATOR_BTN_ENTRANCE).click()

    def click_btn_drop_menu_tools(self):
        """Клик пл кнопке выпадающего меню Инструменты"""
        with allure.step('Клик пл кнопке выпадающего меню Инструменты'):
            try:
                self.expecting_clickability(BhuSelectLocators.LOCATOR_BTN_DROP_MENU_TOOLS, sec=5)
            except StaleElementReferenceException:
                self.expecting_clickability(BhuSelectLocators.LOCATOR_BTN_DROP_MENU_TOOLS, sec=5)
            btn_drop_menu_tools = self.find_element(BhuSelectLocators.LOCATOR_BTN_DROP_MENU_TOOLS)
            btn_drop_menu_tools.click()
            self.waiting_element_is_visibility_on_the_page(BhuSelectLocators.LOCATOR_DROP_MENU_TOOLS, sec=5)

    def click_btn_calculation_bhu_in_drop_menu_tools(self):
        """Клик по кнопке Расчет БХУ в выпадающем списке Инструменты"""
        with allure.step('Клик по кнопке Расчет БХУ в выпадающем списке Инструменты'):
            self.waiting_element_is_visibility_on_the_page(
                BhuSelectLocators.LOCATOR_BTN_CALCULATION_BHU_IN_DROP_MENU_TOOLS, sec=5)
            btn_calculation_bhu = self.find_element(BhuSelectLocators.LOCATOR_BTN_CALCULATION_BHU_IN_DROP_MENU_TOOLS)
            btn_calculation_bhu.click()
            self.waiting_element_is_visibility_on_the_page(BhuSelectLocators.LOCATOR_FRAME_KB3)
            self.switch_to_frame_kb_3()
            self.waiting_element_is_visibility_on_the_page(BhuSelectLocators.LOCATOR_HEADER, sec=10)

    def switch_to_frame_kb_3(self):
        """Переключение во фройм KB_3"""
        with allure.step('Переключение во фройм KB_3'):
            self.waiting_element_is_visibility_located_dom(BhuSelectLocators.LOCATOR_FRAME_KB3)
            self.switch_to_frame(BhuSelectLocators.LOCATOR_FRAME_KB3)

    def click_btn_module_for_connecting_to_a_refrigeration_machine(self):
        """Клик по кнопке Модуль подключения к холодильной машине"""
        with allure.step('Клик по кнопке Модуль подключения к холодильной машине'):
            self.expecting_clickability(
                BhuSelectLocators.LOCATOR_BUTTON_MODULE_FOR_CONNECTING_TO_A_REFRIGERATION_MACHINE)
            btn_module_for_connecting_to_a_refrigeration_machine = self.find_element(
                BhuSelectLocators.LOCATOR_BUTTON_MODULE_FOR_CONNECTING_TO_A_REFRIGERATION_MACHINE)
            btn_module_for_connecting_to_a_refrigeration_machine.click()
            self.waiting_element_is_visibility_on_the_page(RefrigeratorPipingBlockLocators.LOCATOR_HEADER, sec=20)

    def click_btn_pump_hydraulic_module(self):
        """Клик по кнопке Насосный гидромодуль"""
        with allure.step('Клик по кнопке Насосный гидромодуль'):
            self.expecting_clickability(BhuSelectLocators.LOCATOR_BTN_PUMP_HYDRAULIC_MODULE)
            btn_pump_hydraulic_module = self.find_element(BhuSelectLocators.LOCATOR_BTN_PUMP_HYDRAULIC_MODULE)
            btn_pump_hydraulic_module.click()
            self.waiting_element_is_visibility_on_the_page(HydraulicModuleLocators.LOCATOR_HEADER, sec=20)

    def click_pto_binding_module(self):
        """Клик по кнопке Модуль обвязки ПТО"""
        with allure.step('Клик по кнопке Модуль обвязки ПТО'):
            self.expecting_clickability(BhuSelectLocators.LOCATOR_BTN_PTO_BINDING_MODULE)
            btn_pto_binding_module = self.find_element(BhuSelectLocators.LOCATOR_BTN_PTO_BINDING_MODULE)
            btn_pto_binding_module.click()
            self.waiting_element_is_visibility_on_the_page(PtoBindingModuleLocators.LOCATOR_HEADER, sec=20)

    def choice_region(self, region: str):
        """Выбор региона"""
        with allure.step('Выбор региона'):
            self.waiting_element_is_visibility_on_the_page(BhuSelectLocators.LOCATOR_REGION_SELECTION_MENU_BUTTON,
                                                           sec=15)
            self.expecting_clickability(BhuSelectLocators.LOCATOR_REGION_SELECTION_MENU_BUTTON)
            region_selection_menu_button = self.find_element(BhuSelectLocators.LOCATOR_REGION_SELECTION_MENU_BUTTON)
            region_selection_menu_button.click()
            self.waiting_element_is_visibility_on_the_page(BhuSelectLocators.LOCATOR_DROP_DOWN_LIST_WITH_REGIONS, sec=3)

            self.expecting_clickability(BhuSelectLocators.locator_btn_region_select(region))
            btn_region = self.find_element(BhuSelectLocators.locator_btn_region_select(region))
            btn_region.click()
            self.waiting_element_is_visibility_on_the_page(BhuSelectLocators.LOCATOR_SELECT_REGION, sec=3)
            selected_region = self.find_element(BhuSelectLocators.LOCATOR_SELECT_REGION).text
            assert region in selected_region, \
                f'Выбранный регион - ({selected_region}) не соответствует ожидаемому - ({region})'

    def click_btn_perform_block_calculation(self):
        """Клик по кнопке Выполнить расчет блоков"""
        with allure.step('Клик по кнопке Выполнить расчет блоков'):
            self.expecting_clickability(BhuSelectLocators.LOCATOR_BTN_PERFORM_BLOCK_CALCULATION)
            btn_perform_block_calculation = self.find_element(BhuSelectLocators.LOCATOR_BTN_PERFORM_BLOCK_CALCULATION)
            btn_perform_block_calculation.click()
            time.sleep(0.5)
            self.waiting_for_loader_processing_on_page(BhuSelectLocators.LOCATOR_LOADER)

    def checking_that_all_calculations_are_correct(self):
        """Проверка, что все расчеты подобраны"""
        with allure.step('Проверка, что все расчеты подобраны'):
            self.waiting_element_is_visibility_on_the_page(BhuSelectLocators.LOCATOR_BLOCKS_WITH_SELECTION_MODULES,
                                                           sec=5)
            blocks_with_selection_modules = self.find_elements(BhuSelectLocators.LOCATOR_BLOCKS_WITH_SELECTION_MODULES)
            selected_solutions = self.find_elements(BhuSelectLocators.LOCATOR_SELECTED_SOLUTION_BUTTON)
            assert len(blocks_with_selection_modules) == len(selected_solutions), \
                f'Количество подобранных решений - ({len(selected_solutions)}) не соответствует количеству модулей ' \
                f'- ({len(blocks_with_selection_modules)})'

    def click_btn_get_selection_results_in_one_file(self):
        """Клик по кнопке Получить результаты подбора одним файлом"""
        with allure.step('Клик по кнопке Получить результаты подбора одним файлом'):
            self.expecting_clickability(BhuSelectLocators.LOCATOR_BTN_GET_SELECTION_RESULTS_IN_ONE_FILE)
            btn_get_selection_results_in_one_file = self.find_element(
                BhuSelectLocators.LOCATOR_BTN_GET_SELECTION_RESULTS_IN_ONE_FILE)
            btn_get_selection_results_in_one_file.click()
            self.waiting_element_is_visibility_on_the_page(
                BhuSelectLocators.LOCATOR_MODAL_WINDOW_GET_SELECTION_RESULTS_IN_ONE_FILE, sec=5)

    def click_btn_send_by_email(self):
        """Клик по кнопке Отправить по Эмэйл"""
        with allure.step('Клик по кнопке Отправить по Эмэйл'):
            self.expecting_clickability(BhuSelectLocators.LOCATOR_BTN_SEND_BY_EMAIL)
            btn_send_by_email = self.find_element(BhuSelectLocators.LOCATOR_BTN_SEND_BY_EMAIL)
            btn_send_by_email.click()
            self.waiting_element_is_visibility_on_the_page(BhuSelectLocators.LOCATOR_INPUT_ADDRESS_OBJECT_IN_MODAL,
                                                           sec=5)

    def entering_address_object(self):
        """Ввод адреса объекта в модалке отправки результатов подбора на мэйл"""
        with allure.step('Ввод адреса объекта в модалке отправки результатов подбора на мэйл'):
            address = f'test_selenium_web_{random.random()}'
            self.waiting_element_is_visibility_on_the_page(BhuSelectLocators.LOCATOR_INPUT_ADDRESS_OBJECT_IN_MODAL,
                                                           sec=3)
            input_address_object = self.find_element(BhuSelectLocators.LOCATOR_INPUT_ADDRESS_OBJECT_IN_MODAL)
            input_address_object.send_keys(address)
            entered_address = input_address_object.get_attribute('value')
            assert entered_address == address, \
                f'Введенный адрес - ({entered_address}) не соответствует ожидаемому - ({address})'
            return address

    def click_btn_send_zip_archive_by_email(self):
        """Клик по кнопке Отправить на email архив zip в модалке отправки результатов на мэйл"""
        with allure.step('Клик по кнопке Отправить на email архив zip в модалке отправки результатов на мэйл'):
            self.expecting_clickability(BhuSelectLocators.LOCATOR_BTN_SEND_ZIP_ARCHIVE_BY_EMAIL_IN_MODAL)
            btn_send_zip_archive_by_email = self.find_element(
                BhuSelectLocators.LOCATOR_BTN_SEND_ZIP_ARCHIVE_BY_EMAIL_IN_MODAL)
            btn_send_zip_archive_by_email.click()
            self.waiting_for_loader_processing_on_page(BhuSelectLocators.LOCATOR_LOADER)


@allure.feature('Страница Блок обвязки Холодильной Машины (БХУ-ХМ)')
class RefrigeratorPipingBlockPage(BasePage):
    """Страница Блок обвязки Холодильной Машины (БХУ-ХМ)"""

    def water_toggle_switch_must_be_selected(self):
        """Должен быть выбран тумблер вода"""
        with allure.step('Должен быть выбран тумблер вода'):
            is_selected_toggle_water = self.find_element(
                RefrigeratorPipingBlockLocators.LOCATOR_TOGGLE_WATER).is_selected()
            assert is_selected_toggle_water is True, f'Тумблер Вода не выбран. Значение - ({is_selected_toggle_water})'

    def entering_a_value_in_working_fluid_temperature_field(self, working_fluid_temperature_value: str):
        """Ввод значения в поле температура рабочей жидкости"""
        with allure.step('Ввод значения в поле температура рабочей жидкости'):
            self.waiting_element_is_visibility_on_the_page(
                RefrigeratorPipingBlockLocators.LOCATOR_INPUT_WORKING_FLUID_TEMPERATURE, sec=5)
            input_working_fluid_temperature = self.find_element(
                RefrigeratorPipingBlockLocators.LOCATOR_INPUT_WORKING_FLUID_TEMPERATURE)
            input_working_fluid_temperature.send_keys(working_fluid_temperature_value)
            entered_value_of_working_fluid_temperature = input_working_fluid_temperature.get_attribute('value')
            assert entered_value_of_working_fluid_temperature == working_fluid_temperature_value, \
                f'Введенное значение температуры рабочей жидкости - ({entered_value_of_working_fluid_temperature}) ' \
                f'не соответствует ожиидаемому - ({working_fluid_temperature_value})'

    def entering_a_value_in_minimum_ambient_temperature_field(self, minimum_ambient_temperature_value: str):
        """Ввод значения в поле ввода Минимальная температура окружающей среды"""
        with allure.step('Ввод значения в поле ввода Минимальная температура окружающей среды'):
            self.waiting_element_is_visibility_on_the_page(
                RefrigeratorPipingBlockLocators.LOCATOR_INPUT_MINIMUM_AMBIENT_TEMPERATURE, sec=5)
            input_minimum_ambient_temperature = self.find_element(
                RefrigeratorPipingBlockLocators.LOCATOR_INPUT_MINIMUM_AMBIENT_TEMPERATURE)
            input_minimum_ambient_temperature.send_keys(minimum_ambient_temperature_value)
            entered_value_of_minimum_ambient_temperature = input_minimum_ambient_temperature.get_attribute('value')
            assert entered_value_of_minimum_ambient_temperature == minimum_ambient_temperature_value, \
                f'Введенное значение Минимальной температуры окружающей среды - ' \
                f'({entered_value_of_minimum_ambient_temperature}) не соответсвует ожидаемому - ' \
                f'({minimum_ambient_temperature_value})'

    def entering_a_value_in_nominal_flow_field(self, nominal_flow_value: str):
        """Ввод значения в поле номинальный расход"""
        with allure.step('Ввод значения в поле номинальный расход'):
            self.waiting_element_is_visibility_on_the_page(RefrigeratorPipingBlockLocators.LOCATOR_INPUT_NOMINAL_FLOW,
                                                           sec=3)
            input_nominal_flow = self.find_element(RefrigeratorPipingBlockLocators.LOCATOR_INPUT_NOMINAL_FLOW)
            input_nominal_flow.send_keys(nominal_flow_value)
            entered_value_nominal_flow = input_nominal_flow.get_attribute('value')
            assert entered_value_nominal_flow == nominal_flow_value, \
                f'Введенное значение в поле Номинальный расход - ({entered_value_nominal_flow}) не соответствует ' \
                f'ожидаемому - ({nominal_flow_value})'

    def choice_du_accession(self, du_accession_value: str):
        """Ввод ДУ присоединения"""
        with allure.step('Ввод ДУ присоединения'):
            self.expecting_clickability(RefrigeratorPipingBlockLocators.LOCATOR_FIELD_DROP_MENU_DU_ACCESSION)
            field_du_accession = self.find_element(RefrigeratorPipingBlockLocators.LOCATOR_FIELD_DROP_MENU_DU_ACCESSION)
            field_du_accession.click()
            self.waiting_element_is_visibility_on_the_page(
                RefrigeratorPipingBlockLocators.LOCATOR_DROP_MENU_DU_ACCESSION_ACTIVE, sec=5)
            item_option_du_accession = self.find_element(
                RefrigeratorPipingBlockLocators.locator_item_option_drop_menu_du_accession(du_accession_value))
            self.click_js(item_option_du_accession)

            entered_du_accession = field_du_accession.text
            assert entered_du_accession == du_accession_value, \
                f'Выбранное значение ДУ Присоединения - ({entered_du_accession}) не соответствует ожидаемому - ' \
                f'({du_accession_value})'

    def selecting_check_box_electrically_butter_valve(self):
        """Выбор чек-бокса Дисковый затвор с электроприводом"""
        with allure.step('Выбор чек-бокса Дисковый затвор с электроприводом'):
            self.waiting_element_is_visibility_on_the_page(
                RefrigeratorPipingBlockLocators.LOCATOR_CHECKBOX_ELECTRICALLY_MOTORIZED_BUTTERFLY_VALVE, sec=3)
            check_box = self.find_element(
                RefrigeratorPipingBlockLocators.LOCATOR_CHECKBOX_ELECTRICALLY_MOTORIZED_BUTTERFLY_VALVE)
            check_box.click()
            selected_check_box = self.find_element(
                RefrigeratorPipingBlockLocators.LOCATOR_INPUT_CHECKBOX_ELECTRICALLY_MOTORIZED_BUTTERFLY_VALVE
            ).is_selected()
            assert selected_check_box is True, \
                f'Чек - бокс Дисковый затвор с электроприводом не выбран. Значение - ({selected_check_box})'

    def select_checkbox_mesh_filter(self):
        """Выбор чек-бокса Сетчатый фильтр"""
        with allure.step('Выбор чек-бокса Сетчатый фильтр'):
            self.waiting_element_is_visibility_on_the_page(
                RefrigeratorPipingBlockLocators.LOCATOR_CHECK_BOX_MESH_FILTER,
                sec=5)
            check_box = self.find_element(RefrigeratorPipingBlockLocators.LOCATOR_CHECK_BOX_MESH_FILTER)
            check_box.click()
            selected_check_box = self.find_element(RefrigeratorPipingBlockLocators.LOCATOR_INPUT_CHECKBOX_MESH_FILTER
                                                   ).is_selected()
            assert selected_check_box is True, \
                f'Чек - бокс Сетчатый фильтр не выбран. Значение - ({selected_check_box})'

    def click_btn_save_and_exit(self):
        """Клик по кнопке Сохранить и выйти"""
        with allure.step('Клик по кнопке Сохранить и выйти'):
            self.expecting_clickability(RefrigeratorPipingBlockLocators.LOCATOR_BTN_SAVE_AND_EXIT)
            btn_save_and_exit = self.find_element(RefrigeratorPipingBlockLocators.LOCATOR_BTN_SAVE_AND_EXIT)
            btn_save_and_exit.click()
            self.waiting_element_is_visibility_on_the_page(BhuSelectLocators.LOCATOR_HEADER, sec=10)


@allure.feature('Страница Гидромодуль')
class HydraulicModulePage(BasePage):
    """Страница Гидромодуль"""

    def water_toggle_switch_must_be_selected(self):
        """Должен быть выбран тумблер вода"""
        with allure.step('Должен быть выбран тумблер вода'):
            is_selected_toggle_water = self.find_element(
                HydraulicModuleLocators.LOCATOR_INPUT_TOGGLE_WATER).is_selected()
            assert is_selected_toggle_water is True, f'Тумблер Вода не выбран. Значение - ({is_selected_toggle_water})'

    def save_pump_manufacturer(self) -> str:
        """Сохранение производителя насосов"""
        with allure.step('Сохранение производителя насосов'):
            self.waiting_element_is_visibility_on_the_page(HydraulicModuleLocators.LOCATOR_SELECTED_PUMP_MANUFACTURER,
                                                           sec=5)
            pump_manufacturer = self.find_element(HydraulicModuleLocators.LOCATOR_SELECTED_PUMP_MANUFACTURER).text
            return pump_manufacturer

    def choice_pump_manufacturer(self, name_pump_manufacturer: str):
        """Выбор производителя насосов"""
        with allure.step('Выбор производителя насосов'):
            self.waiting_element_is_visibility_on_the_page(HydraulicModuleLocators.LOCATOR_SELECTED_PUMP_MANUFACTURER,
                                                           sec=5)
            drop_menu = self.find_element(HydraulicModuleLocators.LOCATOR_SELECTED_PUMP_MANUFACTURER)
            drop_menu.click()
            self.waiting_element_is_visibility_on_the_page(
                HydraulicModuleLocators.locator_item_pump_manufacturer_in_drop_menu(name_pump_manufacturer), sec=5)
            pump_manufacturer = self.find_element(
                HydraulicModuleLocators.locator_item_pump_manufacturer_in_drop_menu(name_pump_manufacturer))
            pump_manufacturer.click()
            self.waiting_element_is_visibility_on_the_page(HydraulicModuleLocators.LOCATOR_SELECTED_PUMP_MANUFACTURER,
                                                           sec=5)
            entered_pump_manufacturer = self.find_element(
                HydraulicModuleLocators.LOCATOR_SELECTED_PUMP_MANUFACTURER).text
            assert entered_pump_manufacturer == name_pump_manufacturer, \
                f'Выбранный производитель насосов - ({entered_pump_manufacturer}) не соответствует ожидаемому - ' \
                f'({name_pump_manufacturer})'

    def check_box_thermal_insulation_of_pipelines_must_not_be_selected(self):
        """Чек - бокс теплоизоляция трубопроводов должен быть не выбран"""
        with allure.step('Чек - бокс теплоизоляция трубопроводов должен быть не выбран'):
            self.waiting_element_is_visibility_on_the_page(
                HydraulicModuleLocators.LOCATOR_INPUT_CHECK_BOX_THERMAL_INSULATION_OF_PIPELINES, sec=5)
            check_box = self.find_element(
                HydraulicModuleLocators.LOCATOR_INPUT_CHECK_BOX_THERMAL_INSULATION_OF_PIPELINES
            ).is_enabled()
            assert check_box is True, \
                f'Чек - бокс Теплоизрляция трубопроводов выбран. Значение - ({check_box})'

    def check_box_control_cabinet_must_not_be_selected(self):
        """Чек - бокс шкаф управления должен быть не выбран"""
        with allure.step('Чек - бокс шкаф управления должен быть не выбран'):
            self.waiting_element_is_visibility_on_the_page(
                HydraulicModuleLocators.LOCATOR_INPUT_CHECK_BOX_CONTROL_CABINET, sec=5)
            check_box = self.find_element(HydraulicModuleLocators.LOCATOR_INPUT_CHECK_BOX_CONTROL_CABINET).is_enabled()
            assert check_box is True, \
                f'Чек - бокс Шкаф управления выбраню Значение - ({check_box})'

    def save_selected_sha_installation(self) -> str:
        """Сохранение выбранного элемента в выпадающем списке монтаж ША"""
        with allure.step('Сохранение выбранного элемента в выпадающем списке монтаж ША'):
            self.waiting_element_is_visibility_on_the_page(HydraulicModuleLocators.LOCATOR_SELECTED_SHA_INSTALLATION,
                                                           sec=5)
            sha_installation = self.find_element(HydraulicModuleLocators.LOCATOR_SELECTED_SHA_INSTALLATION).text
            return sha_installation

    def save_presence_of_crp(self) -> str:
        """Сохранение Наличие ЧРП (на странице отображается в виде выпадающего списка без заголовка)"""
        with allure.step('Сохранение Наличие ЧРП (на странице отображается в виде выпадающего списка без заголовка)'):
            self.waiting_element_is_visibility_on_the_page(HydraulicModuleLocators.LOCATOR_SELECTED_PRESENCE_OF_CRP,
                                                           sec=5)
            presence_of_crp = self.find_element(HydraulicModuleLocators.LOCATOR_SELECTED_PRESENCE_OF_CRP).text
            return presence_of_crp

    def checking_selected_element_in_total_number_of_pumps(self, expected_total_number_of_pumps: str):
        """Проверка выбранного элемента в общее количество насосов"""
        with allure.step('Проверка выбранного элемента в общее количество насосов'):
            self.waiting_element_is_visibility_on_the_page(
                HydraulicModuleLocators.LOCATOR_SELECTED_TOTAL_NUMBER_OF_PUMPS, sec=5)
            total_number_of_pumps = self.find_element(
                HydraulicModuleLocators.LOCATOR_SELECTED_TOTAL_NUMBER_OF_PUMPS).text
            assert total_number_of_pumps == expected_total_number_of_pumps, \
                f'Выбранное количество насосов - ({total_number_of_pumps}) не соответствует ожидаемому - ' \
                f'({expected_total_number_of_pumps})'

    def checking_selected_number_of_reserve_pumps(self, expected_number_of_reserve_pumps: str):
        """Проверка выбранного количества резервных насосов"""
        with allure.step('Проверка выбранного количества резервных насосов'):
            self.waiting_element_is_visibility_on_the_page(
                HydraulicModuleLocators.LOCATOR_SELECTED_NUMBER_OF_RESERVE_PUMPS, sec=5)
            number_of_reserve_pumps = self.find_element(HydraulicModuleLocators.LOCATOR_SELECTED_NUMBER_OF_RESERVE_PUMPS
                                                        ).text
            assert number_of_reserve_pumps == expected_number_of_reserve_pumps, \
                f'Выбранное количество резервных насосов - ({number_of_reserve_pumps}) не соответствует ожидаемому ' \
                f'- ({expected_number_of_reserve_pumps})'

    def entering_nominal_flow_rate_of_pumps(self, pump_rated_flow_quantity: str):
        """Ввод номинального расхода насосов
        pump_rated_flow_quantity - количество номмнального расхода насосов
        """
        with allure.step('Ввод номинального расхода насосов'):
            self.waiting_element_is_visibility_on_the_page(HydraulicModuleLocators.LOCATOR_INPUT_PUMP_RATED_FLOW, sec=5)
            input_pump_rated_flow = self.find_element(HydraulicModuleLocators.LOCATOR_INPUT_PUMP_RATED_FLOW)
            input_pump_rated_flow.send_keys(pump_rated_flow_quantity)
            entered_pump_rated_flow = input_pump_rated_flow.get_attribute('value')
            assert entered_pump_rated_flow == pump_rated_flow_quantity, \
                f'Количество номинального расхода насосов на странице - ({entered_pump_rated_flow}) не соответствует ' \
                f'ожидаемому - ({pump_rated_flow_quantity})'

    def entering_nominal_pump_head(self, nominal_pump_head_quantity: str):
        """Ввод количества номинального напора насоса
        nominal_pump_head_quantity - количество номинального напора насоса
        """
        with allure.step('Ввод количества номинального напора насоса'):
            self.waiting_element_is_visibility_on_the_page(HydraulicModuleLocators.LOCATOR_INPUT_NOMINAL_PUMP_HEAD,
                                                           sec=5)
            input_nominal_pump_head = self.find_element(HydraulicModuleLocators.LOCATOR_INPUT_NOMINAL_PUMP_HEAD)
            input_nominal_pump_head.send_keys(nominal_pump_head_quantity)
            entered_nominal_pump_head = input_nominal_pump_head.get_attribute('value')
            assert entered_nominal_pump_head == nominal_pump_head_quantity, \
                f'Количество номинального напора насоса - ({entered_nominal_pump_head}) на странице не соответствует ' \
                f'введенному - ({nominal_pump_head_quantity})'

    def click_btn_save_and_exit(self):
        """Клик по кнопке Сохранить и выйти"""
        with allure.step('Клик по кнопке Сохранить и выйти'):
            self.expecting_clickability(HydraulicModuleLocators.LOCATOR_BTN_SAVE_AND_EXIT)
            btn_save_and_exit = self.find_element(HydraulicModuleLocators.LOCATOR_BTN_SAVE_AND_EXIT)
            btn_save_and_exit.click()
            self.waiting_element_is_visibility_on_the_page(BhuSelectLocators.LOCATOR_HEADER, sec=10)


@allure.feature('Страница Модуль обвязки ПТО (БХУ-ПТО)')
class PtoBindingModulePage(BasePage):
    """Страница Модуль обвязки ПТО (БХУ-ПТО)"""

    def entering_temperature_from_hm(self, temperature_from_hm: str):
        """Ввод температуры от ХМ"""
        with allure.step('Ввод температуры от ХМ'):
            self.waiting_element_is_visibility_on_the_page(PtoBindingModuleLocators.LOCATOR_INPUT_TEMPERATURE_FROM_HM,
                                                           sec=5)
            input_temperature_from_hm = self.find_element(PtoBindingModuleLocators.LOCATOR_INPUT_TEMPERATURE_FROM_HM)
            input_temperature_from_hm.send_keys(temperature_from_hm)
            entered_temperature_from_hm = input_temperature_from_hm.get_attribute('value')
            assert entered_temperature_from_hm == temperature_from_hm, \
                f'Введенное значение температуры от ХМ - ({entered_temperature_from_hm}) не соответствует ожидаемому ' \
                f'- ({temperature_from_hm})'

    def entering_temperature_to_hm(self, temperature_to_hm: str):
        """Ввод температуры к ХМ"""
        with allure.step('Ввод температуры к ХМ'):
            self.waiting_element_is_visibility_on_the_page(PtoBindingModuleLocators.LOCATOR_INPUT_TEMPERATURE_TO_HM,
                                                           sec=5)
            input_temperature_to_hm = self.find_element(PtoBindingModuleLocators.LOCATOR_INPUT_TEMPERATURE_TO_HM)
            input_temperature_to_hm.send_keys(temperature_to_hm)
            entered_temperature_to_hm = input_temperature_to_hm.get_attribute('value')
            assert entered_temperature_to_hm == temperature_to_hm, \
                f'Введенное значение температуры к ХМ - ({entered_temperature_to_hm}) не соответствует ожидаемому ' \
                f'- ({temperature_to_hm})'

    def water_toggle_switch_must_be_selected(self):
        """Должен быть выбран тумблер вода"""
        with allure.step('Должен быть выбран тумблер вода'):
            is_selected_toggle_water = self.find_element(
                PtoBindingModuleLocators.LOCATOR_INPUT_TOGGLE_WATER).is_selected()
            assert is_selected_toggle_water is True, f'Тумблер Вода не выбран. Значение - ({is_selected_toggle_water})'

    def entering_load(self, load: str):
        """Ввод нагрузки"""
        with allure.step('Ввод нагрузки'):
            self.waiting_element_is_visibility_on_the_page(PtoBindingModuleLocators.LOCATOR_INPUT_LOAD, sec=5)
            input_load = self.find_element(PtoBindingModuleLocators.LOCATOR_INPUT_LOAD)
            input_load.send_keys(load)
            entered_load = input_load.get_attribute('value')
            assert entered_load == load, \
                f'Введенное значение нагрузки - ({entered_load}) не соответствует ожидаемому - ({load})'

    def checking_value_in_control_valve_field(self, control_valve_value: str):
        """Проверка значения в поле Регулирующий клапан"""
        with allure.step('Проверка значения в поле Регулирующий клапан'):
            self.waiting_element_is_visibility_on_the_page(PtoBindingModuleLocators.LOCATOR_SELECTED_CONTROL_VALVE,
                                                           sec=5)
            control_valve_value_on_page = self.find_element(
                PtoBindingModuleLocators.LOCATOR_SELECTED_CONTROL_VALVE).text
            assert control_valve_value_on_page == control_valve_value, \
                f'Выбранное значение в поле Регулирующий клапан - ({control_valve_value_on_page}) не соответствует ' \
                f'ожидаемому - ({control_valve_value})'

    def checking_value_in_electric_drive_power_supply_field(self, electric_drive_power_supply_value: str):
        """Проверка значения в поле Питание электропривода"""
        with allure.step('Проверка значения в поле Питание электропривода'):
            self.waiting_element_is_visibility_on_the_page(
                PtoBindingModuleLocators.LOCATOR_SELECTED_ELECTRIC_DRIVE_POWER_SUPPLY, sec=5)
            electric_drive_power_supply_on_page = self.find_element(
                PtoBindingModuleLocators.LOCATOR_SELECTED_ELECTRIC_DRIVE_POWER_SUPPLY).text
            assert electric_drive_power_supply_on_page == electric_drive_power_supply_value, \
                f'Выбранное значение в поле Питание электропривода - ({electric_drive_power_supply_on_page}) не ' \
                f'соответствует ожидаемому - ({electric_drive_power_supply_value})'

    def entering_temperature_to_consumer(self, temperature_to_consumer: str):
        """Ввод Температуры к потребителю"""
        with allure.step('Ввод Температуры к потребителю'):
            self.waiting_element_is_visibility_on_the_page(
                PtoBindingModuleLocators.LOCATOR_INPUT_TEMPERATURE_TO_CONSUMER,
                sec=5)
            input_temperature_to_consumer = self.find_element(
                PtoBindingModuleLocators.LOCATOR_INPUT_TEMPERATURE_TO_CONSUMER)
            input_temperature_to_consumer.send_keys(temperature_to_consumer)
            entered_temperature_to_consumer = input_temperature_to_consumer.get_attribute('value')
            assert entered_temperature_to_consumer == temperature_to_consumer, \
                f'Введенное значение Температура к потребителю - ({entered_temperature_to_consumer}) не соответствует' \
                f' ожидаемому - ({temperature_to_consumer})'

    def entering_temperature_from_consumer(self, temperature_from_consumer: str):
        """Ввод Темературы от потребителю"""
        with allure.step('Ввод Темературы от потребителю'):
            self.waiting_element_is_visibility_on_the_page(
                PtoBindingModuleLocators.LOCATOR_INPUT_TEMPERATURE_FROM_CONSUMER,
                sec=5)
            input_temperature_from_consumer = self.find_element(
                PtoBindingModuleLocators.LOCATOR_INPUT_TEMPERATURE_FROM_CONSUMER)
            input_temperature_from_consumer.send_keys(temperature_from_consumer)
            entered_temperature_from_consumer = input_temperature_from_consumer.get_attribute('value')
            assert entered_temperature_from_consumer == temperature_from_consumer, \
                f'Введенное значение Температура от потребителю - ({entered_temperature_from_consumer}) не соответствует' \
                f' ожидаемому - ({temperature_from_consumer})'

    def click_btn_save_and_exit(self):
        """Клик по кнопке Сохранить и выйти"""
        with allure.step('Клик по кнопке Сохранить и выйти'):
            self.expecting_clickability(HydraulicModuleLocators.LOCATOR_BTN_SAVE_AND_EXIT)
            btn_save_and_exit = self.find_element(HydraulicModuleLocators.LOCATOR_BTN_SAVE_AND_EXIT)
            btn_save_and_exit.click()
            self.waiting_element_is_visibility_on_the_page(BhuSelectLocators.LOCATOR_HEADER, sec=10)
