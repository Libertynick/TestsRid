import time
from datetime import datetime

import allure
from selenium.common import TimeoutException
from selenium.webdriver import Keys

from base_page.base_page import BasePage
from base_page.base_page_locators import BaseOpenLocators
from base_page.raise_exceptions import MyTimeoutException
from open_pages.confirmation_page.confirmation_page_locators import ConfirmationPageLocators
from open_pages.design_condition_page.design_condition_locators import DesignConditionLocators
from open_pages.order_details_page.order_details_page_locators import OrderDetailsLocators


@allure.feature('Страница Подтверждение')
class ConfirmationPage(BasePage):
    """Страница Подтверждение"""

    def store_all_discounts_on_the_confirmation_page(self) -> list:
        """Сохранение всех скидок на странице Подтверждение"""
        with allure.step('Сохранение всех скидок на странице Подтверждение'):
            all_discounts = self.driver.find_elements(*ConfirmationPageLocators.LOCATOR_ALL_DISCOUNTS_CONFIRMATION)
            list_all_discounts = []
            for discount in all_discounts:
                list_all_discounts.append(float(discount.text.replace('%', '')))
            return list_all_discounts

    def store_total_cost_on_the_confirmation_page(self) -> float:
        """Сохранение итоговой стоимости на странице Подтверждение"""
        with allure.step('Сохранение итоговой стоимости на странице Подтверждение'):
            total_cost_list = self.driver.find_elements(*ConfirmationPageLocators.LOCATOR_TOTAL_COST_CONFIRMATION)
            total_cost = [float(cost.text.replace(' ', '')) for cost in total_cost_list]
            total_cost = sum(total_cost)
            return round(total_cost, 2)

    def store_all_allowance(self) -> list:
        """Сохранение всех надбавок"""
        with allure.step('Сохранение всех надбавок'):
            all_allowance = self.driver.find_elements(*ConfirmationPageLocators.LOCATOR_ALL_ALLOWANCE)
            all_allowance = [int(allowance.text.replace('%', '')) for allowance in all_allowance]
            return all_allowance

    def store_terms_of_payment(self) -> str:
        """Сохранение условий оплаты"""
        with allure.step('Сохранение условий оплаты'):
            terms_of_payment = self.find_element(ConfirmationPageLocators.LOCATOR_TERMS_OF_PAYMENT).text
            return terms_of_payment

    def input_comment(self):
        """Ввод комментария"""
        with allure.step('Ввод комментария'):
            comment = 'Тестирование!!! selenium_web\n123 123'
            input_field = self.find_element(ConfirmationPageLocators.LOCATOR_COMMENT_FIELD)
            input_field.send_keys(comment)

    def choice_of_delivery_method_material(self, delivery_method: str):
        """Выбор способа доставки материалы, delivery_method- способ доставки"""
        with allure.step('Выбор способа доставки материалы, delivery_method- способ доставки'):
            time.sleep(1)
            delivery_method_selection_field = self.find_element(
                ConfirmationPageLocators.LOCATOR_SHIPPING_METHOD_MATERIAL)

            delivery_method_selection_field.click()
            self.waiting_element_is_visibility_on_the_page(
                ConfirmationPageLocators.locator_delivery_method_at_materials(delivery_method))
            item_delivery_method = self.find_element(
                ConfirmationPageLocators.locator_delivery_method_at_materials(delivery_method))
            item_delivery_method.click()
            selected_delivery_method = self.find_element(
                ConfirmationPageLocators.LOCATOR_SELECTED_SHIPPING_METHOD_AT_MATERIALS).text
            assert delivery_method in selected_delivery_method, \
                f'Выбранный способ доставки у материалов - ({selected_delivery_method}) не соответствует ожидаемому - ' \
                f'({delivery_method})'

    def choice_of_delivery_method_pto(self, delivery_method: str):
        """Выбор способа доставки пто, delivery_method- способ доставки"""
        with allure.step('Выбор способа доставки пто, delivery_method- способ доставки'):
            time.sleep(1)
            delivery_method_selection_field = self.find_element(ConfirmationPageLocators.LOCATOR_SHIPPING_METHOD_PTO)

            delivery_method_selection_field.click()
            self.waiting_element_is_visibility_on_the_page(
                ConfirmationPageLocators.locator_delivery_method_at_pto(delivery_method))
            item_delivery_method = self.find_element(
                ConfirmationPageLocators.locator_delivery_method_at_pto(delivery_method))
            item_delivery_method.click()
            selected_delivery_method = self.find_element(
                ConfirmationPageLocators.LOCATOR_SELECTED_SHIPPING_METHOD_AT_PTO
            ).text
            assert delivery_method in selected_delivery_method, \
                f'Выбранный способ доставки у ПТО - ({selected_delivery_method}) не соответствует ожидаемому - ' \
                f'({delivery_method})'

    def entering_delivery_address_pto(self, delivery_address: str):
        """Ввод адреса доставки ПТО"""
        with allure.step('Ввод адреса доставки ПТО'):
            input_delivery_address_pto = self.find_element(ConfirmationPageLocators.LOCATOR_INPUT_DELIVERY_ADDRESS_PTO)
            input_delivery_address_pto.send_keys(delivery_address)
            self.waiting_element_is_visibility_on_the_page(
                ConfirmationPageLocators.locator_delivery_address_in_drop_down_list_of_addresses(delivery_address),
                sec=60)
            delivery_address_in_drop_down_list_of_addresses = self.find_element(
                ConfirmationPageLocators.locator_delivery_address_in_drop_down_list_of_addresses(delivery_address))
            self.click_js(delivery_address_in_drop_down_list_of_addresses)

            selected_delivery_address_pto = input_delivery_address_pto.get_attribute('value')
            assert selected_delivery_address_pto == delivery_address, \
                f'Выбранный способ доставки ПТО- ({selected_delivery_address_pto}) не соответствует ожидаемому - ' \
                f'({delivery_address})'

    def clickability_check_shipment_only_when_fully_assembled(self):
        """Проверка кликабельности чек-бокса Отгрузка только при полной комплектации"""
        with allure.step('Проверка кликабельности чек-бокса Отгрузка только при полной комплектации'):
            check_box = self.find_element(ConfirmationPageLocators.LOCATOR_CHECK_BOX_SHIPMENT_ONLY_WHEN_FULLY_ASSEMBLED)
            clickability_check_box = check_box.get_attribute("disabled")
            print(clickability_check_box)
            assert clickability_check_box is None, f'Чек-бокс Отгрузка только при полной комплектации не кликабелен'

    def check_box_shipment_only_when_fully_assembled_must_not_be_selected(self):
        """Чек бокс Отгрузка только при полной комплектации должен быть не выбран"""
        with allure.step('Проверка Чек бокс Отгрузка только при полной комплектации должен быть не выбран'):
            check_box = self.find_element(ConfirmationPageLocators.LOCATOR_CHECK_BOX_SHIPMENT_ONLY_WHEN_FULLY_ASSEMBLED)
            not_selected_check_box = check_box.is_selected()
            assert not_selected_check_box is False, \
                f'чек бокс Отгрузка только при полной комплектации выбран - ({not_selected_check_box})'

    def checkbox_shipment_only_when_fully_loaded_must_be_selected(self):
        """чек бокс Отгрузка только при полной комплектации должен быть выбран"""
        with allure.step('Проверка чек бокс Отгрузка только при полной комплектации должен быть выбран'):
            check_box = self.find_element(ConfirmationPageLocators.LOCATOR_CHECK_BOX_SHIPMENT_ONLY_WHEN_FULLY_ASSEMBLED)
            not_selected_check_box = check_box.is_selected()
            assert not_selected_check_box is True, \
                f'чек бокс Отгрузка только при полной комплектации выбран - ({not_selected_check_box})'

    def checking_the_address_of_the_warehouse_during_self_delivery_materials(self):
        """Проверка адреса склада при самовывозе у материалов"""
        with allure.step('Проверка адреса склада при самовывозе у материалов'):
            correct_address = 'Московская обл., Истра, деревня Лешково, д 217'
            correct_address = ''.join(correct_address.split())
            self.waiting_element_is_visibility_on_the_page(ConfirmationPageLocators.LOCATOR_WAREHOUSE_ADDRESS_MATERIALS)
            field_warehouse_address = self.find_element(
                ConfirmationPageLocators.LOCATOR_WAREHOUSE_ADDRESS_MATERIALS).text
            field_warehouse_address = ''.join(field_warehouse_address.split())
            assert field_warehouse_address == correct_address, \
                f'Адрес доставки при самомвывозе у материалов некорректный - ({field_warehouse_address}). ' \
                f'Корректный адрес - ({correct_address})'

    def checking_the_address_of_the_warehouse_during_self_delivery_pto(self):
        """Проверка адреса склада при самовывозе у ПТО"""
        with allure.step('Проверка адреса склада при самовывозе у ПТО'):
            correct_address = 'Нижегородская обл., Дзержинск, ул. Учебная, д 1А'
            correct_address = ''.join(correct_address.split())
            self.waiting_element_is_visibility_on_the_page(ConfirmationPageLocators.LOCATOR_WAREHOUSE_ADDRESS_PTO)
            field_warehouse_address = self.find_element(ConfirmationPageLocators.LOCATOR_WAREHOUSE_ADDRESS_PTO).text
            field_warehouse_address = ''.join(field_warehouse_address.split())
            assert field_warehouse_address == correct_address, \
                f'Адрес доставки при самомвывозе у материалов некорректный - ({field_warehouse_address}). ' \
                f'Корректный адрес - ({correct_address})'

    def warehouse_address_verification_upon_delivery_to_the_warehouse_pto(self):
        """Проверка адреса склада при доставке до склада у пто"""
        with allure.step('Проверка адреса склада при доставке до склада у пто'):
            correct_address = ['гВоронеж', 'гЕкатеринбург', 'Московскаяобл,гВидное,дАпаринки,д5/2']
            # correct_address = ''.join(correct_address.split())
            self.waiting_element_is_visibility_on_the_page(ConfirmationPageLocators.LOCATOR_WAREHOUSE_ADDRESS_PTO)
            field_warehouse_address = self.find_element(ConfirmationPageLocators.LOCATOR_WAREHOUSE_ADDRESS_PTO).text
            field_warehouse_address = ''.join(field_warehouse_address.split())
            assert field_warehouse_address in correct_address or field_warehouse_address != '', \
                f'Адрес склада у пто некорректный - ({field_warehouse_address}).' \
                f' Корректный адрес - ({correct_address})'

    def must_be_prepaid(self):
        """Должны быть условия оплаты - предоплата"""
        with allure.step('Должны быть условия оплаты - предоплата'):
            true_terms_of_payment = 'Предоплата'
            terms_of_payment = self.find_element(ConfirmationPageLocators.LOCATOR_TERMS_OF_PAYMENT).text
            assert terms_of_payment == true_terms_of_payment, \
                f'Выбранные условия оплаты - ({terms_of_payment}) не ({true_terms_of_payment})'

    def choice_of_payment_terms(self, terms_of_payment: str):
        """Выбор условия оплаты
        terms_of_payment - условия оплаты
        """
        with allure.step('Выбор условий оплаты'):
            scroll_to = self.find_element(ConfirmationPageLocators.LOCATOR_BUTTON_PROJECT_ORDER)
            self.scroll_to(scroll_to)
            self.waiting_element_is_visibility_on_the_page(ConfirmationPageLocators.LOCATOR_TERMS_OF_PAYMENT, sec=5)
            terms_of_payment_menu = self.find_element(ConfirmationPageLocators.LOCATOR_TERMS_OF_PAYMENT)
            self.click_js(terms_of_payment_menu)

            item_terms_of_payment_locator = ConfirmationPageLocators.dynamic_payment_terms_locator(terms_of_payment)
            item_terms_of_payment = self.find_element(item_terms_of_payment_locator)
            self.expecting_clickability(item_terms_of_payment_locator)
            self.click_js(item_terms_of_payment)
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
            selected_payment_terms = self.find_element(ConfirmationPageLocators.LOCATOR_SELECTED_PAYMENT_TERMS).text
            assert selected_payment_terms == terms_of_payment, \
                f'Выбранные условия оплаты - ({selected_payment_terms}) не соответствуют ожидаемым - ({terms_of_payment})'

    def click_button_confirm(self):
        """Клик по кнопке Подтвердить"""
        with allure.step('Клик по кнопке Подтвердить'):
            button_confirm = self.find_element(ConfirmationPageLocators.LOCATOR_BUTTON_CONFIRM)
            self.driver.execute_script("arguments[0].click()", button_confirm)
            self.waiting_element_is_visibility_located_dom(ConfirmationPageLocators.LOCATOR_HEADER_ORDER_IS_PLACED,
                                                           sec=120)

    def checking_the_selected_delivery(self, true_type_delivery: str):
        """Проверка выбранной доставки, true_type_delivery - Ожидаемый способ доставки"""
        with allure.step('Проверка выбранной доставки'):
            selected_delivery_method = self.find_element(
                ConfirmationPageLocators.LOCATOR_SELECTED_SHIPPING_METHOD_AT_MATERIALS).text
            assert true_type_delivery in selected_delivery_method, \
                f'Выбранная доставка - ({selected_delivery_method}) не соответствует нужной доставке - ({true_type_delivery})'

    def materials_must_be_self_pickup(self):
        """Должен быть самовывоз у материалов"""
        with allure.step('Должен быть самовывоз у материалов'):
            true_delivery_method = 'Самовывоз'
            selected_delivery_method = self.find_element(ConfirmationPageLocators.LOCATOR_SHIPPING_METHOD_MATERIAL).text
            assert selected_delivery_method == true_delivery_method, \
                f'Выбранный способ доставки у материалов- ({selected_delivery_method}) не ({true_delivery_method})'

    def pto_must_be_self_pickup(self):
        """Должен быть самовывоз у ПТО"""
        with allure.step('Должен быть самовывоз у ПТО'):
            true_delivery_method = 'Самовывоз'
            selected_delivery_method = self.find_element(ConfirmationPageLocators.LOCATOR_SHIPPING_METHOD_PTO).text
            assert selected_delivery_method == true_delivery_method, \
                f'Выбранный способ доставки у ПТО - ({selected_delivery_method}) не ({true_delivery_method})'

    def delivery_method_must_be_free(self):
        """Способ доставки должен быть бесплатным"""
        with allure.step('Способ доставки должен быть бесплатным'):
            true_delivery_method = 'Бесплатная доставка на указанный адрес'
            delivery_method_on_page = self.find_element(ConfirmationPageLocators.LOCATOR_SHIPPING_METHOD_MATERIAL).text
            assert true_delivery_method == delivery_method_on_page, \
                f'Доставка на странице Подтверждение - ({delivery_method_on_page}) не соответствует ожидаемой доставке - ' \
                f'({true_delivery_method})'

    def save_to_excel(self, num_pq: str):
        """Сохранение в Excel"""
        with allure.step('Сохранение в Excel'):
            now = datetime.now().strftime("%d_%m_%Y")
            name_file = f'{num_pq}_{now}.xlsx'
            count_download = 0
            button_unload_list = self.driver.find_elements(*ConfirmationPageLocators.LOCATOR_UNLOAD_BUTTON)

            for button in button_unload_list:
                self.driver.execute_script("arguments[0].click()", button)
                self.waiting_element_is_visibility_located_dom(ConfirmationPageLocators.LOCATOR_BUTTON_SAVE_TO_EXCEL)
                button_save_to_excel = self.find_element(ConfirmationPageLocators.LOCATOR_BUTTON_SAVE_TO_EXCEL)
                self.click_js(button_save_to_excel)
                time.sleep(1)
                self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
                if count_download > 0:
                    name_file = f'{num_pq}_{now} ({count_download}).xlsx'
                self.checking_the_download_document_in_the_download_folder(name_file)
                count_download += 1

    def dkp_link_open_check(self):
        """Проверка кликабельности ссылок ДКП"""
        with allure.step('Проверка кликабельности ссылок ДКП'):
            links_dkp = self.driver.find_elements(*ConfirmationPageLocators.LOCATOR_LINKS_TO_CREATED_DKP)
            confirmation_window = self.driver.current_window_handle
            window = -1
            for link in links_dkp:
                body = self.find_element(ConfirmationPageLocators.LOCATOR_BODY)
                body.send_keys(Keys.PAGE_UP)
                body.send_keys(Keys.PAGE_UP)
                time.sleep(1)
                self.ctrl_click_link(link)
                time.sleep(1)
                self.switching_window(window)
                self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
                self.waiting_element_is_visibility_on_the_page(OrderDetailsLocators.LOCATOR_H1_ORDER)
                self.driver.switch_to.window(confirmation_window)
                self.waiting_element_is_visibility_on_the_page(ConfirmationPageLocators.LOCATOR_HEADER_ORDER_IS_PLACED)

    def save_all_num_dkp(self) -> list:
        """Сохранение всех номеров ДКП"""
        with allure.step('Сохранение всех номеров ДКП'):
            self.waiting_element_is_visibility_located_dom(ConfirmationPageLocators.LOCATOR_LINKS_TO_CREATED_DKP, sec=5)
            list_num_dkp = self.find_elements(ConfirmationPageLocators.LOCATOR_LINKS_TO_CREATED_DKP)
            list_num_dkp = [num.text for num in list_num_dkp]
            return list_num_dkp

    def click_on_the_button_to_return_to_pq(self):
        """Клик по кнопке Вернуться в PQ"""
        with allure.step('Клик по кнопке Вернуться в PQ'):
            button_return_to_pq = self.find_element(ConfirmationPageLocators.LOCATOR_BUTTON_RETURN_TO_PQ)
            self.click_js(button_return_to_pq)
            time.sleep(1)
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
            self.waiting_element_is_visibility_on_the_page(DesignConditionLocators.LOCATOR_HEADER)

    def warehouse_address_verification_upon_delivery_to_the_warehouse_pto_prod(self):
        """Проверка адреса склада при доставке до склада у пто"""
        with allure.step('Проверка адреса склада при доставке до склада у пто'):
            correct_address = 'Нижегородская обл., Дзержинск, ул. Учебная, д 1А'
            correct_address = ''.join(correct_address.split())
            self.waiting_element_is_visibility_on_the_page(ConfirmationPageLocators.LOCATOR_WAREHOUSE_ADDRESS_PTO)
            field_warehouse_address = self.find_element(ConfirmationPageLocators.LOCATOR_WAREHOUSE_ADDRESS_PTO).text
            field_warehouse_address = ''.join(field_warehouse_address.split())
            assert field_warehouse_address == correct_address, \
                f'Адрес склада у пто некорректный - ({field_warehouse_address}).' \
                f' Корректный адрес - ({correct_address})'

    def check_delivery_address_pto(self, expected_delivery_address: str):
        """Проверка адреса доставки ПТО
        expected_delivery_address - ожидаемый адес доставки
        """
        with allure.step('Проверка адреса доставки ПТО'):
            delivery_address_on_page = self.find_element(ConfirmationPageLocators.LOCATOR_INPUT_DELIVERY_ADDRESS_PTO
                                                         ).get_attribute('value')
            print(delivery_address_on_page)
            assert expected_delivery_address in delivery_address_on_page, \
                f'Ожидаемый адрес доставки ПТО - ({expected_delivery_address}) не соответствует адресу доставки ПТО ' \
                f'на странице - ({delivery_address_on_page})'

    def check_delivery_address_materials(self, expected_delivery_address: str):
        """Проверка адреса доставки материалов
                expected_delivery_address - ожидаемый адес доставки
                """
        with allure.step('Проверка адреса доставки материалов'):
            delivery_address_on_page = self.find_element(
                ConfirmationPageLocators.LOCATOR_INPUT_DELIVERY_ADDRESS_MATERIALS
            ).get_attribute('value').strip()

            assert expected_delivery_address == delivery_address_on_page, \
                f'Ожидаемый адрес доставки материалов - ({expected_delivery_address}) не соответствует адресу доставки ' \
                f'материалов на странице - ({delivery_address_on_page})'

    def save_shipping_cost_pto(self) -> float:
        """Сохранение стоимости доставки у ПТО"""
        with allure.step('Сохранение стоимости доставки у ПТО'):
            self.waiting_element_is_visibility_located_dom(ConfirmationPageLocators.LOCATOR_SHIPPING_COST_FIELD_PTO)
            shipping_cost_pto = self.find_element(ConfirmationPageLocators.LOCATOR_SHIPPING_COST_FIELD_PTO
                                                  ).get_attribute('value')
            if shipping_cost_pto == '':
                raise ValueError(f'Поле стоимости доставки пустое!')
            else:
                shipping_cost_pto = round(float(shipping_cost_pto), 2)
                return shipping_cost_pto

    def click_on_button_to_calculate_shipping_costs_for_materials(self):
        """Клик по кнопке рассчитать стоимость доставки у материалов"""
        with allure.step('Клик по кнопке рассчитать стоимость доставки у материалов'):
            self.expecting_clickability(ConfirmationPageLocators.LOCATOR_BUTTON_CALCULATE_DELIVERY_COSTS_MATERIALS,
                                        sec=5)
            btn_calculate = self.find_element(
                ConfirmationPageLocators.LOCATOR_BUTTON_CALCULATE_DELIVERY_COSTS_MATERIALS)
            input_address_materials = self.find_element(
                ConfirmationPageLocators.LOCATOR_INPUT_DELIVERY_ADDRESS_MATERIALS)
            self.scroll_to(input_address_materials)
            time.sleep(0.2)
            btn_calculate.click()
            time.sleep(0.2)
            self.waiting_for_loader_processing_in_dom(
                ConfirmationPageLocators.LOCATOR_LOADER_BUTTON_CALCULATE_DELIVERY_COSTS, sec=20)
            shipping_cost = self.find_element(ConfirmationPageLocators.LOCATOR_SHIPPING_COST_FIELD_MATERIALS
                                              ).get_attribute('value')
            assert float(shipping_cost) != 0.0, \
                f'Стоимость доставки Материалы - ({float(shipping_cost)}) равна 0 или в поле не цифры'

    def calculate_delivery_costs_pto(self):
        """Расчет стоимости доставки"""
        with allure.step('Расчет стоимости доставки'):
            self.expecting_clickability(ConfirmationPageLocators.LOCATOR_BUTTON_CALCULATE_DELIVERY_COSTS_PTO)
            btn_calculate = self.find_element(ConfirmationPageLocators.LOCATOR_BUTTON_CALCULATE_DELIVERY_COSTS_PTO)
            input_address_pto = self.find_element(ConfirmationPageLocators.LOCATOR_INPUT_DELIVERY_ADDRESS_PTO)
            self.scroll_to(input_address_pto)
            self.expecting_clickability(ConfirmationPageLocators.LOCATOR_BUTTON_CALCULATE_DELIVERY_COSTS_PTO)
            btn_calculate.click()
            time.sleep(0.5)
            self.waiting_for_loader_processing_in_dom(
                ConfirmationPageLocators.LOCATOR_LOADER_BUTTON_CALCULATE_DELIVERY_COSTS,
                sec=15)
            shipping_cost_pto = self.find_element(ConfirmationPageLocators.LOCATOR_SHIPPING_COST_FIELD_PTO
                                                  ).get_attribute('value')
            assert float(shipping_cost_pto) != 0.0, \
                f'Стоимость доставки ПТО - ({float(shipping_cost_pto)}) равна 0 или в поле не цифры'

    def save_list_articles_in_confirmation_page_in_pq(self) -> list:
        """Сохранение списка артикулов в
        Проектном условии"""
        with allure.step('Сохранение списка артикулов в Проектном условии'):
            self.waiting_element_is_visibility_on_the_page(ConfirmationPageLocators.LOCATOR_CODE_IN_PQ, sec=10)

            name_codes_link_in_cart = self.driver.find_elements(*ConfirmationPageLocators.LOCATOR_CODE_IN_PQ)
            name_codes_link_in_cart = [codes.text for codes in name_codes_link_in_cart]

            return name_codes_link_in_cart

    def save_count_article_all_lines(self) -> list:
        """Сохранение количества у кода на всех линиях"""
        with allure.step('Сохранение количества у кода на всех линиях'):
            self.waiting_element_is_visibility_located_dom(ConfirmationPageLocators.LOCATOR_COUNT_CODE, sec=5)
            count_article = self.find_elements(ConfirmationPageLocators.LOCATOR_COUNT_CODE)
            count_article = [count.text for count in count_article]
            return count_article

    def save_count_by_article(self, article: str) -> dict:
        """
        Сохранение количества штук по артикулу
        :param article: Артикул товара
        :return: Словарь артикул: количество
        """
        with allure.step(f'Сохранение количества штук по артикулу {article}'):
            dict_count_by_article = {}
            self.waiting_element_is_visibility_located_dom(ConfirmationPageLocators.locator_count_by_article(article),
                                                           sec=3)
            count = self.find_element(ConfirmationPageLocators.locator_count_by_article(article)).text
            dict_count_by_article[article] = count
            return dict_count_by_article

    def check_modal_content(self, expected_text_in_modal: str):
        """
        Проверка текста в модалке, отображаемой на странице
        :param expected_text_in_modal: Текст в модалке
        """
        with allure.step('Проверка текста в модалке, отображаемой на странице'):
            try:
                self.waiting_element_is_visibility_on_the_page(ConfirmationPageLocators.LOCATOR_MODAL_SHOW, sec=5)
                text_in_modal = self.find_element(ConfirmationPageLocators.LOCATOR_MODAL_SHOW).text
                assert expected_text_in_modal in text_in_modal, \
                    f'Ожидаемого текста - ({expected_text_in_modal}) нет в модалке - ({text_in_modal})'
            except TimeoutException:
                raise MyTimeoutException('Модалка не отображается на странице')
