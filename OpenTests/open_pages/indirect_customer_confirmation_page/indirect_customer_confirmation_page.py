import time

import allure
from selenium.webdriver.common.by import By

from base_page.base_page import BasePage
from open_pages.indirect_customer_confirmation_page.indirect_customer_confirmation_locators import \
    IndirectCustomerConfirmationLocators, ModalWindowForCreatingAnOrderLocators


@allure.feature('Страница Подтверждение непрямого клиента')
class IndirectCustomerConfirmationPage(BasePage):
    """Страница Подтверждение непрямого клиента"""

    def store_all_discounts_on_the_confirmation_page(self) -> list:
        """Сохранение всех скидок на странице Подтверждение"""
        with allure.step('Сохранение всех скидок на странице Подтверждение'):
            all_discounts = self.driver.find_elements(
                *IndirectCustomerConfirmationLocators.LOCATOR_ALL_DISCOUNTS_CONFIRMATION)
            list_all_discounts = []
            for discount in all_discounts:
                list_all_discounts.append(discount.text.replace('%', ''))
            return list_all_discounts

    def store_total_cost_on_the_confirmation_page(self) -> float:
        """Сохранение итоговой стоимости на странице Подтверждение"""
        with allure.step('Сохранение итоговой стоимости на странице Подтверждение'):
            total_cost = self.find_element(IndirectCustomerConfirmationLocators.LOCATOR_TOTAL_COST_CONFIRMATION).text
            total_cost = float(''.join(total_cost.split()))
            return total_cost

    def saving_the_selected_distributor(self) -> str:
        """Сохранение выбранного дистрибьютора"""
        with allure.step('Сохранение выбранного дистрибьютора'):
            selected_distributor = self.find_element(
                IndirectCustomerConfirmationLocators.LOCATOR_SELECTED_DISTRIBUTOR).text
            return selected_distributor

    def choice_of_desired_payment_terms(self, desired_payment_terms: str):
        """Выбор желаемых условий оплаты, desired_payment_terms - желаемые условия оплаты"""
        with allure.step('Выбор желаемых условий оплаты'):
            header_delivery_address = self.find_element(
                IndirectCustomerConfirmationLocators.LOCATOR_HEADER_DELIVERY_ADDRESS)
            locator_desired_payment_terms = (By.XPATH, f"//li[contains(text(), '{desired_payment_terms}')]")

            ul_desired_payment_terms = self.find_element(
                IndirectCustomerConfirmationLocators.LOCATOR_DESIRED_PAYMENT_TERMS)
            self.scroll_to_elem_perform(header_delivery_address)
            time.sleep(0.5)
            # self.driver.execute_script("arguments[0].click()", ul_desired_payment_terms)
            ul_desired_payment_terms.click()
            self.waiting_element_is_visibility_on_the_page(locator_desired_payment_terms)
            item_desired_payment_terms = self.find_element(locator_desired_payment_terms)
            item_desired_payment_terms.click()
            selected_payment_terms = self.find_element(
                IndirectCustomerConfirmationLocators.LOCATOR_SELECTED_PAYMENT_TERMS).text.strip()
            desired_payment_terms = desired_payment_terms.strip()
            assert selected_payment_terms == desired_payment_terms, f'Выбранные условия оплаты - ({selected_payment_terms}) ' \
                                                                    f'не равны желаемым - ({desired_payment_terms})'

    def choice_of_desired_delivery_terms(self, desired_delivery_terms: str):
        """Выбор желаемых условий доставки
        desired_delivery_terms - желаемые условия доставки
        """
        with allure.step('Выбор желаемых условий доставки'):
            locator_delivery_terms = (By.XPATH, f"//li[contains(text(), '{desired_delivery_terms}')]")
            ul_delivery_terms = self.find_element(IndirectCustomerConfirmationLocators.LOCATOR_DESIRED_DELIVERY_TERMS)
            ul_delivery_terms.click()
            self.waiting_element_is_visibility_on_the_page(locator_delivery_terms)
            item_delivery_terms = self.find_element(locator_delivery_terms)
            item_delivery_terms.click()
            selected_delivery_terms = self.find_element(
                IndirectCustomerConfirmationLocators.LOCATOR_SELECTED_DELIVERY_TERMS).text.strip()
            desired_delivery_terms = desired_delivery_terms.strip()
            assert selected_delivery_terms == desired_delivery_terms, \
                f'Выбранные условия доставки - ({selected_delivery_terms}) не равны желаемым - ({desired_delivery_terms})'

    def choice_of_delivery_address(self, delivery_address: str):
        """Выбор адреса доставки
        delivery_address - адрес доставки
        """
        with allure.step('Выбор адреса доставки'):
            header_contact_information = self.find_element(
                IndirectCustomerConfirmationLocators.LOCATOR_HEADER_CONTACT_INFORMATION)
            self.scroll_to_elem_perform(header_contact_information)
            time.sleep(0.5)

            input_delivery_address = self.find_element(
                IndirectCustomerConfirmationLocators.LOCATOR_INPUT_DELIVERY_ADDRESS)
            input_delivery_address.send_keys(delivery_address)
            time.sleep(1)
            self.waiting_element_is_visibility_on_the_page(
                IndirectCustomerConfirmationLocators.LOCATOR_BLOCK_RESULT_SEARCH_DELIVERY_ADDRESS)
            locator_desired_shipping_address = (By.XPATH, f"//div[contains(text(), '{delivery_address}')]")
            desired_shipping_address = self.find_element(locator_desired_shipping_address)
            desired_shipping_address.click()
            selected_delivery_address = input_delivery_address.get_attribute("value")
            assert selected_delivery_address == delivery_address, f'Выбранный адрес - ({selected_delivery_address}) ' \
                                                                  f'не соответствует желаемому - ({delivery_address})'

    def input_comment_from_delivery(self) -> str:
        """Ввод комментария для доставки"""
        with allure.step('Ввод комментария для доставки'):
            comment = 'test_selenium web 123'
            input_comment = self.find_element(IndirectCustomerConfirmationLocators.LOCATOR_INPUT_COMMENT_FROM_DELIVERY)
            input_comment.send_keys(comment)
            return comment

    def input_order_comment(self) -> str:
        """Ввод комментария к заказу"""
        with allure.step('Ввод комментария к заказу'):
            comment = '123'
            input_comment = self.find_element(IndirectCustomerConfirmationLocators.LOCATOR_INPUT_COMMENT)
            input_comment.send_keys(comment)
            return comment

    def click_button_confirm(self):
        """Клик по кнопке Подтвердить"""
        with allure.step('Клик по кнопке Подтвердить'):
            button_confirm = self.find_element(IndirectCustomerConfirmationLocators.LOCATOR_BUTTON_CONFIRM)
            self.scroll_to_elem_perform(button_confirm)
            self.expecting_clickability(IndirectCustomerConfirmationLocators.LOCATOR_BUTTON_CONFIRM)
            self.click_js(button_confirm)
            time.sleep(1)
            self.waiting_for_loader_processing_in_dom(IndirectCustomerConfirmationLocators.LOCATOR_NO_LOADER)
            self.waiting_element_is_visibility_located_dom(ModalWindowForCreatingAnOrderLocators.LOCATOR_HEADER, sec=40)

    def save_number_application(self) -> str:
        """Сохранение номера заявки"""
        with allure.step('Сохранение номера заявки'):
            num_application = self.find_element(ModalWindowForCreatingAnOrderLocators.LOCATOR_NUMBER_APPLICATION).text
            assert len(num_application) != 0, f'Строка с номером заявки пустая - ({num_application})'
            return num_application

    def click_button_more(self, num_application: str):
        """Клик по кнопке Подробнее
        num_application - заявка на покупку
        """
        with allure.step('Клик по кнопке Подробнее'):
            locator_h1 = (By.XPATH, f"//h1[text()=' Заявка на покупку {num_application} ']")

            button_more = self.find_element(ModalWindowForCreatingAnOrderLocators.LOCATOR_BUTTON_MORE)
            button_more.click()
            self.waiting_element_is_visibility_on_the_page(locator_h1)
