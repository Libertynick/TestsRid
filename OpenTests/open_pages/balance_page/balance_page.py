import allure

from base_page.base_page import BasePage
from base_page.base_page_locators import BaseOpenLocators
from open_pages.balance_page.balance_page_locators import BalancePageLocators
from selenium.webdriver.common.keys import Keys

from open_pages.order_details_page.order_details_page_locators import OrderDetailsLocators


@allure.feature('Страница Баланс')
class BalancePage(BasePage):
    """Страница Баланс"""

    def choice_of_inn(self, num_inn: str):
        """Выбор ИНН"""
        with allure.step('Выбор ИНН'):
            with allure.step('Раскрытие выпадающего списка'):
                self.waiting_element_is_visibility_on_the_page(BalancePageLocators.LOCATOR_BTN_INN_UL_DROP)
                btn_drop_ul_inn = self.find_element(BalancePageLocators.LOCATOR_BTN_INN_UL_DROP)
                btn_drop_ul_inn.click()
                self.waiting_element_is_visibility_on_the_page(
                    BalancePageLocators.locator_item_inn_in_drop_ul_by_num_inn(num_inn))
            with allure.step(f'Выбор ИНН {num_inn} в выпадающем списке'):
                item_inn = self.find_element(BalancePageLocators.locator_item_inn_in_drop_ul_by_num_inn(num_inn))
                item_inn.click()
                entered_inn = self.find_element(BalancePageLocators.LOCATOR_HIDDEN_INPUT_INN).get_attribute('value')
                assert entered_inn == num_inn, \
                    f'Выбранный номер ИНН - ({entered_inn}) не соответствует ожидаемому - ({num_inn})'

    def choice_of_salesman(self, salesman: str):
        """Выбор продавца"""
        with allure.step('Выбор продавца'):
            with allure.step('Раскрытие выпадающего списка'):
                self.waiting_element_is_visibility_on_the_page(BalancePageLocators.LOCATOR_BTN_SALESMAN_UL_DROP)
                btn_drop_ul_salesman = self.find_element(BalancePageLocators.LOCATOR_BTN_SALESMAN_UL_DROP)
                btn_drop_ul_salesman.click()
                self.waiting_element_is_visibility_on_the_page(
                    BalancePageLocators.locator_item_salesman_drop_ul_by_name_salesman(salesman))
            with allure.step(f'Выбор продавца {salesman} в выпадающем списке'):
                item_salesman = self.find_element(
                    BalancePageLocators.locator_item_salesman_drop_ul_by_name_salesman(salesman))
                item_salesman.click()

            entered_salesman = self.find_element(BalancePageLocators.LOCATOR_BTN_SALESMAN_UL_DROP).text
            assert entered_salesman == salesman, \
                f'Выбранный продавец - ({entered_salesman}) не соответствует ожидаемому - ({salesman})'

    def checking_selected_default_inn(self, num_inn: str):
        """Проверка выбранного ИНН по умолчанию"""
        with allure.step('Проверка выбранного ИНН по умолчанию'):
            self.waiting_element_is_visibility_on_the_page(BalancePageLocators.LOCATOR_BTN_INN_UL_DROP)
            entered_inn = self.find_element(BalancePageLocators.LOCATOR_HIDDEN_INPUT_INN).get_attribute('value')
            assert entered_inn == num_inn, \
                f'Выбранный номер ИНН - ({entered_inn}) не соответствует ожидаемому - ({num_inn})'

    def checking_selected_default_salesman(self, salesman: str):
        """Проверка выбранного продавца по умолчанию"""
        with allure.step('Проверка выбранного продавца по умолчанию'):
            self.waiting_element_is_visibility_on_the_page(BalancePageLocators.LOCATOR_BTN_SALESMAN_UL_DROP)
            entered_salesman = self.find_element(BalancePageLocators.LOCATOR_BTN_SALESMAN_UL_DROP).text
            assert entered_salesman == salesman, \
                f'Выбранный продавец - ({entered_salesman}) не соответствует ожидаемому - ({salesman})'

    def balance_including_advance_payment_should_not_be_empty_or_zero(self):
        """Баланс с учетом аванса не должен быть пустым и нулевым"""
        with allure.step('Баланс с учетом аванса не должен быть пустым и нулевым'):
            self.waiting_element_is_visibility_located_dom(
                BalancePageLocators.LOCATOR_VALUE_BALANCE_INCLUDING_ADVANCE_PAYMENT, sec=30)
            value_balance_including_advance_payment = self.find_element(
                BalancePageLocators.LOCATOR_VALUE_BALANCE_INCLUDING_ADVANCE_PAYMENT).text.replace('₽', '')
            assert value_balance_including_advance_payment != '' and value_balance_including_advance_payment != '0', \
                f'Значение Баланса с учетом аванса пустая строка или равно 0 - ({value_balance_including_advance_payment})'

    def advance_payment_must_not_be_empty_or_zero(self):
        """Аванс не должен быть пустым и нулевым"""
        with allure.step('Аванс не должен быть пустым и нулевым'):
            self.waiting_element_is_visibility_located_dom(BalancePageLocators.LOCATOR_VALUE_PREPAID_EXPENSE, sec=5)
            value_value_prepaid_expense = self.find_element(BalancePageLocators.LOCATOR_VALUE_PREPAID_EXPENSE
                                                            ).text.replace('₽', '')
            assert value_value_prepaid_expense != '' and value_value_prepaid_expense != '0', \
                f'Значение поля Аванс пустая строка или равно 0 - ({value_value_prepaid_expense})'

    def debt_must_not_be_empty_or_zero(self):
        """Значение поля Задолженность не должно быть пусты или равно 0"""
        with allure.step('Значение поля Задолженность не должно быть пусты или равно 0'):
            self.waiting_element_is_visibility_located_dom(BalancePageLocators.LOCATOR_VALUE_DEBT, sec=5)
            value_debt = self.find_element(BalancePageLocators.LOCATOR_VALUE_DEBT).text.replace('₽', '')
            assert value_debt != '' and value_debt != '0', \
                f'Значение поля Задолженность пустая строка или равно 0 - ({value_debt})'

    def filling_out_period_of_reconciliation_report(self, date_from: str, date_to: str):
        """Заполнение периода акта сверки
        date - чч.мм.гг
        """
        with allure.step('Заполнение периода акта сверки'):
            with allure.step(f'Заполнение поля Дата с'):
                self.waiting_element_is_visibility_on_the_page(
                    BalancePageLocators.LOCATOR_INPUT_FROM_DATE_PERIOD_OF_RECONCILIATION_REPORT, sec=5)
                input_date_from = self.find_element(BalancePageLocators.LOCATOR_INPUT_FROM_DATE_PERIOD_OF_RECONCILIATION_REPORT)
                input_date_from.clear()
                input_date_from.send_keys(Keys.HOME + date_from)

                header = self.find_element(BalancePageLocators.LOCATOR_HEADER)
                header.click()
            with allure.step('Заполнение поля Дата по'):
                input_date_to = self.find_element(BalancePageLocators.LOCATOR_INPUT_TO_DATE_PERIOD_OF_RECONCILIATION_REPORT)
                input_date_to.clear()
                input_date_to.send_keys(Keys.HOME + date_to)
                header.click()

            with allure.step('Проверка заполнения поля Дата с'):
                entered_date_from = input_date_from.get_attribute('value')
                assert entered_date_from == date_from, \
                    f'Введенная дата с - ({entered_date_from}) не соответствует ожидаемой дате с - ({date_from})'

            with allure.step('Проверка заполнения поля Дата по'):
                entered_date_to = input_date_to.get_attribute('value')
                assert entered_date_to == date_to, \
                    f'Введенная дат до - ({entered_date_to}) не соответствует ожидаемой дате до - ({date_to})'

    def click_btn_upload_reconciliation_report(self, date_from: str, date_to: str, num_inn: str):
        """Клик по кнопке Выгрузить акт сверки
        date - чч.мм.гг
        num_inn - ИНН компании
        """
        with allure.step('Проверка скачивания акта сверки'):
            name_file = f'Акт сверки по ИНН {num_inn} с {date_from} по {date_to}.pdf'
            self.delete_file_by_name_in_download_folder(name_file)

            self.waiting_element_is_visibility_on_the_page(BalancePageLocators.LOCATOR_BTN_UPLOAD_RECONCILIATION_REPORT)
            btn_upload_reconciliation_report = self.find_element(
                BalancePageLocators.LOCATOR_BTN_UPLOAD_RECONCILIATION_REPORT)
            btn_upload_reconciliation_report.click()
            self.waiting_element_is_visibility_located_dom(
                BalancePageLocators.LOCATOR_NO_LOADER_IN_BTN_UPLOAD_RECONCILIATION_REPORT, sec=90)
            self.checking_the_download_document_in_the_download_folder(name_file)
            self.delete_file_by_name_in_download_folder(name_file)

    def checking_functionality_of_link_to_an_order_that_is_not_overdue(self):
        """Проверка работоспособности ссылки на непросроченный заказ"""
        with allure.step('Проверка работоспособности ссылки на непросроченный заказ'):
            # num_order = 'RT24-032286'
            self.waiting_element_is_visibility_located_dom(BalancePageLocators.LOCATOR_LINK_TO_UNDUE_ORDER, sec=5)
            # link_to_undue_order = self.find_element(BalancePageLocators.locator_link_to_undue_order_by_number_order(
            #     num_order))
            link_to_undue_order = self.find_element(BalancePageLocators.LOCATOR_LINK_TO_UNDUE_ORDER)
            num_order = link_to_undue_order.text.split(' ')[0]

            self.ctrl_click_link(link_to_undue_order)
            self.switching_window(-1)
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
            self.waiting_element_is_visibility_on_the_page(OrderDetailsLocators.locator_header_order(num_order))

    def checking_that_at_least_one_column_in_column_number_and_date_upd_is_complete(self):
        """Проверка заполненности минимум одного столбца в колонке номер и дата УПД"""
        with allure.step('Проверка заполненности минимум одного столбца в колонке номер и дата УПД'):
            # Если в столбце Ожидаемая оплата есть хоть одно значение,
            # то делаем проверку на заполнение хотя бы одного столбца в Номер м дата УПД

            self.waiting_element_is_visibility_on_the_page(BalancePageLocators.LOCATOR_VALUE_IN_COLUMN_EXPECTED_PAYMENT,
                                                           sec=7)
            values_in_column_expected_payment = self.driver.find_elements(
                *BalancePageLocators.LOCATOR_VALUE_IN_COLUMN_EXPECTED_PAYMENT)
            values_in_column_expected_payment = [el for el in values_in_column_expected_payment if el.text != '']

            if len(values_in_column_expected_payment) > 0:

                value_list_column_number_and_date_upd = self.driver.find_elements(
                    *BalancePageLocators.LOCATOR_VALUE_IN_COLUMN_NUMBER_AND_DATE_UPD)
                value_list_column_number_and_date_upd = [value.text for value in value_list_column_number_and_date_upd]

                res = False

                for el in value_list_column_number_and_date_upd:
                    if el != '':
                        res = True
                        break

                assert res is True, f'В колонке Номер и дата УПД нет ни одной записи'

            else:
                print(f'Нет ни одного заполненного значения в колонке ожидаемая оплата - '
                      f'{len(values_in_column_expected_payment)}')
