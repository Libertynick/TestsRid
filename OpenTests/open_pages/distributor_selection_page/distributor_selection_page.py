import time

import allure

from base_page.base_page import BasePage
from open_pages.distributor_selection_page.distributor_selection_locators import DistributorSelectionLocators
from open_pages.indirect_customer_confirmation_page.indirect_customer_confirmation_locators import \
    IndirectCustomerConfirmationLocators


@allure.feature('Страница Выбор дистрибьютора у непрямого клиента')
class DistributorSelectionPage(BasePage):
    """Страница Выбор дистрибьютора у непрямого клиента"""

    def should_be_header_distributor_selection(self):
        """Должен быть заголовок Выбор дистрибьютора"""
        with allure.step('Проверка должен быть заголовок Выбор дистрибьютора'):
            self.waiting_element_is_visibility_located_dom(DistributorSelectionLocators.LOCATOR_NO_LOADER, sec=180)
            self.waiting_element_is_visibility_on_the_page(DistributorSelectionLocators.LOCATOR_HEADER)

    def should_be_cards_with_distributors_displayed(self):
        """Должны отображаться карточки с дистрибьюторами"""
        with allure.step('Проверка Должны отображаться карточки с дистрибьюторами'):
            cards_with_distributors = self.driver.find_elements(
                *DistributorSelectionLocators.LOCATOR_CARDS_WITH_DISTRIBUTORS)
            count_cards_with_distributors = len(cards_with_distributors)
            assert count_cards_with_distributors != 0, \
                f'На странице не отображаются карточки с дистрибьюторами - ({count_cards_with_distributors}) шт.'

    def select_distributor_card_vodokomfort(self):
        """Выбор карточки дистрибьютора Водокомфорт"""
        with allure.step('Выбор карточки дистрибьютора Водокомфорт'):
            distr = ' ООО фирма "ВОДОКОМФОРТ" '
            self.waiting_element_is_visibility_located_dom(
                DistributorSelectionLocators.LOCATOR_BUTTON_SELECT_DISTRIBUTOR_CARD_VODOKOMFORT)
            select_vodokomfort = self.find_element(
                DistributorSelectionLocators.LOCATOR_BUTTON_SELECT_DISTRIBUTOR_CARD_VODOKOMFORT)
            self.driver.execute_script("arguments[0].click()", select_vodokomfort)
            time.sleep(1)
            self.waiting_element_is_visibility_located_dom(IndirectCustomerConfirmationLocators.LOCATOR_NO_LOADER,
                                                           sec=90)
            selected_distr = self.find_element(IndirectCustomerConfirmationLocators.LOCATOR_SELECTED_DISTRIBUTOR).text
            assert selected_distr.strip() == distr.strip(), f'Выбранный дистрибьютор - ({selected_distr}) ' \
                                                            f'не соответствует искомому - ({distr})'
            print(selected_distr.strip(), distr.strip())
