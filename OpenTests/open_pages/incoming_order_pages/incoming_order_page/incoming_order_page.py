import time

import allure

from base_page.base_page import BasePage

from base_page.base_page_locators import BaseOpenLocators
from open_pages.cart_page.cart_locators import CartLocators
from open_pages.cart_page.cart_page import CartPage

from open_pages.incoming_order_pages.incoming_order_page.incoming_order_page_locators import IncomingOrderPageLocators


@allure.feature('Страница Входящий заказ')
class IncomingOrderPage(BasePage):
    """Страница Входящий заказ"""

    def should_be_title_incoming_order(self, num_application: str):
        """Должен быть заголовок вида Входящий заказ №DZ00001324
        num_application - номер заявки
        """
        with allure.step('Должен быть заголовок вида Входящий заказ №DZ00001324'):
            true_title = f'Входящий заказ №{num_application}'

            title_text = self.find_element(IncomingOrderPageLocators.LOCATOR_TITLE_INCOMING_ORDER).text
            title = title_text.split('/')[0].strip()
            assert true_title == title, f'Заголовок на странице - ({title}) не равен ожидаемому заголовку - ({true_title})'

    def should_be_on_the_indirect_client_organization_page(self, indirect_client_company: str):
        """Должна быть на странице организация непрямого клиента
        indirect_client_company- компания непрямого клиента
        """
        with allure.step('Должна быть на странице организация непрямого клиента'):
            company_on_the_page = self.find_element(IncomingOrderPageLocators.LOCATOR_COMPANY).text.strip()
            assert company_on_the_page == indirect_client_company, \
                f'Компания, отображаемая на странице Входящие заказы - ({company_on_the_page}) не соответствует компании ' \
                f'непрямого клиента - ({indirect_client_company})'

    def must_be_an_indirect_customer_contact(self, autor_application: str):
        """Должно быть контактное лицо непрямого клиента
        autor_application - Автор заявки
        """
        with allure.step('Должно быть контактное лицо непрямого клиента'):
            customer_contact = self.find_element(IncomingOrderPageLocators.LOCATOR_CUSTOMER_CONTACT).text.strip()
            assert customer_contact == autor_application, \
                f'Контактное лицо на странице Входящие заказы - ({customer_contact}) не соответствует имени пользователя ' \
                f'непрямого клиента - ({autor_application})'

    def must_be_a_delivery_address(self, selected_delivery_address: str):
        """Должен отображаться адрес доставки на странице
        selected_delivery_address - выбранный адрес доставки
        """
        with allure.step('Должен отображаться адрес доставки на странице'):
            delivery_address_on_the_page = self.find_element(
                IncomingOrderPageLocators.LOCATOR_DELIVERY_ADDRESS).text.strip()
            assert selected_delivery_address in delivery_address_on_the_page, \
                f'Адрес доставки на странице Входящий заказ - ({delivery_address_on_the_page}) не соответствует выбранному ' \
                f'адресу доставки - ({selected_delivery_address})'

    def must_be_status_application_new(self):
        """Должен быть статус заявки - Новая"""
        with allure.step('Должен быть статус заявки - Новая'):
            true_status_application = 'Новая'
            status_application_on_the_page = self.find_element(
                IncomingOrderPageLocators.LOCATOR_STATUS_APPLICATION).text.strip()
            assert status_application_on_the_page == true_status_application, \
                f'Статус заявки на странице Входящий заказ - ({status_application_on_the_page}) не соответствует ' \
                f'статусу - ({true_status_application})'

    def availability_check(self):
        """Проверка наличия"""
        with allure.step('Проверка наличия'):
            button_availability_check = self.find_element(IncomingOrderPageLocators.LOCATOR_BUTTON_AVAILABILITY_CHECK)
            self.click_js(button_availability_check)
            time.sleep(2)
            self.waiting_element_is_visibility_on_the_page(IncomingOrderPageLocators.LOCATOR_TD_AVAILABILITY, sec=40)
            availability_list = self.driver.find_elements(*IncomingOrderPageLocators.LOCATOR_TD_AVAILABILITY)
            for availability in availability_list:
                availability_text = availability.text
                assert availability_text != '', \
                    f'Строка №{availability.index(availability) + 1} наличия пустая - ({availability_text})'

    def checking_the_desired_payment_terms(self, selected_payment_terms: str):
        """Проверка желаемых условий оплаты
        selected_payment_terms - выбранные условия оплаты
        """
        with allure.step('Проверка желаемых условий оплаты'):
            desired_payment_terms = self.find_element(
                IncomingOrderPageLocators.LOCATOR_DESIRED_PAYMENT_TERMS).text.strip()
            selected_payment_terms = selected_payment_terms.strip()
            assert desired_payment_terms == selected_payment_terms, \
                f'Желаемые условия оплаты на странице Входящая заявка - ({desired_payment_terms}) не соответствуют ' \
                f'выбранным условиям оплаты - ({selected_payment_terms})'

    def checking_the_desired_delivery_conditions(self, selected_delivery_terms: str):
        """Проверка желаемых условий доставки
        selected_delivery_terms - выбранные условия доставки
        """
        with allure.step('Проверка желаемых условий доставки'):
            desired_delivery_conditions = self.find_element(
                IncomingOrderPageLocators.LOCATOR_DESIRED_DELIVERY_TERMS).text.strip()
            selected_delivery_terms = selected_delivery_terms.strip()
            assert desired_delivery_conditions == selected_delivery_terms, \
                f'Желаемые условия доставки на странице Входящая заявка - ({desired_delivery_conditions}) ' \
                f'не соответствуют выбранным условиям доставки - ({selected_delivery_terms})'

    def check_order_comment(self, entered_comment_to_the_order: str):
        """Проверка комментария к заказу
        entered_comment_to_the_order - введенный комментарий
        """
        with allure.step('Проверка комментария к заказу'):
            order_comment_on_the_page = self.find_element(IncomingOrderPageLocators.LOCATOR_ORDER_COMMENT).text.strip()
            entered_comment_to_the_order = entered_comment_to_the_order.strip()
            assert order_comment_on_the_page == entered_comment_to_the_order, \
                f'Комментарий к заказу на странице Входящая заявка - ({order_comment_on_the_page}) не соответствует' \
                f'введенному комментарию - ({entered_comment_to_the_order})'

    def check_shipping_comment(self, entered_shipping_comment: str):
        """Проверка комментария к доставке
        entered_shipping_comment - введенный комментарий к доставке
        """
        with allure.step('Проверка комментария к доставке'):
            shipping_comment_on_the_page = self.find_element(
                IncomingOrderPageLocators.LOCATOR_SHIPPING_COMMENT).text.strip()
            entered_shipping_comment = entered_shipping_comment.strip()
            assert shipping_comment_on_the_page == entered_shipping_comment, \
                f'Комментарий к доставке на странице Входящая заявка - ({shipping_comment_on_the_page}) не соответствует' \
                f'введенному комментарию к доставке - ({entered_shipping_comment})'

    def store_total_price(self) -> float:
        """Сохранение итоговой стоимости"""
        with allure.step('Сохранение итоговой стоимости'):
            total_price = self.find_element(IncomingOrderPageLocators.LOCATOR_SPAN_TOTAL_PRICE).text
            total_price = total_price.replace(' ', '')
            return float(total_price)

    def take_an_application(self):
        """Взять в работу заявку"""
        with allure.step('Взять в работу заявку'):
            true_status = 'Принята'
            button_get_to_work = self.find_element(IncomingOrderPageLocators.LOCATOR_BUTTON_GET_TO_WORK)
            self.click_js(button_get_to_work)
            time.sleep(1)
            self.waiting_element_is_visibility_on_the_page(IncomingOrderPageLocators.LOCATOR_BODY_PAGE, sec=40)

            self.waiting_element_is_visibility_on_the_page(
                IncomingOrderPageLocators.LOCATOR_BUTTON_APPROVAL_OF_THE_DEAL)
            self.waiting_element_is_visibility_on_the_page(IncomingOrderPageLocators.LOCATOR_BUTTON_CANCEL)
            self.waiting_element_is_visibility_on_the_page(IncomingOrderPageLocators.LOCATOR_INPUT_DOCUMENT_NUMBER)
            self.waiting_element_is_visibility_on_the_page(IncomingOrderPageLocators.LOCATOR_FILE_ATTACHMENT_FIELD)
            self.waiting_element_is_visibility_on_the_page(IncomingOrderPageLocators.LOCATOR_BUTTON_CHANGE_RESPONSIBLE)

            status_on_the_page = self.find_element(IncomingOrderPageLocators.LOCATOR_STATUS_APPLICATION).text.strip()
            assert true_status == status_on_the_page, f'Статус на странице - ({status_on_the_page}) не соответствует ' \
                                                      f'ожидаемому статусу - ({true_status})'

    def deal_approval(self):
        """Согласование сделки"""
        with allure.step('Согласование сделки'):
            true_status = 'Согласование сделки'
            button_deal_approval = self.find_element(IncomingOrderPageLocators.LOCATOR_BUTTON_APPROVAL_OF_THE_DEAL)
            self.click_js(button_deal_approval)
            time.sleep(1)
            self.waiting_element_is_visibility_located_dom(IncomingOrderPageLocators.LOCATOR_BODY_PAGE)
            self.waiting_element_is_visibility_on_the_page(
                IncomingOrderPageLocators.LOCATOR_BUTTON_DELIVERY_FROM_YOUR_WAREHOUSE, sec=5)
            self.waiting_element_is_visibility_on_the_page(
                IncomingOrderPageLocators.LOCATOR_BUTTON_FORM_OUTGOING_ORDER, sec=5)
            self.waiting_element_is_visibility_on_the_page(IncomingOrderPageLocators.LOCATOR_BUTTON_CANCEL)
            self.waiting_element_is_visibility_on_the_page(IncomingOrderPageLocators.LOCATOR_INPUT_DOCUMENT_NUMBER)
            self.waiting_element_is_visibility_on_the_page(IncomingOrderPageLocators.LOCATOR_FILE_ATTACHMENT_FIELD)
            self.waiting_element_is_visibility_on_the_page(IncomingOrderPageLocators.LOCATOR_BUTTON_CHANGE_RESPONSIBLE)

            status_on_the_page = self.find_element(IncomingOrderPageLocators.LOCATOR_STATUS_APPLICATION).text.strip()
            assert true_status == status_on_the_page, f'Статус на странице - ({status_on_the_page}) не соответствует ' \
                                                      f'ожидаемому статусу - ({true_status})'

    def save_codes_on_the_page(self) -> list:
        """Сохранение кодов на странице"""
        with allure.step('Сохранение кодов на странице'):
            codes_on_the_page_incoming_order = self.driver.find_elements(
                *IncomingOrderPageLocators.LOCATOR_CODES_ON_THE_PAGE_INCOMING_ORDER)
            order_codes = [code.text for code in codes_on_the_page_incoming_order]
            return order_codes

    def create_an_outgoing_order(self):
        """Сформировать исходящий заказ
        order_codes - коды из заказа
        """
        with allure.step('Сформировать исходящий заказ'):
            order_codes = self.save_codes_on_the_page()

            button_create_an_outgoing_order = self.find_element(
                IncomingOrderPageLocators.LOCATOR_BUTTON_FORM_OUTGOING_ORDER)
            self.click_js(button_create_an_outgoing_order)
            time.sleep(2)
            self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
            self.waiting_element_is_visibility_on_the_page(CartLocators.LOCATOR_H1_BASKET)

            cart_page = CartPage(self.driver, '')
            name_code_in_cart_list = cart_page.save_list_articles_in_cart()

            for code in name_code_in_cart_list:
                assert code in order_codes, f'Код на странице Корзина {code} не из списка добавленных кодов ' \
                                            f'при оформлении заявки - {order_codes}'
            self.driver.execute_script("history.back()")
            time.sleep(1)
            self.waiting_element_is_visibility_on_the_page(IncomingOrderPageLocators.LOCATOR_STATUS_APPLICATION)

    def delivery_from_our_warehouse(self):
        """Поставка со своего склада"""
        with allure.step('Поставка со своего склада'):
            true_status = 'Обработана'
            true_delivery_condition = 'Поставка со своего склада'  # Ожидаемые Условия поставки

            button_delivery_from_our_warehouse = self.find_element(
                IncomingOrderPageLocators.LOCATOR_BUTTON_DELIVERY_FROM_YOUR_WAREHOUSE)
            self.click_js(button_delivery_from_our_warehouse)
            self.waiting_element_is_visibility_located_dom(IncomingOrderPageLocators.LOCATOR_BODY_PAGE, sec=40)
            self.waiting_element_is_visibility_on_the_page(
                IncomingOrderPageLocators.LOCATOR_BUTTON_RETURN_FOR_DEAL_APPROVAL)
            delivery_condition_on_the_page = self.find_element(
                IncomingOrderPageLocators.LOCATOR_DELIVERY_CONDITION).text.strip()
            assert true_delivery_condition == delivery_condition_on_the_page, \
                f'Условия поставки на странице - ({delivery_condition_on_the_page}) не соответствуют ожидаемым условиям ' \
                f'поставки - ({true_delivery_condition})'

            status_on_the_page = self.find_element(IncomingOrderPageLocators.LOCATOR_STATUS_APPLICATION).text.strip()
            assert status_on_the_page == true_status, f'Статус Зявки на странице Входящий заказ - ({status_on_the_page}) ' \
                                                      f'не соответствует ожидаемому статусу - ({true_status})'
