import time

import allure

from base_page.base_page import BasePage

from base_page.base_page_locators import BaseOpenLocators
from open_pages.header.header_locators import UlMenuCatalogLocators
from open_pages.product_menu.product_menu_locators import ProductMenu
from open_pages.product_page_of_thermostatic_element_series_ra.product_page_of_thermostatic_element_series_ra_locatord import \
    ThermostaticElementSeriesRa


@allure.feature('Страница термостатического элемента серии RA')
class ThermostaticElementRA(BasePage):
    """Страница термостатического элемента серии RA"""

    def page_thermostatic_element_ra(self):
        """Дойти до страницы с термостатическим элементом"""
        with allure.step('Открытие страницы с термостатическим элементом'):
            with allure.step('В меню каталога клик по разедлу Термостатические элементы радиаторных терморегуляторов'):
                button_menu_thermostatic_element = self.find_element(
                    UlMenuCatalogLocators.LOCATOR_THERMOSTATIC_ELEMENTS_OF_RADIATOR)
                button_menu_thermostatic_element.click()
                with allure.step(
                        'Ожидание прогрузки страницы'):
                    self.waiting_element_is_visibility_on_the_page(ProductMenu.LOCATOR_THERMOSATIC_ELEMENTS_RA_SERIES)
                    with allure.step('Клик по меню Термостатические элементы серии RA'):
                        button_ra_serias = self.find_element(ProductMenu.LOCATOR_THERMOSATIC_ELEMENTS_RA_SERIES)
                        self.driver.execute_script("arguments[0].click()", button_ra_serias)
                        self.waiting_element_is_visibility_on_the_page(ThermostaticElementSeriesRa.LOCATOR_CODE)

    def check_box_code(self, article: str):
        """Добавить код в Корзину через кнопку вверху списка кодов"""
        with allure.step('Добавить код в Корзину через кнопку вверху списка кодов'):
            with allure.step('Клик по чек-боксу выбранного кода'):
                click_on_the_check_box_code = self.find_element(
                    ThermostaticElementSeriesRa.locator_checkbox_code(article))
                self.driver.execute_script("arguments[0].click()", click_on_the_check_box_code)
                self.waiting_element_is_visibility_on_the_page(ThermostaticElementSeriesRa.LOCATOR_ADD_SELECTED_TO_CART)
                with allure.step('Клик по кнопке Добавить выбранное в Корзину'):
                    button_add_selected_to_card = self.find_element(
                        ThermostaticElementSeriesRa.LOCATOR_ADD_SELECTED_TO_CART)
                    self.driver.execute_script("arguments[0].click()", button_add_selected_to_card)
                    self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
                    with allure.step('В появивишемся окне клик по кнопке Продолжить Покупки'):
                        self.waiting_element_is_visibility_on_the_page(
                            ThermostaticElementSeriesRa.LOCATOR_PRODUCTS_ADDED_TO_CART)
                        time.sleep(2)
                        button_continue_shopping = self.find_element(
                            ThermostaticElementSeriesRa.LOCATOR_BUTTON_CONTINUE_SHOPPING)
                        self.driver.execute_script("arguments[0].click()", button_continue_shopping)
                        time.sleep(2)

    def save_cost_code(self, article: str) -> str:
        """Сохранение стоимости кода"""
        with allure.step('Сохранение стоимости кода'):
            self.waiting_element_is_visibility_on_the_page(
                ThermostaticElementSeriesRa.locator_price_by_article(article), sec=10)
            cost_code = self.find_element(ThermostaticElementSeriesRa.locator_price_by_article(article)).text
            # cost_code = re.sub(r'[^0-9.]+', r'', cost_code)
            return cost_code

    def button_buy_code(self):
        """Нажать на кнопку Купить у кода"""
        with allure.step('Нажать на кнопку Купить у кода'):
            button_buy_code = self.find_element(ThermostaticElementSeriesRa.LOCATOR_BUTTON_BUY_CODE)
            self.driver.execute_script("arguments[0].click()", button_buy_code)
            self.waiting_element_is_visibility_on_the_page(
                ThermostaticElementSeriesRa.LOCATOR_SELECT_NUMBER_OF_PRODUCTS)
            with allure.step('Нажать на кнопку Добавить в Корзину'):
                button_add_to_card = self.find_element(ThermostaticElementSeriesRa.LOCATOR_BUTTON_ADD_TO_BASKET)
                self.driver.execute_script("arguments[0].click()", button_add_to_card)
                with allure.step('Нажать на кнопку Перейти в Корзину'):
                    self.waiting_element_is_visibility_on_the_page(ThermostaticElementSeriesRa.LOCATOR_GO_TO_CARD,
                                                                   sec=90)
                    button_go_to_card = self.find_element(ThermostaticElementSeriesRa.LOCATOR_GO_TO_CARD)
                    self.driver.execute_script("arguments[0].click()", button_go_to_card)
                    time.sleep(1)
                    self.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)

    def check_open_page(self):
        """Проверка открытия страницы товара"""
        with allure.step('Проверка открытия страницы товара'):
            self.waiting_element_is_visibility_on_the_page(ThermostaticElementSeriesRa.LOCATOR_HEADER_PAGE)
            self.waiting_element_is_visibility_on_the_page(ThermostaticElementSeriesRa.LOCATOR_CODE_013G5074)

    def click_on_add_to_cart_button_on_product_card(self):
        """Клик по кнопке Положить в корзину в карточке товара"""
        with allure.step('Клик по кнопке Положить в корзину в карточке товара'):
            btn_buy = self.find_element(ThermostaticElementSeriesRa.LOCATOR_BUTTON_BUY_FIRST)
            self.driver.execute_script("arguments[0].click()", btn_buy)
            self.waiting_element_is_visibility_on_the_page(
                ThermostaticElementSeriesRa.LOCATOR_INPUT_COUNT_ARTICLE_IN_PRODUCT_CART, sec=5)
