import time

from selenium.webdriver.common.by import By

from base_page.base_page import BasePage
from ridan_1C_pages.adaptation_page.adaptation_page_locators import AdaptationPageLocators, \
    ArmShipmentToCustomersPageLocators


class AdaptationPage(BasePage):
    """Вкладка Адаптация"""

    def click_adaptation_tab(self):
        """Переход  в раздел Адаптация"""
        adaptation_button = self.find_element(AdaptationPageLocators.LOCATOR_BUTTON_ADAPTATION)
        self.scroll_to(adaptation_button)
        adaptation_button.click()
        self.waiting_element_is_visibility_located_dom(AdaptationPageLocators.LOCATOR_DIV_IN_FULL_SCREEN)

    def go_to_new_arm_shipment_to_customers(self):
        """Переход в раздел (new) АРМ Отгрузка"""
        self.waiting_element_is_visibility_located_dom(
            AdaptationPageLocators.LOCATOR_BUTTON_NEW_ARM_SHIPMENT_TO_CUSTOMERS)
        button_nep_arm = self.find_element(AdaptationPageLocators.LOCATOR_BUTTON_NEW_ARM_SHIPMENT_TO_CUSTOMERS)
        button_nep_arm.click()
        self.waiting_element_is_visibility_located_dom(
            ArmShipmentToCustomersPageLocators.LOCATOR_HEADER_ARM_SHIPMENT_TO_CUSTOMERS)


# Страница АРМ Отгрузка клиентам Шаг 1
class ArmShipmentToCustomersPageStep1(AdaptationPage):

    def choice_of_salesman(self, salesman: str):
        """Выбор организации, salesmann- продавец"""
        locator_right_seller = ()  # Локатор для выбора продавца
        salesman_input = self.find_element(ArmShipmentToCustomersPageLocators.LOCATOR_ORGANIZATION)
        salesman_for_input = ''  # имя продавца для ввода

        if salesman == 'Ридан':
            salesman_for_input = 'ООО "РИДАН"'
            locator_right_seller = (
                By.XPATH, f"//div[@class='eddMiddle']//li/div[contains(text(), '{salesman.title()}')]"
            )

        elif salesman == 'РИДАН ТРЕЙД':
            salesman_for_input = 'Ридан Трейд ООО'
            locator_right_seller = (
                By.XPATH, f"//div[@class='eddMiddle']//li/div[contains(text(), '{salesman.title()}')]"
            )

        salesman_input.clear()
        salesman_input.send_keys(salesman_for_input)
        time.sleep(3)
        right_seller = self.find_element(locator_right_seller)
        self.waiting_element_is_visibility_on_the_page(locator_right_seller)
        right_seller.click()

    def choice_of_warehouse_leshkovo(self):
        """Ввод скалада в поле ввода склада"""
        code_warehouse = '0010'
        input_warehouse = self.find_element(ArmShipmentToCustomersPageLocators.LOCATOR_INPUT_WAREHOUSE_FIELD)
        input_warehouse.send_keys(code_warehouse)
        self.waiting_element_is_visibility_located_dom(ArmShipmentToCustomersPageLocators.LOCATOR_OL_WAREHOUSE)
        self.waiting_element_is_visibility_located_dom(
            ArmShipmentToCustomersPageLocators.LOCATOR_ITEM_WAREHOUSE_LESHKOVO)
        warehouse_item = self.find_element(ArmShipmentToCustomersPageLocators.LOCATOR_ITEM_WAREHOUSE_LESHKOVO)
        warehouse_item.click()

    def click_btn_clear_customer_orders(self):
        """Клик по кнопке Очистить заказы клиентов"""
        self.waiting_element_is_visibility_on_the_page(
            ArmShipmentToCustomersPageLocators.LOCATOR_BUTTON_CLEAR_CUSTOMER_ORDERS, sec=5)
        btn_clear = self.find_element(ArmShipmentToCustomersPageLocators.LOCATOR_BUTTON_CLEAR_CUSTOMER_ORDERS)
        btn_clear.click()
        input_list_orders = self.find_element(
            ArmShipmentToCustomersPageLocators.LOCATOR_INPUT_LIST_ORDERS).get_attribute('value')
        assert input_list_orders == '', f'Поле ввода списка заказов не пустое - ({input_list_orders})'

    def click_select_order_kebab_menu(self):
        """Клик по кебаб меню (в виде 3-х точек) Выберите заказ"""
        self.waiting_element_is_visibility_located_dom(
            ArmShipmentToCustomersPageLocators.LOCATOR_SELECT_ORDER_KEBAB_MENU)
        kebab_order_menu = self.find_element(ArmShipmentToCustomersPageLocators.LOCATOR_SELECT_ORDER_KEBAB_MENU)
        kebab_order_menu.click()
        self.waiting_element_is_visibility_located_dom(ArmShipmentToCustomersPageLocators.LOCATOR_HEADER_ORDER_IN_MODAL)

    def click_button_paste_from_clipboard(self):
        """Клик по кнопке Вставить из буфера обмена в модалке Заказы"""
        self.waiting_element_is_visibility_located_dom(
            ArmShipmentToCustomersPageLocators.LOCATOR_BUTTON_PASTE_FROM_CLIPBOARD)
        button_paste = self.find_element(ArmShipmentToCustomersPageLocators.LOCATOR_BUTTON_PASTE_FROM_CLIPBOARD)
        button_paste.click()
        self.waiting_element_is_visibility_located_dom(
            ArmShipmentToCustomersPageLocators.LOCATOR_HEADER_IN_MODAL_PASTE_FROM_CLIPBOARD, sec=30)

    def click_button_unmark_all_lines(self):
        """Клик по кнопке Снять пометки со всех строк"""
        self.expecting_clickability(ArmShipmentToCustomersPageLocators.LOCATOR_BUTTON_UNMARK_ALL_LINES)
        btn_unmark_all_lines = self.find_element(ArmShipmentToCustomersPageLocators.LOCATOR_BUTTON_UNMARK_ALL_LINES)
        btn_unmark_all_lines.click()
        time.sleep(1)
        true_order_check_box = self.driver.find_elements(
            *ArmShipmentToCustomersPageLocators.LOCATOR_SELECTED_CHECK_BOXES_IN_ORDERS_LIST)
        assert len(true_order_check_box) == 0, \
            f'Количество выбранных чек-боксов в списке заказов ' \
            f'- ({len(true_order_check_box)}) после нажатие на кнопку снятия чек-боксов'

    def scroll_down_in_modal_list_order(self):
        """Скролл вниз в модалке списка заказов"""
        self.waiting_element_is_visibility_on_the_page(
            ArmShipmentToCustomersPageLocators.LOCATOR_SCROLL_DOWN_IN_MODAL_LIST_ORDER)
        scroll_down = self.driver.find_elements(
            *ArmShipmentToCustomersPageLocators.LOCATOR_SCROLL_DOWN_IN_MODAL_LIST_ORDER)
        len_scroll_down = len(scroll_down)
        while len_scroll_down != 0:
            scroll_down[0].click()
            scroll_down = self.driver.find_elements(
                *ArmShipmentToCustomersPageLocators.LOCATOR_SCROLL_DOWN_IN_MODAL_LIST_ORDER)
            len_scroll_down = len(scroll_down)

    def putting_a_checkbox_in_order_in_order_modal(self, num_order: str):
        """Проставление чек-бокса в заказе в модалке выбора заказов"""
        self.waiting_element_is_visibility_on_the_page(
            ArmShipmentToCustomersPageLocators.locator_checkbox_order_in_modal_order(num_order), sec=3)
        checkbox_order = self.find_element(
            ArmShipmentToCustomersPageLocators.locator_checkbox_order_in_modal_order(num_order))
        self.scroll_to(checkbox_order)
        time.sleep(0.5)
        checkbox_order.click()

    def type_num_order_in_modal_paste_from_clipboard(self, num_order: str):
        """Ввод номера заказа в поле ввода в модалке Вставка из буфера обмена"""
        textarea_num_order = self.find_element(
            ArmShipmentToCustomersPageLocators.LOCATOR_TEXTAREA_IN_MODAL_PASTE_FROM_CLIPBOARD)
        textarea_num_order.send_keys(num_order)
        button_insert_to_list = self.find_element(ArmShipmentToCustomersPageLocators.LOCATOR_BUTTON_INSERT_TO_LIST)
        button_insert_to_list.click()

        self.click_button_unmark_all_lines()
        self.putting_a_checkbox_in_order_in_order_modal(num_order)

        locator_result_search_order = (
            By.XPATH, f"//div[contains(text(), 'Заказ клиента {num_order}')]")  # Локатор результат поиска заказа
        self.waiting_element_is_visibility_located_dom(locator_result_search_order, sec=20)
        button_ok = self.find_element(ArmShipmentToCustomersPageLocators.LOCATOR_BUTTON_OK)
        button_ok.click()
        self.waiting_element_invisibility(locator_result_search_order)

    def disable_check_fill_selections_true(self):
        """Включить переключатель Отключить Проверку Заполнения Отборов"""
        self.waiting_element_is_visibility_located_dom(
            ArmShipmentToCustomersPageLocators.LOCATOR_RADIO_BUTTON_DISABLE_CHECK_FILL_SELECTIONS_FALSE)
        radio_button = self.find_element(
            ArmShipmentToCustomersPageLocators.LOCATOR_RADIO_BUTTON_DISABLE_CHECK_FILL_SELECTIONS_FALSE)
        radio_button.click()
        self.waiting_element_is_visibility_located_dom(
            ArmShipmentToCustomersPageLocators.LOCATOR_RADIO_BUTTON_DISABLE_CHECK_FILL_SELECTIONS_TRUE)

    def choice_of_withdrawal_with_debt(self):
        """Выбор вывода с задолженностью"""
        menu_with_debt = self.find_element(ArmShipmentToCustomersPageLocators.LOCATOR_WITH_DEBT_MENU)
        menu_with_debt.click()
        self.waiting_element_is_visibility_on_the_page(ArmShipmentToCustomersPageLocators.LOCATOR_WITH_DEBT_OUTPUT)
        button_with_debt = self.find_element(ArmShipmentToCustomersPageLocators.LOCATOR_WITH_DEBT_OUTPUT)
        button_with_debt.click()

    def checking_the_quantity_of_goods_to_be_shipped(self, quantity_in_order: int):
        """Проверка количества товара к отгрузке после заполнения в таблице Товары к отгрузке,
        quantity_in_order - количество в заказе"""
        self.waiting_element_is_visibility_located_dom(
            ArmShipmentToCustomersPageLocators.LOCATOR_QUANTITY_OF_GOODS_FOR_SHIPMENT)
        quantity_of_goods_for_shipment = self.driver.find_elements(
            *ArmShipmentToCustomersPageLocators.LOCATOR_QUANTITY_OF_GOODS_FOR_SHIPMENT)
        result_list_quantity = []
        for quantity in quantity_of_goods_for_shipment:
            quantity = quantity.text
            quantity = int(quantity.split(',')[0])
            result_list_quantity.append(quantity)
        result_quantity_in_table = sum(result_list_quantity)
        # print(result_quantity_in_table)
        assert result_quantity_in_table == quantity_in_order, \
            f'Количество товара в заказе ({quantity_in_order}) не равно количеству товара в таблице Товары к ' \
            f'отгрузке ({result_quantity_in_table})'

    def checking_the_order_number_in_the_table_for_shipment(self, num_order: str):
        """Проверка отображения номера заказа в таблице Товары к отгрузке. num_order - готовый счет"""
        self.waiting_element_is_visibility_located_dom(
            ArmShipmentToCustomersPageLocators.LOCATOR_ORDER_NUMBER_IN_THE_TABLE_FOR_SHIPPING)
        num_order_in_table = self.driver.find_elements(
            *ArmShipmentToCustomersPageLocators.LOCATOR_ORDER_NUMBER_IN_THE_TABLE_FOR_SHIPPING)
        num_order_in_table = [el.text for el in num_order_in_table]
        assert num_order in num_order_in_table, \
            f'Номер готового заказа ({num_order}) не равен номеру заказа в таблице Товары к отгрузке ' \
            f'({num_order_in_table})'

    def checking_the_article_in_the_table_for_shipment(self, article_in_order_list: list):
        """Проверка отображения артикула в таблице Товары к отгрузке, article - артикул товара в заказе"""
        self.waiting_element_is_visibility_located_dom(
            ArmShipmentToCustomersPageLocators.LOCATOR_ARTICLE_IN_THE_TABLE_FOR_SHIPPING)
        article_in_table_list_web_elements = self.driver.find_elements(
            *ArmShipmentToCustomersPageLocators.LOCATOR_ARTICLE_IN_THE_TABLE_FOR_SHIPPING)
        article_in_table_list_text = []
        for article in article_in_table_list_web_elements:
            article_in_table_list_text.append(article.text)
            # print(article_in_table_list_text)
        for article in article_in_order_list:
            assert article in article_in_table_list_text, \
                f'Артикула товара в заказе ({article}) нет в таблице Товары к отгрузке ({article_in_table_list_text})'

    def click_fill_button(self):
        """Клик по кнопке Заполнить"""
        button_fill = self.find_element(ArmShipmentToCustomersPageLocators.LOCATOR_BUTTON_FILL)
        button_fill.click()
        self.waiting_element_is_visibility_located_dom(ArmShipmentToCustomersPageLocators.LOCATOR_SPAN_ALERT_DONE,
                                                       sec=60)

    def click_button_set_a_mark(self):
        """Клик по кнопке Установить отметку"""
        # Сохраняем количество невыбранных чек-боксов на линиях товара
        check_box_no_select = self.driver.find_elements(
            *ArmShipmentToCustomersPageLocators.LOCATOR_CHECK_BOX_LINE_NO_SELECT)
        check_box_no_select = len(check_box_no_select)
        button_set_a_mark = self.find_element(ArmShipmentToCustomersPageLocators.LOCATOR_BUTTON_SET_A_MARK)
        button_set_a_mark.click()
        time.sleep(1)
        # Сохраняем количество выбранных чек-боксов на линиях товара
        check_box_select = self.driver.find_elements(
            *ArmShipmentToCustomersPageLocators.LOCATOR_CHECK_BOX_LINE_SELECT)
        check_box_select = len(check_box_select)
        assert check_box_select != 0, \
            f'Количество выбранных чек-боксов ({check_box_select}) товаров равно 0'

    def click_ship_button(self):
        """Клик по кнопке Отгрузить"""
        button_ship = self.find_element(ArmShipmentToCustomersPageLocators.LOCATOR_BUTTON_SHIP)
        button_ship.click()
        self.waiting_element_is_visibility_located_dom(ArmShipmentToCustomersPageLocators.LOCATOR_SPAN_ALERT_DONE,
                                                       sec=40)
        self.waiting_element_is_visibility_located_dom(
            ArmShipmentToCustomersPageLocators.LOCATOR_CHECKBOX_IN_STATUS_COLUMN)

    def click_button_further(self):
        """Клик по кнопке Далее"""
        button_furthers_list = self.driver.find_elements(*ArmShipmentToCustomersPageLocators.LOCATOR_BUTTON_FURTHER)
        button_further = button_furthers_list[-1]
        self.driver.execute_script("arguments[0].click()", button_further)


# Страница АРМ Отгрузка клиентам Шаг 2
class ArmShipmentToCustomersPageStep2(AdaptationPage):
    def click_button_further(self):
        """Клик по кнопке Далее"""
        button_furthers_list = self.driver.find_elements(*ArmShipmentToCustomersPageLocators.LOCATOR_BUTTON_FURTHER)
        button_further = button_furthers_list[-1]
        self.driver.execute_script("arguments[0].click()", button_further)

    def should_be_header_step_2(self):
        """Должен быть заголовок Шаг 2. Распределение заказов к отгрузке по адресам"""
        self.waiting_element_is_visibility_located_dom(
            ArmShipmentToCustomersPageLocators.LOCATOR_HEADER_STEP_2, sec=90)

    def should_be_input_delivery_address(self):
        """Должно быть поле ввода Адрес доставки на странице"""
        self.waiting_element_is_visibility_on_the_page(
            ArmShipmentToCustomersPageLocators.LOCATOR_INPUT_DELIVERY_ADDRESS)

    def should_be_input_delivery_method(self):
        """Должно быть поле ввода Способ доставки на странице"""
        self.waiting_element_is_visibility_on_the_page(
            ArmShipmentToCustomersPageLocators.LOCATOR_INPUT_DELIVERY_METHOD)

    def should_be_input_delivery_area(self):
        """Должно быть поле ввода Зона доставки на странице"""
        self.waiting_element_is_visibility_on_the_page(
            ArmShipmentToCustomersPageLocators.LOCATOR_INPUT_DELIVERY_AREA)

    def should_be_input_delivery_carrier(self):
        """Должно быть поле ввода Перевозчик"""
        self.waiting_element_is_visibility_on_the_page(
            ArmShipmentToCustomersPageLocators.LOCATOR_INPUT_CARRIER)


class ArmShipmentToCustomersPageStep3(AdaptationPage):
    """Страница АРМ Отгрузка клиентам Шаг 3"""

    def should_be_header_step_3(self):
        """Должен быть заголовок Шаг 3. Создание документов \"Задание на перевозку\""""
        self.waiting_element_is_visibility_located_dom(
            ArmShipmentToCustomersPageLocators.LOCATOR_HEADER_STEP_3, sec=90)

    def expansion_of_the_list_in_the_form_of_a_plus(self):
        """Раскрытие выпадающего списка в виде плюса"""
        button_plus = self.driver.find_elements(*ArmShipmentToCustomersPageLocators.LOCATOR_BUTTON_UL_AS_A_PLUS)
        step = 0
        while len(button_plus) != 0:
            step += 1
            button_plus[0].click()
            time.sleep(0.5)
            button_plus = self.driver.find_elements(*ArmShipmentToCustomersPageLocators.LOCATOR_BUTTON_UL_AS_A_PLUS)
            if step > 30:
                break

    def should_be_information_about_free_shipping(self):
        """Должна быть информация о бесплатной доставке"""
        self.waiting_element_is_visibility_on_the_page(ArmShipmentToCustomersPageLocators.LOCATOR_DIV_FREE_SHIPPING,
                                                       sec=20)

    def should_be_product_articles(self, ordered_articles: list):
        """Должны отображаться заказанные артикулы товаров, ordered_articles- заказанные артикулы товаров"""
        for article in ordered_articles:
            locator_article = (By.XPATH, f"//div[@class='gridBox gridBoxTree']//div[contains(text(), '{article}')]")
            self.waiting_element_is_visibility_on_the_page(locator_article)

    def click_button_form_a_task(self):
        """Клик по кнопке Сформировать задание"""
        button_form_a_task = self.find_element(ArmShipmentToCustomersPageLocators.LOCATOR_BUTTON_FORM_A_TASK)
        self.driver.execute_script("arguments[0].click()", button_form_a_task)
        self.waiting_element_is_visibility_on_the_page(ArmShipmentToCustomersPageLocators.LOCATOR_SPAN_ALERT_DONE)

    def store_number_transportation_job(self):
        """Сохранение номера задания на перевозку"""
        div_transaction_job = self.find_element(
            ArmShipmentToCustomersPageLocators.LOCATOR_DIV_TRANSPORTATION_JOB_WITH_NUMBER)
        text_transaction_job = div_transaction_job.text
        number_transaction_job = text_transaction_job.split(' ')[3]
        return number_transaction_job

    def click_button_open_job_in_selected_row(self):
        """Клик по кнопке Открыть задание в выбранной строке"""
        button_open_job = self.find_element(ArmShipmentToCustomersPageLocators.LOCATOR_BUTTON_OPEN_JOB_IN_SELECTED_ROW)
        button_open_job.click()
        self.waiting_element_is_visibility_on_the_page(
            ArmShipmentToCustomersPageLocators.LOCATOR_HEADER_TASK_FOR_VERIFICATION, sec=90)
