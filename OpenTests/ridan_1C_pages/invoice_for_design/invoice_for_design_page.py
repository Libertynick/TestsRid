import time

from selenium.webdriver import ActionChains
from selenium.webdriver.common.by import By

from base_page.base_page import BasePage
from ridan_1C_pages.invoice_for_design.invoice_for_design_locators import InvoiceForDesignLocators, \
    ModalAppearanceOptionsLocators, ModalDocumentCreatedLocators
from ridan_1C_pages.sale_of_goods_and_services_page.sale_of_goods_and_services_document_locators import \
    SaleOfGoodsAndServicesDocumentLocators
from ridan_1C_pages.sale_section_page.sale_section_page_locators import SingleCustomerOrderPageLocators


class InvoiceForDesign(BasePage):
    """Раздел Накладные к оформлению. Документы продажи (к оформлению)"""

    def click_selection_menu_customer_orders(self):
        """Клик по кнопке выбора меню заказов клиента в виде 3-х точек"""
        self.waiting_element_is_visibility_located_dom(InvoiceForDesignLocators.LOCATOR_SELECTION_MENU_CUSTOMER_ORDERS)
        menu = self.find_element(InvoiceForDesignLocators.LOCATOR_SELECTION_MENU_CUSTOMER_ORDERS)
        menu.click()
        self.waiting_element_is_visibility_located_dom(
            InvoiceForDesignLocators.LOCATOR_HEADER_IN_MODAL_CUSTOMER_ORDERS)

    def click_button_paste_from_clipboard(self):
        """Клик по кнопке Вставить из буфера обмена в мадалке Заказы клиентов"""
        button = self.find_element(InvoiceForDesignLocators.LOCATOR_BUTTON_PASTE_FROM_CLIPBOARD)
        button.click()
        self.waiting_element_is_visibility_located_dom(
            InvoiceForDesignLocators.LOCATOR_HEADER_PASTE_FROM_CLIPBOARD_CUSTOMER_ORDERS)

    def entering_the_order_number_in_the_insert_modal(self, num_order: str):
        """ввод номера заказа в модалку вставки заказа из буфера обмена, num_order номер заказа"""
        locator_found_order = (By.XPATH, f"//div[contains(text(), 'Заказ клиента {num_order} от ')]")

        field_input = self.find_element(InvoiceForDesignLocators.LOCATOR_FIELD_FOR_INPUT_ORDER_NUMBER_IN_MODAL)
        button_insert_to_list = self.find_element(InvoiceForDesignLocators.LOCATOR_BUTTON_INSERT_TO_LIST)

        field_input.send_keys(num_order)
        button_insert_to_list.click()
        time.sleep(1)
        self.waiting_element_is_visibility_located_dom(locator_found_order)

        button_ok = self.find_element(InvoiceForDesignLocators.LOCATOR_BUTTON_OK_IN_MODAL_CUSTOMER_ORDERS)
        button_ok.click()

        result_search = self.driver.find_elements(*InvoiceForDesignLocators.LOCATOR_RESULT_SEARCH_APPLICATION)
        assert len(result_search) == 1, \
            f'В результате поиска заказа найдено больше 1-ого заказа - ({len(result_search)})'

    def order_opening(self, num_order: str):
        """Открытие заказа"""
        locator_order = (By.XPATH, f"//div[@class='gridBoxText' and text()='{num_order}']")
        order_line = self.find_element(locator_order)

        action = ActionChains(self.driver)
        action.double_click(order_line).perform()
        time.sleep(1)
        self.waiting_element_is_visibility_located_dom(
            SingleCustomerOrderPageLocators.LOCATOR_HEADER_SINGLE_CUSTOMER_ORDER, sec=90)

    def click_on_the_submit_button(self):
        """Клик по кнопке Оформить по отгрузке"""
        button_checkout_on_shipment = self.find_element(InvoiceForDesignLocators.LOCATOR_CHECKOUT_BUTTON_ON_SHIPMENT)
        button_checkout_on_shipment.click()
        self.waiting_element_is_visibility_on_the_page(InvoiceForDesignLocators.LOCATOR_DIV_POP_UP_MESSAGE, sec=180)


class ModalAppearanceOptions(BasePage):
    """Модалка Параметры оформления"""

    def selection_of_the_checkbox_to_carry_out_the_created_documents(self):
        """Выбор чек-бокса Проводить созданные документы"""
        check_box = self.find_element(ModalAppearanceOptionsLocators.LOCATOR_CHECK_BOX_TO_CARRY_OUT_CREATED_DOCUMENTS)
        check_box.click()
        self.waiting_element_is_visibility_located_dom(
            ModalAppearanceOptionsLocators.LOCATOR_SELECTED_CHECK_BOX_TO_POST_CREATED_DOCUMENTS)


class ModalDocumentCreated(BasePage):
    """Модалка Создан документ"""

    def click_button_printing(self):
        """Клик по кнопке Печать"""
        button_printing = self.find_element(ModalDocumentCreatedLocators.LOCATOR_BUTTON_PRINTING)
        button_printing.click()
        time.sleep(0.5)
        self.waiting_element_is_visibility_on_the_page(ModalDocumentCreatedLocators.LOCATOR_SUBMENU_PRINT)

    def click_on_the_button_selling_goods_in_print(self):
        """Клик по кнопке Реализация товаров в Печати"""
        button_selling_goods_in_print = self.find_element(
            ModalDocumentCreatedLocators.LOCATOR_BUTTON_SALE_OF_GOODS_IN_PRINT)
        button_selling_goods_in_print.click()
        time.sleep(3)
        self.waiting_element_is_visibility_on_the_page(SaleOfGoodsAndServicesDocumentLocators.LOCATOR_IFRAME_DOC,
                                                       sec=90)

    def click_title_sales_documents_for_processing(self):
        """Переход на вкладку Документы продажи (к оформлению)"""
        title = self.find_element(ModalDocumentCreatedLocators.LOCATOR_TITLE_SALES_DOCUMENTS_FOR_PROCESSING)
        title.click()
        self.waiting_element_is_visibility_on_the_page(ModalDocumentCreatedLocators.LOCATOR_HEADER)

    def click_scroll_down_button(self):
        """Клик по кнопке Переоистывание вниз в выпадающем списке Печать"""
        button_down_arrow_no_display = self.driver.find_elements(
            *ModalDocumentCreatedLocators.LOCATOR_NO_DISPLAY_DOWN_ARROW)

        while len(button_down_arrow_no_display) == 0:
            button_scroll = self.find_element(ModalDocumentCreatedLocators.LOCATOR_SCROLL_DOWN_BUTTON)
            button_scroll.click()
            time.sleep(0.3)
            button_down_arrow_no_display = self.driver.find_elements(
                *ModalDocumentCreatedLocators.LOCATOR_NO_DISPLAY_DOWN_ARROW)

    def choice_of_printing_invoice(self):
        """Выбор печати Счет фактура"""
        self.click_scroll_down_button()
        button_invoice = self.find_element(ModalDocumentCreatedLocators.LOCATOR_BUTTON_INVOICE)
        button_invoice.click()
        time.sleep(10)
        # дописать ожидание появления документа на странице

    def click_universal_transfer_document_upd(self):
        """Клик по кнопке Универсальный передаточный документ (УПД) в печати"""
        self.click_scroll_down_button()
        button_doc_upd = self.find_element(ModalDocumentCreatedLocators.LOCATOR_BUTTON_DOC_UPD)
        button_doc_upd.click()
        time.sleep(5)
        # Дописать ожидание появления документа

    def click_button_accept_and_close(self):
        """Клик по кнопке Принять и закрыть"""
        button_accept_and_close = self.find_element(ModalDocumentCreatedLocators.LOCATOR_BUTTON_ACCEPT_AND_CLOSE)
        self.scroll_to_elem_perform(button_accept_and_close)
        time.sleep(0.5)
        button_accept_and_close.click()
        time.sleep(1)
        self.waiting_element_invisibility(ModalDocumentCreatedLocators.LOCATOR_HEADER, sec=30)
