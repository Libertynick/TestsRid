import time

from selenium.webdriver import ActionChains, Keys
from selenium.webdriver.common.by import By

from base_page.base_page import BasePage
from ridan_1C_pages.invoice_for_design.invoice_for_design_locators import InvoiceForDesignLocators
from ridan_1C_pages.sale_section_page.sale_section_page_locators \
    import SaleSectionPageLocators, CustomerOrdersLocators, SingleCustomerOrderPageLocators
from base_page.base_page_locators import Base1cRidanLocators
from ridan_1C_pages.warehouse_and_delivery_page.warehouse_and_delivery_page_locators import RelatedDocumentsPageLocators


class SaleSectionPage(BasePage):
    """Раздел Продажи"""

    def go_to_sale_section(self):
        """Переход в раздел Продажи"""
        self.waiting_element_is_visibility_located_dom(SaleSectionPageLocators.LOCATOR_SALE_SECTION)
        sale_section = self.find_element(SaleSectionPageLocators.LOCATOR_SALE_SECTION)
        sale_section.click()
        self.waiting_element_is_visibility_located_dom(SaleSectionPageLocators.LOCATOR_LINK_SALES_REPORTS)

    def go_to_invoice_for_design(self):
        """Переход в раздел Накладные к оформлению"""
        self.waiting_element_is_visibility_located_dom(SaleSectionPageLocators.LOCATOR_LINK_INVOICE_FOR_DESIGN)
        invoice_for_design = self.find_element(SaleSectionPageLocators.LOCATOR_LINK_INVOICE_FOR_DESIGN)
        invoice_for_design.click()
        self.waiting_element_is_visibility_located_dom(InvoiceForDesignLocators.LOCATOR_HEADER)

    def close_all_title(self):
        """Закрытие всех вкладок"""
        all_title = self.driver.find_elements(*SaleSectionPageLocators.LOCATOR_ALL_TITLE)
        for title in all_title:
            title.click()


# Заказы клиентов
class CustomerOrders(SaleSectionPage):
    def go_to_customer_orders(self):
        """Переход в Заказы клиентов"""
        self.waiting_element_is_visibility_located_dom(SaleSectionPageLocators.LOCATOR_LINK_CUSTOMER_ORDERS)
        link_customer_orders = self.find_element(SaleSectionPageLocators.LOCATOR_LINK_CUSTOMER_ORDERS)
        link_customer_orders.click()
        self.waiting_element_is_visibility_located_dom(CustomerOrdersLocators.LOCATOR_HEADER_CUSTOMER_ORDERS, sec=120)

    def order_search_by_number(self, number_order: str):
        """Поиск заказа по номеру"""
        input_search_number_order = self.find_element(CustomerOrdersLocators.LOCATOR_INPUT_SEARCH)
        input_search_number_order.send_keys(number_order)
        # time.sleep(2)
        self.waiting_element_is_visibility_on_the_page(Base1cRidanLocators.LOCATOR_LOADER_SEARCH)
        self.waiting_for_loader_processing_on_page(Base1cRidanLocators.LOCATOR_LOADER_SEARCH)
        time.sleep(2)
        result_search_orders = self.driver.find_elements(*CustomerOrdersLocators.LOCATOR_RESULT_SEARCH_ORDER)
        count_result_search_orders = len(result_search_orders)
        assert count_result_search_orders == 1, \
            f'Количество найденных заказов больше 1 - ({count_result_search_orders})'

        list_found_order_number = self.driver.find_elements(*CustomerOrdersLocators.LOCATOR_RESULT_SEARCH_ORDER_RT)
        if len(list_found_order_number) == 0:
            list_found_order_number = self.driver.find_elements(
                *CustomerOrdersLocators.LOCATOR_RESULT_SEARCH_ORDER_0023)
        found_order_number = list_found_order_number[0].text

        assert found_order_number == number_order, \
            f'Номер найденного заказа {found_order_number} не соответствует искомому {number_order}'

    def comparison_of_the_cost_of_the_order_1c_with_crm(self, price_crm: str):
        """Сравнение стоимости в 1c со стоимостью в crm"""
        price_order_1c = self.find_element(CustomerOrdersLocators.PRICE_ORDER).text
        assert price_order_1c == price_crm, \
            f'{price_order_1c} стоимость заказа в 1с не равна стоимости заказа в crm {price_crm}'

    def go_to_the_found_order(self):
        """Переход в найденный заказ"""
        action = ActionChains(self.driver)

        list_found_order = self.driver.find_elements(*CustomerOrdersLocators.LOCATOR_RESULT_SEARCH_ORDER_RT)
        if len(list_found_order) == 0:
            list_found_order = self.driver.find_elements(*CustomerOrdersLocators.LOCATOR_RESULT_SEARCH_ORDER_0023)
        found_order = list_found_order[0]
        action.double_click(found_order).perform()
        self.waiting_element_is_visibility_located_dom(
            SingleCustomerOrderPageLocators.LOCATOR_HEADER_SINGLE_CUSTOMER_ORDER)


# Страница одного заказа клиента
class SingleCustomerOrderPage(SaleSectionPage):
    def go_to_the_products_tab(self):
        """Переход на вкладку Товары"""
        tab_products = self.find_element(SingleCustomerOrderPageLocators.LOCATOR_TAB_PRODUCTS)
        tab_products.click()
        time.sleep(3)
        self.waiting_element_is_visibility_on_the_page(SingleCustomerOrderPageLocators.LOCATOR_DIV_PRODUCT_FORM,
                                                       sec=60)

    def click_button_swipe_and_close(self):
        """Клик по кнопке Провести и закрыть"""
        button_swipe_and_close = self.find_element(SingleCustomerOrderPageLocators.LOCATOR_BUTTON_SWIPE_AND_CLOSE)
        # self.driver.execute_script("arguments[0].click()", button_swipe_and_close)
        button_swipe_and_close.click()
        # self.waiting_element_is_visibility_on_the_page(Base1cRidanLocators.LOCATOR_DIV_CHANGE_NOTIFICATION, sec=60)
        self.waiting_element_is_visibility_on_the_page(CustomerOrdersLocators.LOCATOR_HEADER_CUSTOMER_ORDERS, sec=90)

    def checking_items_in_the_order(self, articles_list: list):
        """Проверка артикулов в заказе"""
        for article in articles_list:
            # print(article)
            locator_article = (By.XPATH, f"//label[text()='Товары:']/following::div[text()='{article}']")
            self.waiting_element_is_visibility_located_dom(locator_article)

    def jump_to_related_documents(self, num_order: str):
        """Переход в Отчеты - Связанные документы"""
        locator_title_related_doc = (
            By.XPATH,
            f"//div[@class='openedItemTitle dots' and contains(text(), 'Связанные документы: Заказ клиента {num_order}')]")

        button_more = self.find_element(SingleCustomerOrderPageLocators.LOCATOR_BUTTON_MORE)
        button_more.click()
        time.sleep(1)
        time.sleep(0.5)
        button_down_arrow = self.find_element(SingleCustomerOrderPageLocators.LOCATOR_DOWN_ARROW)
        button_down_arrow_no_display = self.driver.find_elements(
            *SingleCustomerOrderPageLocators.LOCATOR_NO_DISPLAY_DOWN_ARROW
        )  # кнопка в виде стрелки, когда не на экране (прокручено до конца)

        while len(button_down_arrow_no_display) == 0:
            button_down_arrow.click()
            time.sleep(0.3)

            button_down_arrow_no_display = self.driver.find_elements(
                *SingleCustomerOrderPageLocators.LOCATOR_NO_DISPLAY_DOWN_ARROW
            )  # кнопка в виде стрелки, когда не на экране (прокручено до конца)

            # button_down_arrow.click()
            # time.sleep(0.3)
            # button_down_arrow.click()
            # time.sleep(0.3)
            # button_down_arrow.click()
            # time.sleep(0.3)
            # button_down_arrow.click()
            # time.sleep(0.3)
            # button_down_arrow.click()
            # time.sleep(0.3)

        button_reports = self.find_element(SingleCustomerOrderPageLocators.LOCATOR_BUTTON_REPORTS)
        button_reports.click()
        time.sleep(0.5)
        button_related_documents = self.find_element(
            SingleCustomerOrderPageLocators.LOCATOR_RELATED_DOCUMENTS_IN_REPORTS_BUTTON)
        self.click_js(button_related_documents)
        time.sleep(0.5)
        self.waiting_element_is_visibility_on_the_page(locator_title_related_doc,
                                                       sec=90)
