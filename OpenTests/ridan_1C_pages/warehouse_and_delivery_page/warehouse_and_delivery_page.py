"""Склад и доставка"""

import time

from selenium.common import TimeoutException
from selenium.webdriver import ActionChains
from selenium.webdriver.common.by import By

from base_page.base_page import BasePage
from base_page.base_page_locators import Base1cRidanLocators
from ridan_1C_pages.warehouse_and_delivery_page.warehouse_and_delivery_page_locators import \
    WarehouseAndDeliverySectionsPageLocators, WarehouseOrdersPageLocators, GoodsIssueNoteLocators, \
    RelatedDocumentsPageLocators, SelectionPlacementOfGoodsLocators


class WarehouseAndDeliverySectionsPage(BasePage):
    """Страница разделов Склада и доставки"""

    def go_to_section_warehouse_orders(self):
        """Переход в раздел Складские Ордера"""
        link_warehouse_orders = self.find_element(
            WarehouseAndDeliverySectionsPageLocators.LOCATOR_LINK_WAREHOUSE_ORDERS)
        self.driver.execute_script("arguments[0].click()", link_warehouse_orders)
        self.waiting_element_is_visibility_on_the_page(WarehouseOrdersPageLocators.LOCATOR_TITLE_DIV_WAREHOUSE)
        self.waiting_element_is_visibility_on_the_page(
            WarehouseOrdersPageLocators.LOCATOR_HEADER_WAREHOUSE_ORDERS)


class WarehouseOrdersPage(BasePage):
    """Страница Складские ордера"""

    def select_warehouse_leshkovo(self):
        """Выбор склада"""
        self.waiting_element_is_visibility_on_the_page(WarehouseOrdersPageLocators.LOCATOR_INPUT_WAREHOUSE)
        input_warehouse = self.find_element(WarehouseOrdersPageLocators.LOCATOR_INPUT_WAREHOUSE)
        input_warehouse.clear()
        input_warehouse.send_keys('0010')
        self.waiting_element_is_visibility_located_dom(WarehouseOrdersPageLocators.LOCATOR_OL_WAREHOUSE_LESHKOVO)
        item_warehouse_leshkovo = self.find_element(WarehouseOrdersPageLocators.LOCATOR_OL_WAREHOUSE_LESHKOVO)
        item_warehouse_leshkovo.click()
        text_input = input_warehouse.get_attribute("value")
        print(text_input)
        assert text_input != '', \
            f'Поле поиска склада не заполнено после выбора склада - ({text_input})'

    def should_be_a_list_of_documents(self):
        """Должен быть список документов"""
        list_of_documents = self.driver.find_elements(*WarehouseOrdersPageLocators.LOCATOR_LIST_OF_DOCUMENTS)
        assert len(list_of_documents) != 0, \
            f'Список документов на странице после выбора склада не отображается {len(list_of_documents)}'

    def entry_of_application_number_po(self, num_po: str):
        """Ввод номера заявки PO в поле Поиск, num_po - Номер заявки PO"""
        self.waiting_element_is_visibility_on_the_page(WarehouseOrdersPageLocators.LOCATOR_INPUT_SEARCH)
        input_search = self.find_element(WarehouseOrdersPageLocators.LOCATOR_INPUT_SEARCH)
        input_search.clear()
        input_search.send_keys(num_po)
        time.sleep(3)
        self.waiting_for_loader_processing_on_page(Base1cRidanLocators.LOCATOR_LOADER_SEARCH)
        result_search = self.driver.find_elements(*WarehouseOrdersPageLocators.LOCATOR_LIST_OF_DOCUMENTS)
        for num_doc in result_search:
            num_doc = num_doc.text
            assert num_doc == num_po, f'Номер найденной заявки ({num_doc}) не равен искомой ({num_po})'

    def go_to_application(self):
        """Переход в заявку"""
        time.sleep(3)
        application_for_transition = self.find_element(WarehouseOrdersPageLocators.LOCATOR_APPLICATION_FOR_TRANSITION)
        action = ActionChains(self.driver)
        action.double_click(application_for_transition).perform()
        time.sleep(2)
        self.waiting_element_is_visibility_on_the_page(GoodsIssueNoteLocators.LOCATOR_HEADER_WITHDRAWAL_SLIP)


class GoodsIssueNote(BasePage):
    """Страница Расходный ордер на товары"""

    def click_on_the_report_button(self):
        """Клик по кнопке Отчеты"""
        button_reports = self.find_element(GoodsIssueNoteLocators.LOCATOR_BUTTON_REPORTS)
        button_reports.click()

    def selecting_related_documents_in_reports(self):
        """Выбор Связанные документы в Отчеты"""
        self.expecting_clickability(GoodsIssueNoteLocators.LOCATOR_BUTTON_RELATED_DOCUMENTS)
        button_related_doc = self.find_element(GoodsIssueNoteLocators.LOCATOR_BUTTON_RELATED_DOCUMENTS)
        button_related_doc.click()
        self.waiting_element_is_visibility_on_the_page(RelatedDocumentsPageLocators.LOCATOR_HEADER_RELATED_DOCUMENTS)

    def click_button_push_document(self):
        """Клик по кнопке провести документ"""
        push_button = self.find_element(GoodsIssueNoteLocators.LOCATOR_PUSH_DOCUMENT_BUTTON)
        push_button.click()
        time.sleep(5)

    def shipping_status_selection(self, status: str):
        """Выбор статуса отгрузки"""
        locator_select_status = (By.XPATH, f"//div[@id='editDropDown']//span[text()='{status}']")

        shipment_status_input = self.find_element(GoodsIssueNoteLocators.LOCATOR_INPUT_SHIPMENT_STATUS)
        shipment_status_input.clear()
        shipment_status_input.send_keys(status)
        self.waiting_element_is_visibility_on_the_page(locator_select_status)
        select_status = self.find_element(locator_select_status)
        select_status.click()
        try:
            self.waiting_element_is_visibility_on_the_page(GoodsIssueNoteLocators.LOCATOR_DOCUMENT_CONFIRMATION_MODAL)
            ok_btn_in_document_confirmation_modal = self.find_element(
                GoodsIssueNoteLocators.LOCATOR_BUTTON_OK_IN_DOCUMENT_CONFIRMATION_MODAL)
            ok_btn_in_document_confirmation_modal.click()
        except TimeoutException:
            pass
        text_selected_status = shipment_status_input.get_attribute("value")
        assert text_selected_status == status, f'Выбранный статус - ({text_selected_status}) ' \
                                               f'не соответствует искомому - ({status})'

    def click_button_hold_and_close(self):
        """Клик по кнопке Провести и закрыть"""
        button_hold_and_close = self.find_element(GoodsIssueNoteLocators.LOCATOR_BUTTON_HOLD_AND_CLOSE)
        button_hold_and_close.click()
        self.waiting_element_is_visibility_on_the_page(
            RelatedDocumentsPageLocators.LOCATOR_HEADER_RELATED_DOCUMENTS, sec=90)

    def close_all_titles(self):
        """Закрытие всех вкладок"""
        button_close_title_list = self.driver.find_elements(*GoodsIssueNoteLocators.LOCATOR_BUTTON_CLOSE_TITLE)
        for btn_close_title in button_close_title_list:
            btn_close_title.click()


class RelatedDocumentsPage(BasePage):
    """Страница Связанные документы"""

    def transition_to_the_document_selection_placement_of_goods(self):
        """Переход в документ Отбор (размещение) товаров"""
        # time.sleep(20)
        self.switch_to_frame(RelatedDocumentsPageLocators.LOCATOR_IFRAME_RELATED_DOC)
        time.sleep(1)
        button_document = self.find_element(
            RelatedDocumentsPageLocators.LOCATOR_BUTTON_DOCUMENT_SELECTION_PLACEMENT_OF_GOODS)
        action = ActionChains(self.driver)
        action.double_click(button_document).perform()
        self.driver.switch_to.default_content()
        self.waiting_element_is_visibility_on_the_page(
            SelectionPlacementOfGoodsLocators.LOCATOR_HEADER_SELECTION_PLACEMENT_OF_GOODS, sec=60)

    def transition_to_the_issue_note_document(self, num_request: str):
        """Переход в документ Расходный ордер"""
        self.switch_to_frame(RelatedDocumentsPageLocators.LOCATOR_IFRAME_RELATED_DOC)
        document_invoice = self.find_element(RelatedDocumentsPageLocators.LOCATOR_INVOICE_DOCUMENT)
        action = ActionChains(self.driver)
        action.double_click(document_invoice).perform()
        self.driver.switch_to.default_content()
        self.waiting_element_is_visibility_on_the_page(GoodsIssueNoteLocators.LOCATOR_HEADER_WITHDRAWAL_SLIP, sec=90)
        header_doc = self.find_element(GoodsIssueNoteLocators.LOCATOR_HEADER_WITHDRAWAL_SLIP)
        num_request_doc = header_doc.get_attribute("data-title")
        print(num_request_doc)
        num_request_doc = num_request_doc.split(' ')[4]
        assert num_request_doc == num_request, f'Номер запроса в заголовке - ({num_request_doc}) не равен' \
                                               f'номеру искомого запроса - ({num_request})'


class SelectionPlacementOfGoodsPage(BasePage):
    """Страница Отбор (размещение) товаров"""

    def click_on_the_print_button(self):
        """Клик по кнопке Печать"""
        self.expecting_clickability(SelectionPlacementOfGoodsLocators.LOCATOR_BUTTON_PRINT)
        button_print = self.find_element(SelectionPlacementOfGoodsLocators.LOCATOR_BUTTON_PRINT)
        button_print.click()

    def print_selection_assembly_sheet(self, article: str, quantity_article: str):
        """Выбор печати сборочный лист
        article - Код товара
        quantity_article - количество товара"""

        self.click_on_the_print_button()
        button_assembly_list = self.find_element(SelectionPlacementOfGoodsLocators.LOCATOR_RIDAN_ASSEMBLY_LIST)
        button_assembly_list.click()
        # self.waiting_element_is_visibility_on_the_page(SelectionPlacementOfGoodsLocators.LOCATOR_HEADER_SELECTION_PLACEMENT_OF_GOODS)
        # time.sleep(3)
        # self.switch_to_frame(SelectionPlacementOfGoodsLocators.LOCATOR_FRAME_PRINT_FORM)
        # self.waiting_element_is_visibility_on_the_page(
        #     SelectionPlacementOfGoodsLocators.LOCATOR_HEADER_TASK_FOR_GOODS_SELECTION, sec=30)
        # locator_article = (By.XPATH, f"//div[text()='{article}']")
        # locator_quantity_article = (By.XPATH, f"//span[text()='(план)']/following::div[text()='{quantity_article}'][1]")
        # self.waiting_element_is_visibility_on_the_page(locator_article)
        # self.waiting_element_is_visibility_on_the_page(locator_quantity_article)

    def back_from_the_page_selection_task(self):
        """Назад со страницы Задание на отбор (печать документа)"""
        button_back = self.find_element(SelectionPlacementOfGoodsLocators.LOCATOR_BACK_FROM_THE_PAGE_SELECTION_TASK)
        button_back.click()
        self.waiting_element_is_visibility_on_the_page(
            SelectionPlacementOfGoodsLocators.LOCATOR_HEADER_SELECTION_PLACEMENT_OF_GOODS)

    def select_status_without_errors(self):
        """Выбор статуса Без ошибок"""
        input_status = self.find_element(SelectionPlacementOfGoodsLocators.LOCATOR_INPUT_STATUS)
        status = 'Выполнено без ошибок'
        input_status.clear()
        input_status.send_keys(status)
        locator_status_span = (By.XPATH, f"//span[text()='{status}']")
        self.waiting_element_is_visibility_located_dom(locator_status_span)
        status_without_errors = self.find_element(locator_status_span)
        status_without_errors.click()

    def click_on_the_submit_document_button(self):
        """Клик по кнопке Провести документ"""
        button_submit_document = self.find_element(SelectionPlacementOfGoodsLocators.LOCATOR_BUTTON_SUBMIT_DOCUMENT)
        button_submit_document.click()
        time.sleep(5)

    def click_on_the_button_to_hold_and_close(self):
        """Клик по кнопке Провести и закрыть"""
        button_hold_and_close = self.find_element(SelectionPlacementOfGoodsLocators.LOCATOR_BUTTON_CLICK_HOLD_AND_CLOSE)
        button_hold_and_close.click()
        self.waiting_element_is_visibility_on_the_page(
            SelectionPlacementOfGoodsLocators.LOCATOR_BUTTON_ENABLES_OR_DISABLES_THE_PRINTABLE_EDITING_MODE, sec=20)
