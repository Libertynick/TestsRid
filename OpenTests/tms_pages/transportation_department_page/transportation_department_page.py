import time
from datetime import datetime
from pathlib import Path

from selenium.webdriver.common.by import By
from selenium.webdriver.support.select import Select

from base_page.base_page import BasePage
from tms_pages.transportation_department_page.transportation_department_page_locators import \
    TransportationDepartmentPageLocators

import os.path


class TransportationDepartmentPage(BasePage):
    """Страница Транспортный отдел"""

    def switch_to_main_frame(self):
        """Переключение в MainFrame"""
        self.switch_to_frame(TransportationDepartmentPageLocators.LOCATOR_IFRAME_MAIN)
        self.waiting_element_is_visibility_on_the_page(TransportationDepartmentPageLocators.LOCATOR_INPUT_NUMBER)

    def switch_to_request_frame(self):
        """Переключение в Request Frame"""
        self.switch_to_frame(TransportationDepartmentPageLocators.LOCATOR_IFRAME_REQUEST)

    def switch_to_ticket_frame(self):
        """Переключение в iframeTicket"""
        self.switch_to_frame(TransportationDepartmentPageLocators.LOCATOR_IFRAME_TICKET)

    def switch_to_frame_frame_24_248(self):
        """Переключение во фрэйм frame_24_248"""
        self.switch_to_frame(TransportationDepartmentPageLocators.LOCATOR_FRAME_FRAME_24_248)

    def waiting_for_loader_processing_loading(self):
        """Ожидание отработки лоадера Загрузка"""
        time.sleep(3)
        self.waiting_for_loader_processing_on_page(TransportationDepartmentPageLocators.LOCATOR_LOADER_LOADING)

    def search_for_an_application_by_number(self, number_application: str):
        """Поиск заявки по номеру"""
        locator_result_search = (
            By.XPATH, f"//tr[@class='TrLightBlue']/td[@onclick='ShowTicket({number_application});'][1]")

        input_search = self.find_element(TransportationDepartmentPageLocators.LOCATOR_INPUT_NUMBER)
        button_search = self.find_element(TransportationDepartmentPageLocators.LOCATOR_BUTTON_SEARCH)
        input_search.send_keys(number_application)
        button_search.click()
        self.waiting_element_is_visibility_on_the_page(locator_result_search, sec=40)

    def opening_an_application(self, num_application: str):
        """Открытие заявки"""
        locator_button_open_application = (
            By.XPATH, f"//img[@onclick='javascript:CreateOrAddDelivery({num_application});']")
        button_open_application = self.find_element(locator_button_open_application)
        button_open_application.click()
        self.driver.switch_to.default_content()
        self.switch_to_request_frame()
        self.switch_to_ticket_frame()
        self.waiting_element_is_visibility_on_the_page(TransportationDepartmentPageLocators.LOCATOR_NAME_TICKET_TITLE)

    def click_menu_delivery_and_pickup_and_company_name(self):
        """Вывод меню доставка и самовывоз и название компании"""
        menu = self.find_element(
            TransportationDepartmentPageLocators.LOCATOR_INPUT_DROP_MENU_DELIVERY_AND_PICKUP_AND_COMPANY_NAME)
        menu.click()
        self.waiting_element_is_visibility_on_the_page(
            TransportationDepartmentPageLocators.LOCATOR_MENU_DELIVERY_AND_PICKUP_AND_COMPANY_NAME)

    def choice_of_transport_company(self, transport_company: str):
        """Выбор транспортной компании
        transport_company - название транспортной компании
        """
        transport_company_str = ''
        for el in transport_company:
            if el == '"':
                el = '\"'
            transport_company_str += el

        locator_transport_company = (By.XPATH, f"//font[text()='{transport_company_str}']")
        transport_company_item = self.find_element(locator_transport_company)
        transport_company_item.click()
        time.sleep(1)

    def choice_driver(self, driver_name: str):
        """ВЫбор водителя
        driver_name - имя водителя
        """
        locator_driver_item = (By.XPATH, f"//font[text()='{driver_name}']")

        input_driver = self.find_element(TransportationDepartmentPageLocators.LOCATOR_INPUT_DRIVER)
        input_driver.send_keys(driver_name)

        self.waiting_element_is_visibility_on_the_page(locator_driver_item)
        item_driver = self.find_element(locator_driver_item)
        item_driver.click()

        res_driver = input_driver.get_attribute("value")
        assert res_driver == driver_name, f'Выбранный водитель - ({res_driver}) не соответствует искомому - ({driver_name})'

    def choice_number_phone(self):
        """Выбор номера телефона"""
        drop_menu_phone = self.find_element(TransportationDepartmentPageLocators.LOCATOR_BUTTON_DROP_MENU_NUMBER_PHONE)
        drop_menu_phone.click()
        self.waiting_element_is_visibility_on_the_page(TransportationDepartmentPageLocators.LOCATOR_LIST_MENU)
        item_num_phone = self.find_element(TransportationDepartmentPageLocators.LOCATOR_ITEM_LIST_NUMBER_PHONE)
        item_num_phone.click()

        res_num_phone = self.find_element(TransportationDepartmentPageLocators.LOCATOR_INPUT_NUMBER_PHONE)
        res_num_phone = res_num_phone.get_attribute("value")

        assert res_num_phone != '', f'Поле Номер телефона пустое - ({res_num_phone})'

    def choice_number_of_the_car(self):
        """Выбор номера машины"""
        drop_menu_num_car = self.find_element(
            TransportationDepartmentPageLocators.LOCATOR_BUTTON_DROP_MENU_NUMBER_OF_THE_CAR)
        drop_menu_num_car.click()
        self.waiting_element_is_visibility_on_the_page(TransportationDepartmentPageLocators.LOCATOR_DROP_MENU_NUM_CAR)
        num_car = self.find_element(TransportationDepartmentPageLocators.LOCATOR_ITEM_DROP_MENU_NUM_CAR)
        num_car.click()
        res_num_car = self.find_element(TransportationDepartmentPageLocators.LOCATOR_INPUT_NUM_CAR)
        res_num_car = res_num_car.get_attribute("value")

        assert res_num_car != '', f'Поле Номер машины пустое - ({res_num_car})'

    def choice_mark_car(self):
        """Выбор марки машины"""
        mark_car_button_drop_menu = self.find_element(
            TransportationDepartmentPageLocators.LOCATOR_BUTTON_DROP_MENU_MARK_CAR)
        mark_car_button_drop_menu.click()
        self.waiting_element_is_visibility_on_the_page(TransportationDepartmentPageLocators.LOCATOR_DROP_MENU_MARK_CAR)
        mark_car = self.find_element(TransportationDepartmentPageLocators.LOCATOR_ITEM_DROP_MENU_MARK_CAR)
        mark_car.click()

        res_mark_car = self.find_element(TransportationDepartmentPageLocators.LOCATOR_INPUT_MARK_CAR)
        res_mark_car = res_mark_car.get_attribute("value")
        assert res_mark_car != '', f'Поле Марка машины пустое - ({res_mark_car})'

    def choice_tonnage(self, value_tonnage: str):
        """Выбор Тоннажа
        value_tonnage - значение тоннажа
        """
        select_tonnage = self.find_element(TransportationDepartmentPageLocators.LOCATOR_SELECT_TONNAGE)
        select = Select(select_tonnage)
        # select.select_by_value(value_tonnage)
        select.select_by_index(1)

    def choice_of_delivery_type(self, delivery_type: str):
        """Выбор типа доставки
        delivery_type - тип доставки
        """
        select_type_delivery = self.find_element(TransportationDepartmentPageLocators.LOCATOR_SELECT_DELIVERY_TYPE)
        select = Select(select_type_delivery)
        select.select_by_value(delivery_type)
        selected_type_delivery = select.first_selected_option
        selected_type_delivery = selected_type_delivery.text
        assert selected_type_delivery == delivery_type, f'Выбранный тип доставки - ({selected_type_delivery}) ' \
                                                        f'не равен искомому - ({delivery_type})'

    def choice_of_arrival_time(self, arrival_time: str):
        """Выбор времени приезда
        arrival_time - время приезда
        """
        select_arrival_time = self.find_element(TransportationDepartmentPageLocators.LOCATOR_SELECT_ARRIVAL_TIME)
        select = Select(select_arrival_time)
        select.select_by_value(arrival_time)
        selected_arrival_time = select.first_selected_option
        selected_arrival_time = selected_arrival_time.text
        assert selected_arrival_time == arrival_time, f'Выбранное время доставки - ({select_arrival_time}) ' \
                                                      f'не соответствует искомому времени доставки - ({arrival_time})'

    def click_button_pre_registration(self):
        """Клик по кнопке Предварительная регистрация"""
        button_pre_registration = self.find_element(
            TransportationDepartmentPageLocators.LOCATOR_BUTTON_PRE_REGISTRATION)
        self.waiting_element_is_visibility_on_the_page(TransportationDepartmentPageLocators.LOCATOR_NAME_TICKET_TITLE)
        self.click_js(button_pre_registration)
        button_machine_formed = self.driver.find_elements(
            *TransportationDepartmentPageLocators.LOCATOR_BUTTON_MACHINE_FORMED)  # Кнопка машина сформирована

        assert len(button_machine_formed) != 0, \
            f'Кнопка машина сформирована не отображается на странице - ({len(button_machine_formed)})'
        button_machine_formed_text = button_machine_formed[0].get_attribute("value")
        print(button_machine_formed_text, 'button_pre_registration_text')
        assert button_machine_formed_text == 'Машина сформирована', \
            f'Текст в кнопке - ({button_machine_formed_text}) не соответствует тексту - (Машина сформирована)'

    def click_button_machine_formed(self):
        """Клик по кнопке Машина сформирована"""
        button_machine_formed = self.find_element(TransportationDepartmentPageLocators.LOCATOR_BUTTON_MACHINE_FORMED)
        self.click_js(button_machine_formed)
        self.waiting_element_is_visibility_on_the_page(TransportationDepartmentPageLocators.LOCATOR_NAME_TICKET_TITLE)
        button_machine_ordered_list = self.driver.find_elements(
            *TransportationDepartmentPageLocators.LOCATOR_BUTTON_MACHINE_ORDERED)
        len_button_machine_ordered_list = len(button_machine_ordered_list)
        assert len_button_machine_ordered_list != 0, \
            f'Кнопка машина заказана не отображается на странице - ({len_button_machine_ordered_list})'
        text_button_machine_ordered = button_machine_ordered_list[0].get_attribute("value")
        print(text_button_machine_ordered)
        assert text_button_machine_ordered == 'Машина заказана', \
            f'Текст в кнопке - ({text_button_machine_ordered}) не соответствует тексту - (Машина заказана)'

    def click_button_machine_ordered(self):
        """Клик по кнопке Машина заказана"""
        button_machine_ordered = self.find_element(TransportationDepartmentPageLocators.LOCATOR_BUTTON_MACHINE_ORDERED)
        self.click_js(button_machine_ordered)
        self.waiting_element_is_visibility_on_the_page(TransportationDepartmentPageLocators.LOCATOR_NAME_TICKET_TITLE)

    def document_download_check_dpd(self):
        """Проверка скачивания документа DPD
        request_num - номер запроса
        """
        downloads_path = str(Path.home() / "Downloads")
        current_datetime = datetime.now()
        dict_datetime = {}

        dict_datetime['year'] = str(current_datetime.year)
        dict_datetime['month'] = str(current_datetime.month)
        dict_datetime['day'] = str(current_datetime.day)

        for key in dict_datetime.keys():
            if len(dict_datetime[key]) < 2:
                # print(key, dict_datetime[key])
                dict_datetime[key] = '0' + dict_datetime[key]

        date_file = dict_datetime['year'] + dict_datetime['month'] + dict_datetime['day']

        name_file = f'DPDReport_{date_file}.xls'
        print(name_file, 'name_file')
        button_dpd = self.find_element(TransportationDepartmentPageLocators.LOCATOR_BUTTON_DPD)

        button_dpd.click()
        self.checking_the_download_document_in_the_download_folder(name_file)

    def click_button_minibus(self):
        """Клик по кнопке Маршрутник"""
        current_datetime = datetime.now()
        dict_datetime = {}
        downloads_path = str(Path.home() / "Downloads")

        dict_datetime['year'] = str(current_datetime.year)
        dict_datetime['month'] = str(current_datetime.month)
        dict_datetime['day'] = str(current_datetime.day)
        dict_datetime['hour'] = str(current_datetime.hour)
        dict_datetime['minute'] = str(current_datetime.minute)

        for key in dict_datetime.keys():
            if len(dict_datetime[key]) < 2:
                # print(key, dict_datetime[key])
                dict_datetime[key] = '0' + dict_datetime[key]

        name_file = f'RouteExcel_{dict_datetime["year"]}{dict_datetime["month"]}{dict_datetime["day"]}.xls'
        btn_minibus = self.find_element(TransportationDepartmentPageLocators.LOCATOR_BUTTON_MINIBUS)
        self.scroll_to_elem_perform(btn_minibus)
        time.sleep(0.5)
        self.click_js(btn_minibus)
        time.sleep(5)

        end_time = 60
        pause = 10

        while end_time != 0:
            last_doc = self.search_for_the_last_downloaded_file_in_a_folder(downloads_path)
            if name_file[:-4] in last_doc:
                end_time = 0
                last_doc_list = last_doc.split('_')
                last_doc = f'{last_doc_list[0]}_{last_doc_list[1]}{last_doc_list[2][4:]}'
                assert name_file == last_doc, f'Имя искомого файла - ({name_file}) не равно последнему скачанному ' \
                                              f'документу - ({last_doc})'
                return end_time

            end_time -= pause
            time.sleep(pause)
            print(end_time, 'end_time')
            assert end_time != 0, f'Файл - ({name_file}) не найден'

    def click_button_change(self):
        """Клик по кнопке Изменить"""
        button_change = self.find_element(TransportationDepartmentPageLocators.LOCATOR_BUTTON_CHANGE)
        self.click_js(button_change)
        self.waiting_element_is_visibility_located_dom(
            TransportationDepartmentPageLocators.LOCATOR_INPUT_NUM_TN_AND_SUM)

    def entering_a_value_in_a_field_num_tn_and_sum(self, value: str):
        """Ввод значения в поле № ТН и сумма"""
        input_num_tn_and_sum = self.find_element(TransportationDepartmentPageLocators.LOCATOR_INPUT_NUM_TN_AND_SUM)
        input_num_tn_and_sum.clear()
        input_num_tn_and_sum.send_keys(value)

    def click_button_save(self, entered_shipping_cost_value: str):
        """Клик по кнопке Сохранить
        entered_shipping_cost_value - введенное значение стоимости доставки
        """
        button_save = self.find_element(TransportationDepartmentPageLocators.LOCATOR_BUTTON_SAVE)
        self.click_js(button_save)
        time.sleep(1)
        info_delivery_cost = self.find_element(TransportationDepartmentPageLocators.LOCATOR_SPAN_COST_OF_DELIVERY).text
        info_delivery_cost = info_delivery_cost.split(',')[0]
        assert info_delivery_cost == entered_shipping_cost_value, \
            f'Значение в поле Стоимость доставки - ({info_delivery_cost}) не равно введенному ' \
            f'значению - ({entered_shipping_cost_value})'

    def saving_the_grand_total(self) -> int:
        """Сохранение итоговой суммы"""
        grand_total = self.find_element(TransportationDepartmentPageLocators.LOCATOR_GRAND_TOTAL).text
        grand_total = float(grand_total.split(' ')[0].replace(',', '.'))
        grand_total = int(grand_total)
        return grand_total
