import time
from pathlib import Path

from selenium.webdriver.common.by import By

from base_page.base_page import BasePage
from tms_pages.register_of_applications_for_packaging_pages.register_of_applications_for_packaging_page_locators \
    import RegisterOfApplicationsForPackagingLocators
from selenium.webdriver.support.ui import Select


class RegisterOfApplicationsForPackaging(BasePage):
    """Страница реестр заявок на упаковку"""

    def should_header_register_of_warehouse_coordinators(self):
        """Должен быть заголовок  Реестр координаторов склада"""
        locator_new_page = (By.TAG_NAME, "html")
        self.find_element(locator_new_page)
        self.waiting_element_is_visibility_on_the_page(
            RegisterOfApplicationsForPackagingLocators.LOCATOR_HEADER_REGISTER_OF_WAREHOUSE_COORDINATORS, sec=20)

    def choice_of_company(self, salesman: str):
        """Выбор компании, salesman - продавец"""
        select_company = self.find_element(RegisterOfApplicationsForPackagingLocators.COMPANY_SELECT)
        select = Select(select_company)
        if salesman == 'Ридан':
            select.select_by_value("RU01")
        elif salesman == 'РИДАН ТРЕЙД':
            select.select_by_value("RUT")

    def switch_to_iframe_main(self):
        """Переключение во фрэйм Мэйн"""
        iframe = self.find_element(RegisterOfApplicationsForPackagingLocators.LOCATOR_IFRAME_MAIN)
        self.driver.switch_to.frame(iframe)
        self.waiting_element_invisibility(RegisterOfApplicationsForPackagingLocators.LOCATOR_LOADING_SPINNER)

    def search_for_an_application_by_number(self, application_number):
        """Поиск заявки по номеру. application_number- номер заявки"""
        input_application_num = self.find_element(RegisterOfApplicationsForPackagingLocators.LOCATOR_INPUT_NUMBER)
        input_application_num.clear()
        input_application_num.send_keys(application_number)
        button_search = self.find_element(RegisterOfApplicationsForPackagingLocators.LOCATOR_BUTTON_SEARCH)
        # self.driver.execute_script("arguments[0].click()", button_search)
        button_search.click()
        time.sleep(2)
        self.waiting_element_invisibility(RegisterOfApplicationsForPackagingLocators.LOCATOR_LOADING_SPINNER)
        time.sleep(5)
        result_search_application = self.driver.find_elements(
            *RegisterOfApplicationsForPackagingLocators.LOCATOR_TR_RESULT_SEARCH_APPLICATION)
        assert len(result_search_application) == 1, \
            f'В результате поиска заявки по номеру заявки найдено больше одной заявки или 0 - ' \
            f'количество найденных заявок ({len(result_search_application)})'

    def transition_to_the_found_application(self):
        """Переход в найденную заявку"""
        found_application = self.find_element(
            RegisterOfApplicationsForPackagingLocators.LOCATOR_TR_RESULT_SEARCH_APPLICATION)
        found_application.click()

    def switch_to_frame_request(self):
        """Переключение во фроэйм Запрос"""
        self.switch_to_frame(RegisterOfApplicationsForPackagingLocators.LOCATOR_FRAME_REQUEST)

    def switch_to_frame_ticket(self):
        """Переключение во фрэйм Тикет"""
        self.switch_to_frame(RegisterOfApplicationsForPackagingLocators.LOCATOR_IFRAME_TICKET)

    def application_status_should_be_new(self):
        """Статус заявки должен быть - новая"""
        application_status = self.find_element(RegisterOfApplicationsForPackagingLocators.LOCATOR_APPLICATION_STATUS)
        application_status_text = application_status.text
        assert application_status_text == 'Новая заявка на упаковку', \
            f'Статус заявки на упаковку - не новая ({application_status_text})'

    def should_be_status_packed(self):
        """Должен быть статус Упаковано"""
        status_packed = 'Упаковано'
        application_status = self.find_element(
            RegisterOfApplicationsForPackagingLocators.LOCATOR_APPLICATION_STATUS).text
        assert application_status == status_packed, f'Статус заявки на упаковку на странице - ({application_status}) ' \
                                                    f'не соответствует статусу ({status_packed})'

    def click_transfer_to_packaging(self):
        """Клик по кнопке Передать на упаковку"""
        button_transfer_to_packaging = self.find_element(
            RegisterOfApplicationsForPackagingLocators.LOCATOR_BUTTON_TRANSFER_TO_PACKAGING)
        button_transfer_to_packaging.click()
        time.sleep(3)
        application_status = self.find_element(RegisterOfApplicationsForPackagingLocators.LOCATOR_APPLICATION_STATUS)
        application_status_text = application_status.text
        assert application_status_text == 'Передано на упаковку', \
            f'Статус заявки на упаковку - не Передано на упаковку ({application_status_text})'

    def switch_to_frame_20_195(self):
        self.switch_to_frame(RegisterOfApplicationsForPackagingLocators.LOCATOR_FRAME_20_195)

    def click_button_check(self):
        """Клик по кнопке Проверить"""
        button_check = self.find_element(RegisterOfApplicationsForPackagingLocators.LOCATOR_BUTTON_CHECK)
        self.scroll_to_elem_perform(button_check)
        time.sleep(0.5)
        self.driver.execute_script("arguments[0].click()", button_check)
        time.sleep(2)
        td_status_pq = self.find_element(RegisterOfApplicationsForPackagingLocators.LOCATOR_TD_STATUS_PQ)
        td_status_pq_text = td_status_pq.text
        td_pq = self.driver.find_elements(*RegisterOfApplicationsForPackagingLocators.LOCATOR_TD_PO)
        assert len(td_pq) != 0, f'Ячейка Статус PO не заполнилась'
        td_pq_text = td_pq[0].text

        assert td_status_pq_text != '' and td_pq_text != '', \
            f'Ячейка Статус PQ не заполнилась - ({td_status_pq_text})' \
            f'Ячейка PQ - ({td_pq_text})'

    def store_packing_request_number(self):
        """Сохранене номера запроса на упаковку"""
        self.waiting_element_is_visibility_on_the_page(
            RegisterOfApplicationsForPackagingLocators.LOCATOR_NUMBER_REQUEST, sec=10)
        number_request = self.find_element(RegisterOfApplicationsForPackagingLocators.LOCATOR_NUMBER_REQUEST).text
        return number_request

    def saving_the_po_number_in_the_application(self):
        """Сохранение номера PO в заявке"""
        self.waiting_element_is_visibility_on_the_page(RegisterOfApplicationsForPackagingLocators.LOCATOR_TD_PO, sec=10)
        po_num = self.find_element(RegisterOfApplicationsForPackagingLocators.LOCATOR_TD_PO).text
        return po_num

    def store_buyer(self):
        """Сохранение покупателя"""
        self.waiting_element_is_visibility_on_the_page(RegisterOfApplicationsForPackagingLocators.LOCATOR_BUYER, sec=10)
        buyer = self.find_element(RegisterOfApplicationsForPackagingLocators.LOCATOR_BUYER).text
        return buyer

    def choice_of_document_type_application(self, type_document: str):
        """Выбор типа документа"""
        select_type_document = self.find_element(
            RegisterOfApplicationsForPackagingLocators.LOCATOR_SELECT_TYPE_DOCUMENT)
        select = Select(select_type_document)
        select.select_by_value(type_document)

    def click_button_print(self):
        """Клик по кнопке Печать"""
        button_print = self.find_element(RegisterOfApplicationsForPackagingLocators.LOCATOR_BUTTON_PRINT)
        self.click_js(button_print)
        time.sleep(10)

    def click_button_documents_are_ready(self):
        """Клик по кнопке Документы готовы"""
        button_doc_are_ready = self.find_element(
            RegisterOfApplicationsForPackagingLocators.LOCATOR_BUTTON_DOCUMENTS_ARE_READY)
        self.click_js(button_doc_are_ready)
        self.waiting_element_is_visibility_on_the_page(
            RegisterOfApplicationsForPackagingLocators.LOCATOR_STATUS_DOC_ARE_READY, sec=40)

    def switch_to_display_delivery_information(self):
        """Переход в Раздел информации о доставке"""
        tr_show_delivery = self.find_element(RegisterOfApplicationsForPackagingLocators.LOCATOR_TR_SHOW_DELIVERY)
        tr_show_delivery.click()
        self.driver.switch_to.default_content()
        self.switch_to_frame_request()
        self.switch_to_frame_ticket()
        self.waiting_element_is_visibility_on_the_page(
            RegisterOfApplicationsForPackagingLocators.LOCATOR_TITLE_VEHICLE_REGISTRATION)

    def must_be_the_status_of_the_car_ordered(self):
        """Должен быть статус Машина заказана"""
        true_status = 'Машина заказана'
        status_application = self.find_element(
            RegisterOfApplicationsForPackagingLocators.LOCATOR_SHIPPING_REQUEST_STATUS).text
        assert true_status == status_application, \
            f'Статус открывшейся заявки - ({status_application}) не равен статусу - ({true_status})'

    def storing_request_number_for_the_machine(self) -> str:
        """Сохранение номера запроса на машину"""
        num_req = self.find_element(
            RegisterOfApplicationsForPackagingLocators.LOCATOR_REQUEST_NUMBER_FOR_THE_MACHINE).text
        return num_req

    def store_carrier_information(self) -> str:
        """Сохранение информации о перевозчике"""
        info = self.find_element(RegisterOfApplicationsForPackagingLocators.LOCATOR_CARRIER_INFORMATION).text
        return info

    def checking_the_display_of_the_transport_company(self, carrier_information: str, transport_company: str):
        """Проверка отображения тарнспортной компании
        carrier_information - информация о перевозчике
        transport_company - транспортная компания
        """
        assert transport_company in carrier_information, \
            f'Транспортная компания - ({transport_company}) не отображается в информации о перевозчике - ' \
            f'\({carrier_information})'

    def driver_display_check(self, carrier_information: str, driver_name: str):
        """Проверка отображения имени водителя в информации о перевозчике
        carrier_information - информация о перевозчике
        driver_name - имя водителя
        """
        assert driver_name in carrier_information, \
            f'Имя водителя - ({driver_name}) не отображается в информации о перевозчике - ({carrier_information})'

    def checking_the_display_of_the_type_tonnage_of_the_machine(self, type_tonnage_machine: str):
        """Проерка отображения типа тоннажа машины
        type_tonnage_machine - выбранный тоннаж машины
        """
        tonnage_machine_on_the_page = self.find_element(
            RegisterOfApplicationsForPackagingLocators.LOCATOR_MACHINE_TONNAGE).text.strip()

        assert tonnage_machine_on_the_page == type_tonnage_machine, \
            f'Тоннаж машины на странице - ({tonnage_machine_on_the_page}) ' \
            f'не соответствует выбранному тоннажу - ({type_tonnage_machine})'

    def switch_to_frame_frame_23_226(self):
        """Переключение во фрэйм frame_23_226"""
        self.switch_to_frame(RegisterOfApplicationsForPackagingLocators.LOCATOR_IFRAME_FRAME_23_226)

    def checking_the_value_of_the_cargo(self, price_order: int):
        """Проверка стоимости груза
        price_order - Стоимость заказа
        """
        cargo_cost = self.find_element(RegisterOfApplicationsForPackagingLocators.LOCATOR_CARGO_COST).text
        cargo_cost = float(cargo_cost.split(' ')[0].replace(',', '.'))
        cargo_cost = int(cargo_cost)
        assert cargo_cost == price_order, \
            f'Стоимость груза - ({cargo_cost}) не равна стоимости ДКП в crm - ({price_order})'

    def download_document_tn(self, num_request_for_the_machine: str):
        """Скачивание документа тн
        num_request_for_the_machine - номер заявки на машину
        """
        name_file = 'tn_2022_' + num_request_for_the_machine
        downloads_path = str(Path.home() / "Downloads")
        print(downloads_path, 'downloads_path')

        btn_download_tn = self.find_element(RegisterOfApplicationsForPackagingLocators.LOCATOR_BUTTON_DOWNLOAD_TN)
        self.click_js(btn_download_tn)
        time.sleep(5)
        end_time = 60
        pause = 10

        while end_time != 0:
            last_doc = self.search_for_the_last_downloaded_file_in_a_folder(downloads_path)
            print(last_doc, 'Последний скачанный документ')
            if name_file in last_doc:
                end_time = 0
                last_doc_list = last_doc.split('_')
                last_doc = f'{last_doc_list[0]}_{last_doc_list[1]}_{last_doc_list[2]}'
                assert name_file == last_doc, \
                    f'Имя искомого файла TN - ({name_file}) не равно последнему скачанному документу - ({last_doc}) ' \
                    f'или файл не найден в каталоге - ({downloads_path})'
                return end_time

            end_time -= pause
            time.sleep(pause)
            print(end_time, 'end_time')
            assert end_time != 0, f'Файл - ({name_file}) не найден'

    def download_document_ttn(self, num_request_for_the_machine: str):
        """Скачивание документа ТТН
        num_request_for_the_machine - номер заявки на машину
        """
        name_file = 'Waybill_' + num_request_for_the_machine
        downloads_path = str(Path.home() / "Downloads")
        print(downloads_path, 'downloads_path')

        btn_download_ttn = self.find_element(RegisterOfApplicationsForPackagingLocators.LOCATOR_BUTTON_DOWNLOAD_TTN)
        self.click_js(btn_download_ttn)
        time.sleep(5)
        end_time = 60
        pause = 10

        while end_time != 0:
            last_doc = self.search_for_the_last_downloaded_file_in_a_folder(downloads_path)
            print(last_doc, 'Последний скачанный документ')
            if name_file in last_doc:
                end_time = 0
                last_doc_list = last_doc.split('_')
                last_doc = f'{last_doc_list[0]}_{last_doc_list[1]}'
                assert name_file == last_doc, \
                    f'Имя искомого файла TN - ({name_file}) не равно последнему скачанному документу - ({last_doc}) ' \
                    f'или файл не найден в каталоге - ({downloads_path})'
                return end_time

            end_time -= pause
            time.sleep(pause)
            print(end_time, 'end_time')
            assert end_time != 0, f'Файл - ({name_file}) не найден'

    def download_document_up_list(self, num_request_for_the_machine: str):
        """Скачивание документа Упрощенный лист
        num_request_for_the_machine - номер заявки на машину
        """
        name_file = 'packingList' + num_request_for_the_machine
        downloads_path = str(Path.home() / "Downloads")
        print(downloads_path, 'downloads_path')

        btn_download_up_list = self.find_element(RegisterOfApplicationsForPackagingLocators.LOCATOR_BUTTON_UP_LIST)
        self.click_js(btn_download_up_list)
        time.sleep(5)

        end_time = 60
        pause = 10

        while end_time != 0:
            last_doc = self.search_for_the_last_downloaded_file_in_a_folder(downloads_path)
            print(last_doc, 'Последний скачанный документ')
            if name_file in last_doc:
                end_time = 0
                last_doc_list = last_doc.split('_')
                last_doc = f'{last_doc_list[0]}'
                assert name_file == last_doc, \
                    f'Имя искомого файла TN - ({name_file}) не равно последнему скачанному документу - ({last_doc}) ' \
                    f'или файл не найден в каталоге - ({downloads_path})'
                return end_time

            end_time -= pause
            time.sleep(pause)
            print(end_time, 'end_time')
            assert end_time != 0, f'Файл - ({name_file}) не найден'

    def click_button_car_arrived(self):
        """Клик по кнопке Машина прибыла"""
        application_status_car_arrived = 'Машина прибыла'

        btn_car_arrived = self.find_element(RegisterOfApplicationsForPackagingLocators.LOCATOR_BUTTON_CAR_ARRIVED)
        self.click_js(btn_car_arrived)
        self.waiting_element_is_visibility_on_the_page(
            RegisterOfApplicationsForPackagingLocators.LOCATOR_BUTTON_SEND_FOR_LOADING)
        status_application_on_the_page = self.find_element(
            RegisterOfApplicationsForPackagingLocators.LOCATOR_APPLICATION_STATUS).text
        assert status_application_on_the_page == application_status_car_arrived, \
            f'Статус заявки на странице после прибытия машины - ({status_application_on_the_page}) не равен ' \
            f'ожидаемому статусу - ({application_status_car_arrived})'

    def click_button_send_for_loading(self):
        """Клик по кнопке Отправить на погрузку"""
        application_status_machine_loading = 'Машина на погрузке'
        button_send_for_loading = self.find_element(
            RegisterOfApplicationsForPackagingLocators.LOCATOR_BUTTON_SEND_FOR_LOADING)
        self.click_js(button_send_for_loading)
        status_application_on_the_page = self.find_element(
            RegisterOfApplicationsForPackagingLocators.LOCATOR_APPLICATION_STATUS).text
        assert status_application_on_the_page == application_status_machine_loading, \
            f'Статус заявки на странице - ({status_application_on_the_page}) не равен ожидаемому статусу - ' \
            f'({status_application_on_the_page})'

    def download_document_printing(self, num_request_for_the_machine: str):
        """Скачивание документа Печать
        num_request_for_the_machine - номер заявки на машину
        """
        name_file = 'Transport_ticket_' + num_request_for_the_machine

        button_printing = self.find_element(RegisterOfApplicationsForPackagingLocators.LOCATOR_BUTTON_PRINT)
        self.click_js(button_printing)
        downloads_path = str(Path.home() / "Downloads")
        print(downloads_path, 'downloads_path')

        time.sleep(5)

        end_time = 60
        pause = 10

        while end_time != 0:
            last_doc = self.search_for_the_last_downloaded_file_in_a_folder(downloads_path)
            print(last_doc, 'Последний скачанный документ')
            if name_file in last_doc:
                end_time = 0
                last_doc_list = last_doc.split('_')
                last_doc = f'{last_doc_list[0]}_{last_doc_list[1]}_{last_doc_list[2]}'
                assert name_file == last_doc, \
                    f'Имя искомого файла TN - ({name_file}) не равно последнему скачанному документу - ({last_doc}) ' \
                    f'или файл не найден в каталоге - ({downloads_path})'
                return end_time

            end_time -= pause
            time.sleep(pause)
            print(end_time, 'end_time')
            assert end_time != 0, f'Файл - ({name_file}) не найден'








