import time

from base_page.base_page import BasePage
from tms_pages.customer_service_pages.request_page.request_page_locators import RequestPageLocators
from selenium.webdriver.support.ui import Select


class RequestPage(BasePage):
    """Страница запроса"""

    def switch_to_frame_ticket(self):
        """Переключение во фрэйм Тикета"""
        self.switch_to_frame(RequestPageLocators.LOCATOR_FRAME_TICKET)
        self.waiting_element_is_visibility_on_the_page(RequestPageLocators.LOCATOR_HEADER_NUMBER)

    def store_of_number_request(self):
        """Сохранение номера запроса"""
        num_request = self.find_element(RequestPageLocators.LOCATOR_NUMBER_REQUEST).text
        return num_request

    def department_code_selection(self, department_code: str):
        """Выбор кода отдела. department_code- код отдела"""
        select_code_department = self.find_element(RequestPageLocators.LOCATOR_SELECT_DEPARTMENT_CODE)
        select = Select(select_code_department)
        select.select_by_visible_text(department_code)

    def checking_the_selection_of_the_check_box_delivery(self):
        """Проверка выбора чек-бокса Доставка"""
        check_box_delivery = self.find_element(RequestPageLocators.LOCATOR_CHECKBOX_DELIVERY)
        is_selected = check_box_delivery.is_selected()
        assert is_selected == True, \
            f'Чек-бокс Доставка не выбран - {is_selected}'

    def switch_to_frame_delivery(self):
        """Переключение во фрэйм Доставка"""
        self.switch_to_frame(RequestPageLocators.LOCATOR_FRAME_DELIVERY)

    def select_a_delivery_address_through_the_check_box(self):
        """Выбор адреса доставки через чек-бокс"""
        checkbox_address_list = self.driver.find_elements(
            *RequestPageLocators.LOCATOR_CHECKBOX_FOR_SELECTING_DELIVERY_ADDRESS)
        checkbox_address = checkbox_address_list[0]
        self.driver.execute_script("arguments[0].click()", checkbox_address)
        is_selected = checkbox_address.is_selected()
        assert is_selected == True, \
            f'Чек-бокс адреса доставки не выбран - {is_selected}'

    def recipient_selection(self):
        """Выбор получателя"""
        checkbox_recipient = self.find_element(RequestPageLocators.LOCATOR_CHECKBOX_RECIPIENT)
        self.driver.execute_script("arguments[0].click()", checkbox_recipient)
        is_selected = checkbox_recipient.is_selected()
        assert is_selected == True, \
            f'Чек-бокс Получатель не выбран - {is_selected}'

    def switch_to_frame_info_transportation_task(self):
        """Переключение во фрэйм Информация о задании на переовзку"""
        self.driver.switch_to.default_content()
        self.switch_to_frame_ticket()
        self.switch_to_frame(RequestPageLocators.LOCATOR_FRAME_INFO_TRANSPORTATION_TASK)

    def checking_the_selected_account(self, true_num_order):
        """Проверка выбранного счета, true_num_order-номер нужного счета"""
        num_order_on_the_page = self.find_element(RequestPageLocators.LOCATOR_TD_ORDER_NUMBER)
        num_order_on_the_page_text = num_order_on_the_page.get_attribute('textContent')
        assert num_order_on_the_page_text == true_num_order, \
            f'Номер заказа на странице ({num_order_on_the_page_text}) не равен искомому заказу ({true_num_order})'

    def choice_at_whose_expense_delivery_one_hundred_include_in_order(self):
        """Выбор за чей счет доставка - за счет покупателя 100% включено в заказ"""
        select_at_whose_expense_is_the_delivery = self.find_element(
            RequestPageLocators.LOCATOR_SELECT_AT_WHOSE_EXPENSE_IS_THE_DELIVERY)
        select = Select(select_at_whose_expense_is_the_delivery)
        delivery_item = 'Покупатель 100%. Включено в заказ'
        select.select_by_visible_text(delivery_item)

    def click_button_send_an_application(self):
        """Клик по кнопке Отправить заявку"""
        button_send_an_application = self.find_element(RequestPageLocators.LOCATOR_BUTTON_SEND_SEND_AN_APPLICATION)
        button_send_an_application.click()
