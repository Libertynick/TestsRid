import time

import pytest

from base_page.base_page_locators import BaseOpenLocators
from open_pages.cart_page.cart_page import CartPage
from open_pages.product_page.product_page import ProductPage
import requests
from _datetime import datetime
from config import ProdEnvironment
import os
import traceback
from datetime import datetime as dt


def write_log_in_file_result(path_result: str, text_log: str):
    """Запись логов в конец файла с результатами. path_result - путь файла с результатами. text_log - текст лога"""
    with open(path_result, 'a') as file:
        file.write(text_log)


def converting_a_file_with_codes_into_a_list(path_to_file: str) -> list:
    """Преобразование файла с кодами в список"""

    with open(path_to_file, "r") as f:
        codes_list = [line.strip().upper() for line in f if not line.isspace()]
        return codes_list


def receiving_current_time() -> str:
    """Получение текущего времени"""
    cur_time = datetime.now().strftime("%Y_%b_%d_%H-%M-%S-GMT")
    return str(cur_time)


@pytest.mark.monitoring
def comparison_of_prices_in_catalog_and_in_basket(browser):
    """Сравнение прайс-листа в каталоге одного товара с прайс-листом в корзине"""
    start_time = dt.now()

    path_to_codes_file = "tests/comparison_of_prices_in_catalog_and_in_basket/codes_list.txt"  # путь к файлу с кодами для теста
    current_time_from_name_file = receiving_current_time()
    name_file = 'result_test_price_comparison_' + str(current_time_from_name_file) + '.txt'
    result_file = 'results/result_test_comparison_of_prices_in_catalog_and_in_basket/' + name_file
    count_articles_for_basket = 100  # Количество артикулов для добавления в корзину
    link = ProdEnvironment.LINK_CART_OPEN_PROD
    link_product = f'{ProdEnvironment.OPEN_URL}/product/'
    price_codes_dict = {}

    codes_list = converting_a_file_with_codes_into_a_list(path_to_codes_file)

    page = CartPage(browser, link)
    page.open()
    time.sleep(2)
    page.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT, sec=90)

    for code in range(0, len(codes_list), count_articles_for_basket):
        try:

            codes_list_for_basket = codes_list[code:code + count_articles_for_basket]
            codes_list_for_basket = [el + ' ' for el in codes_list_for_basket]
            print(codes_list_for_basket)

            page.type_product_in_input(codes_list_for_basket)
            page.click_add_button()
            time.sleep(1)

            # Если есть информационная модалка
            text_modal_info = page.save_text_from_info_modal_and_close()
            if len(text_modal_info) != 0:
                print(text_modal_info)
                browser.refresh()
                time.sleep(1)
                page.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)
                continue

            for code_basket in codes_list_for_basket:
                code_basket = code_basket.strip()
                print(code_basket, '-- Артикул')
                # Доступность для продажи
                availability_for_sale = page.checking_the_blocking_of_material_for_sales(
                    code_basket)
                if len(availability_for_sale) != 0:
                    current_time = receiving_current_time()
                    text_log = f'{current_time}\tКорзина.{code_basket} - {availability_for_sale}\n'
                    write_log_in_file_result(result_file, text_log)
                    print(availability_for_sale, f'{code_basket}')
                    continue

                # Автозамена кода
                autocorrect = page.check_if_there_is_code_autocorrect(code_basket)
                if len(autocorrect) > 0:
                    current_time = receiving_current_time()
                    text_log = f'{current_time}\tКорзина. Код {code_basket} был заменен на {autocorrect[1]} \n'
                    print(text_log)
                    write_log_in_file_result(result_file, text_log)
                    continue

                price_product_in_basket = page.save_price_list_by_article(code_basket)
                print(price_product_in_basket, code_basket, 'цена в корзине')
                price_codes_dict[code_basket] = price_product_in_basket
            page.click_empty_trash()

        except Exception:
            current_time = receiving_current_time()
            text_log = f'{current_time}\tЧто-то пошло не так:\n{traceback.format_exc()}\n'
            print(text_log)
            write_log_in_file_result(result_file, text_log)
        # print(price_codes_dict)

    for code_in_basket, price_in_basket in price_codes_dict.items():
        try:
            current_time = receiving_current_time()
            link = link_product + code_in_basket
            page = ProductPage(browser, link)

            # Проверка на ответ 404
            r = requests.get(link)
            status_code_open_link = r.status_code
            if status_code_open_link != 200:
                print(current_time + '\t', status_code_open_link, code_in_basket, 'Код не найден в каталоге')
                continue

            page.open()
            archived_item = page.check_that_the_item_is_not_archived()

            # Проверка на архивность товара
            if archived_item == True:
                text_log = f'{current_time}\tАртикул {code_in_basket} архивный. Ссылка {link}\n'
                print(text_log)
                write_log_in_file_result(result_file, text_log)
                continue

            page.should_be_article_in_page(code_in_basket)
            price_list_product_with_catalog = page.store_price_product()

            if price_list_product_with_catalog == price_in_basket:
                continue
            else:
                # Проверка, что стоимость состоит из цифр
                price_product_in_basket_no_space = price_in_basket.replace('.', '')
                price_product_in_basket_no_space = ''.join(price_product_in_basket_no_space.split())
                res_isdigit_price_basket = price_product_in_basket_no_space.isdigit()
                if res_isdigit_price_basket == True:
                    text_log = f'{current_time}\tЦена в каталоге кода {code_in_basket}: {price_list_product_with_catalog} ' \
                               f'не равна цене в корзине {code_in_basket}: {price_in_basket}. Ссылка: {link}\n'
                    write_log_in_file_result(result_file, text_log)
                    print(text_log)
                elif res_isdigit_price_basket == False:
                    text_log = f'{current_time}\t{code_in_basket} в корзине: {price_in_basket}. Ссылка на каталог: {link}\n'
                    write_log_in_file_result(result_file, text_log)
                    print(text_log)

        except Exception:
            current_time = receiving_current_time()
            text_log = f'{current_time}\tЧто-то пошло не так:\n{traceback.format_exc()}\n'
            print(text_log)
            # write_log_in_file_result(result_file, text_log)

    exist_file = os.path.isfile(result_file)

    end_time = datetime.now()
    print(f'Duration: {end_time - start_time}')

    if exist_file == True:
        with open(result_file, "r") as file:
            file_list = [line for line in file if not line.isspace()]

        assert len(file_list) == 0, 'Файл с результатами теста не пустой!'
