import allure
import pytest

from config import TestEnvironment
from crm_pages.pq_page.pq_page import PqPage
from crm_pages.search_pq_page.search_pq_page import SearchPq
from open_pages.cart_page.cart_page import CartPage
from open_pages.header.header_page import Header
from open_pages.main_page.main_page import MainPage
from open_pages.order_details_page.order_details_page import OrderDetails
from open_pages.standart_order_page.standart_order_page import StandardOrderPage

ADDRESS_PICKUP_PTO = 'Нижегородская обл., Дзержинск, ул. Учебная, д 1А'
# terms_of_payment = 'Предоплата 50%, 14 дней кредит'
delivery_address = 'г Иваново, ул Кузнецова, д 123'


@allure.feature('Создание заказа из корзины')
@allure.story('Доставка на указанный адрес. ПТО. Кредит')
@pytest.mark.xdist_group(name="open")
@pytest.mark.parametrize('article', ['w488900 3'])
@pytest.mark.parametrize('terms_of_payment', [
    'Предоплата 50%, 60 дней кредит',
    'Кредит 3 дня'
])
@pytest.mark.stage
@pytest.mark.autostart
def test_26455_creation_kp_pto_credit_delivery(browser, article, terms_of_payment, auth_crm_extru_start):
    """Создание КП ПТО кредит доставка на адрес"""
    # Действия на Главной странице
    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.open()
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_VODOKOMFORT, TestEnvironment.PASSWORD_TST_VODOKOMFORT)

    # Переход в Корзину
    page = Header(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_basket()

    # Действия в корзине
    page = CartPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.choice_of_client_number()
    page.click_empty_trash()
    page.type_product_in_input(article)
    page.click_add_button()
    price_cart = page.store_price()
    print(price_cart, 'price_cart---')
    # time.sleep(5)
    page.click_continue_button()

    # Действия на странице Подтверждение
    page = StandardOrderPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.should_h1_standard_order()
    # page.click_new_project()
    # page.click_standard_order()
    price_confirmation = page.store_price_confirmation()
    # print(price_confirmation, 'price_confirmation---')
    page.choice_of_payment_terms(terms_of_payment)
    page.choice_of_delivery_to_address_method_pickup_pto()
    page.choice_address_pto(delivery_address)
    page.button_cost_delivery()
    cost_delivery = page.save_cost_delivery_pto()
    # print(f'Стоимость доставки с НДС', cost_delivery)
    price_confirmation_credit = page.store_price_confirmation()
    # print(price_confirmation_credit, 'Стоимость после выбора кредита')

    with allure.step('Проверка, что сумма после выбора кредита пересчиталась в большую сторону или не изменилась'):
        assert price_confirmation_credit - price_confirmation >= 0, \
            f'Сумма после выбора кредита - ({price_confirmation_credit}) стала меньше суммы до выбора кредита - ' \
            f'({price_confirmation})'

    allowances_confirmation_page = page.save_allowances()
    # print(allowances_confirmation_page, 'Надбавки на странице Подтверждение')
    comment = 'Автотесты!!!\ntest_selenium_web_ui'
    page.type_comment(comment)

    page.click_confirmation_button()

    # Страница с созданными заказами
    page.click_num_pq_on_order_placed_page()

    # Страница детали заказа
    page = OrderDetails(browser, TestEnvironment.LINK_OPEN_TST)
    allowances_order_details_page = page.saving_surcharges_in_the_order()
    # print(allowances_order_details_page, 'Надбавки на странице Детали заказа')

    with allure.step('Проверка соответствия надбавок на странице Детали заказа и на странице Подтверждение '
                     'до создания счета'):
        for allowance in allowances_order_details_page:
            assert allowance == allowances_confirmation_page[0], \
                f'Надбавки на странице Детали заказа - ({allowances_order_details_page}) не соответствуют надбавкам на ' \
                f'странице Подтверждение - ({allowances_confirmation_page})'

    page.waiting_for_account_creation()
    allowances_order_details_page = page.saving_surcharges_in_the_order()
    # print(allowances_order_details_page, 'Надбавки на странице Детали заказа После создания счета')

    with allure.step('Проверка соответствия надбавок на странице Детали заказа и на странице Подтверждение '
                     'после создания счета'):
        for allowance in allowances_order_details_page:
            assert allowance == allowances_confirmation_page[0], \
                f'Надбавки на странице Детали заказа - ({allowances_order_details_page}) не соответствуют надбавкам на ' \
                f'странице Подтверждение - ({allowances_confirmation_page})'

    page.data_display_check()
    price_order = float(page.store_price_order())
    delivery_cost = page.store_delivery_cost()
    # print(delivery_cost, 'Стоимость доставки')
    num_order = page.store_num_order()
    print(f'{num_order} - номер заказа')
    # print(price_order, f'Стоимость заказа {num_order} в деталях заказа в Опене')
    page.checking_printing_forms_download(num_order)

    with allure.step(f'Проверка равенства стоимости на странице Детали заказа {num_order}  '
                     f'со стоимостью на странице Подтверждение'):
        assert (price_order - delivery_cost) - price_confirmation_credit < 2, \
            f'Стоимость на странице Детали заказа - ({price_order}) не равна стоимости на странице Подтверждение  ' \
            f'после выбора кредита - ({price_confirmation_credit})'

    # Переход в crm для сверки информации в заказа
    auth_crm_extru_start(ruco=TestEnvironment.LOGIN_CRM)
    page = SearchPq(browser, TestEnvironment.LINK_SEARCH_PQ_TST)
    page.open()
    page.search_order(num_order)
    page.go_to_order(num_order)

    page = PqPage(browser, TestEnvironment.LINK_CRM_TST)
    price_order_crm = float(page.store_price_crm_order())
    # print(price_order_crm, f'Стоимость заказа в ДКП crm {num_order}')
    page.verify_price_crm_with_price_open(price_order_crm, price_order)

    allowance_order_crm = page.saving_surcharges_on_all_article_lines()
    # print(f"Надбавка в заказе crm равна", allowance_order_crm)

    with allure.step(f'Проверка соответствия надбавок на странице Детали заказа в Опене с надбавками '
                     f'на странице заказа в CRM {num_order}'):
        assert allowance_order_crm == allowances_order_details_page, \
            f'Надбавки на странице заказа в crm - ({allowance_order_crm}) не равны надбавкам на странице Детали заказа - ' \
            f'({allowances_order_details_page})'
    # Сравнение условий кредитования
    terms_of_payment_in_crm_order = page.save_terms_of_payment()
    # print(terms_of_payment_in_crm_order, 'Условия оплаты в заказе crm')

    with allure.step(f'Проверка соответствия условий оплаты на странице заказа {num_order} '
                     f'в CRM с выбранными при заказе в Опене'):
        assert terms_of_payment_in_crm_order == terms_of_payment, \
            f'Условия оплаты в заказе crm - ({terms_of_payment_in_crm_order}) не соответствуют изначальным условиям ' \
            f'оплаты при заказе - ({terms_of_payment})'

    # Сравнение стоимости доставки
    transportation_cost = page.saving_delivery_costs_in_rubles()
    page.verify_transportation_cost_crm_open(cost_delivery, transportation_cost)
