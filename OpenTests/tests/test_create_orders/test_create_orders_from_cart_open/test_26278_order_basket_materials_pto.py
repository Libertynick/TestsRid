import allure
import pytest

from base_page.base_page import BasePageCrm
from config import TestEnvironment
from crm_pages.pq_page.pq_page import PqPage
from crm_pages.search_pq_page.search_pq_page import SearchPq
from open_pages.cart_page.cart_page import CartPage
from open_pages.header.header_page import Header
from open_pages.main_page.main_page import MainPage
from open_pages.order_details_page.order_details_page import OrderDetails, ModalWindowCancelOrder
from open_pages.standart_order_page.standart_order_page import StandardOrderPage

ARTICLE = ['065B8307R 10 w488900 1']
ADDRESS_PICKUP = 'Московская обл., Истра, деревня Лешково, д 217'
ADDRESS_PICKUP_PTO = 'Нижегородская обл., Дзержинск, ул. Учебная, д 1А'  # адрес ПТО


@allure.feature('Создание заказа из корзины')
@allure.story('Самовывоз. Материалы + ПТО. Стандартный заказ Предоплата')
@pytest.mark.xdist_group(name="open")
@pytest.mark.parametrize('article', ['065B8307R 10 w488900 2'])
@pytest.mark.stage
@pytest.mark.autostart
def test_26278_creation_kp_material_pto(browser, article, auth_crm_extru_start):
    """Создание КП материалы + ПТО самовывоз"""
    # Действия на Главной странице
    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.open()
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_VODOKOMFORT, TestEnvironment.PASSWORD_TST_VODOKOMFORT)

    # Переход в Корзину
    page = Header(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_basket()

    # Действия в корзине
    page = CartPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_empty_trash()
    page.choice_of_client_number()

    page.type_product_in_input(article)
    page.click_add_button()
    price_cart = page.store_price()
    page.click_continue_button()

    # Действия на странице Подтверждение
    page = StandardOrderPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.should_h1_standard_order()
    page.click_new_project()
    page.click_standard_order()
    price_confirmation = page.store_price_material_pto()
    # print(price_confirmation, 'price_confirmation---')
    page.should_be_equal_prices(price_cart, price_confirmation)
    page.choice_of_payment_terms_prepayment()
    comment = 'Автотесты!!!\ntest_selenium_web_ui'
    page.type_comment(comment)
    page.choice_of_delivery_method_pickup()
    page.should_be_the_default_address(ADDRESS_PICKUP)
    page.choice_of_delivery_method_pickup_pto()
    page.should_be_the_default_address_pto(ADDRESS_PICKUP_PTO)
    page.click_confirmation_button()

    # Страница с созданными заказами
    page = StandardOrderPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.go_to_created_order(1)

    # Страница детали первого заказа
    page = OrderDetails(browser, TestEnvironment.LINK_OPEN_TST)
    page.waiting_for_account_creation()
    page.payment_condition_must_be_advance_payment()
    page.data_display_check()
    price_order_1 = float(page.store_price_order())
    num_order_1 = page.store_num_order()
    print(f'{num_order_1} - заказ 1')
    # print(price_order_1, f'Стоимость заказа {num_order_1} в деталях заказа в Опене')
    page.checking_printing_forms_download(num_order_1)

    # Возвращение на страницу с созданными заказами
    page = ModalWindowCancelOrder(browser, TestEnvironment.LINK_OPEN_TST)
    page.back_page()

    # Страница с созданными заказами
    page = StandardOrderPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.go_to_created_order(2)

    # Страница детали второго заказа
    page = OrderDetails(browser, TestEnvironment.LINK_OPEN_TST)
    page.waiting_for_account_creation()
    page.payment_condition_must_be_advance_payment()
    page.data_display_check()
    price_order_2 = float(page.store_price_order())
    num_order_2 = page.store_num_order()
    print(f'{num_order_2} - Заказ 2')
    # print(price_order_2, f'Стоимость заказа {num_order_2} в деталях заказа в Опене')
    page.checking_printing_forms_download(num_order_2)

    summ_orders = price_order_2 + price_order_1
    # print(summ_orders, f'Стоимость обоих заказов')

    # Сравнение сумм заказов на странице Подтверждения с общей суммой в корзине
    with allure.step('Проверка равенства стоимости в корзине и стоимости сумм двух заказов (материалы, пто)'):
        assert abs(summ_orders - price_confirmation) < 0.5

    # Переход в crm для сверки стоимости первого заказа
    auth_crm_extru_start(ruco=TestEnvironment.LOGIN_CRM)

    page = SearchPq(browser, TestEnvironment.LINK_SEARCH_PQ_TST)
    page.open()
    page.search_order(num_order_1)
    page.go_to_order(num_order_1)

    page = PqPage(browser, TestEnvironment.LINK_CRM_TST)
    page.payment_condition_must_be_advance_payment()
    price_order_crm_1 = float(page.store_price_crm_order())
    # print(price_order_crm_1, f'Стоимость заказа в ДКП crm {num_order_1}')
    page.verify_price_crm_with_price_open(price_order_crm_1, price_order_1)

    # Поиск второго заказа
    page = BasePageCrm(browser, TestEnvironment.LINK_SEARCH_PQ_TST)
    page.open()
    page = SearchPq(browser, TestEnvironment.LINK_SEARCH_PQ_TST)
    page.search_order(num_order_2)
    page.go_to_order(num_order_2)

    page = PqPage(browser, TestEnvironment.LINK_CRM_TST)
    page.payment_condition_must_be_advance_payment()
    price_order_crm_2 = float(page.store_price_crm_order())
    # print(price_order_crm_2, f'Стоимость заказа в ДКП crm {num_order_2}')
    page.verify_price_crm_with_price_open(price_order_crm_2, price_order_2)
