import allure
import pytest

from base_page.raise_exceptions import MyException
from config import TestEnvironment
from crm_pages.pq_page.pq_page import PqPage
from crm_pages.search_pq_page.search_pq_page import SearchPq
from open_pages.cart_page.cart_page import CartPage
from open_pages.header.header_page import Header, UlMenuOrdersPage
from open_pages.main_page.main_page import MainPage
from open_pages.order_details_page.order_details_page import OrderDetails
from open_pages.order_list_page.order_list_page import OrderList
from open_pages.standart_order_page.standart_order_page import StandardOrderPage


@allure.feature('Создание заказа из корзины')
@allure.story('Разбиение заказа на 4 части по одному КП в зависимости от склада и производства')
@pytest.mark.xdist_group(name="open")
@pytest.mark.parametrize('article', [
    '004B3459R 065N9506GR 082H0222R 089N3104 089N4850 TDU1008144 w488900 Q0404240004-1 003L0144 '])
@pytest.mark.stage
def test_49630_splitting_order_into_4_parts_according_to_one_cp(browser, article, auth_crm_extru_start):
    """
    https://rucotfs.ridancorp.net/DanfossDev/CRM/_workitems/edit/49630
    Разбиение заказа на 4 части по одному КП в зависимости от склада и производства
    """
    login_open = TestEnvironment.LOGIN_TST_VODOKOMFORT
    password_open = TestEnvironment.PASSWORD_TST_VODOKOMFORT
    link_open = TestEnvironment.LINK_OPEN_TST

    login_crm = TestEnvironment.LOGIN_CRM

    link_search_pq_in_crm = TestEnvironment.LINK_SEARCH_PQ_TST

    article_list = article.strip().split(' ')
    delivery_address = 'г Санкт-Петербург, ул Ланская'
    delivery_method = 'Доставка на указанный адрес'
    expected_count_section_by_code = 4  # Ожидаемое количество разделов по кодам. Количество заказов
    dict_article_by_section_confirmation_page = {}  # Артикулы по секциям в разделе Оборудование в корзине (страница Подтверждение)
    dict_total_price_by_section_confirmation_page = {}  # Общая стоимость по секциям в разделе Оборудование в корзине (страница Подтверждение)
    dict_total_wight_by_section_confirmation_page = {}  # Общий вес по секциям в разделе Оборудование в корзине (страница Подтверждение)

    page_main = MainPage(browser, link_open)
    page_header = Header(browser, link_open)
    page_cart = CartPage(browser, link_open)
    page_confirmation = StandardOrderPage(browser, link_open)
    page_ul_menu_orders = UlMenuOrdersPage(browser, link_open)
    page_orders_search_open = OrderList(browser, link_open)
    page_order_details_open = OrderDetails(browser, link_open)

    page_search_pq_crm = SearchPq(browser, link_search_pq_in_crm)
    page_pq_in_crm = PqPage(browser, link_search_pq_in_crm)

    page_main.open()
    page_main.authorization_from_main_page(login_open, password_open)

    page_header.click_basket()

    # Корзина
    page_cart.click_empty_trash()
    page_cart.choice_of_client_number()
    page_cart.type_product_in_input(article)
    page_cart.click_add_button()
    page_cart.checking_adding_items_to_cart(article_list)
    page_cart.click_continue_button()

    # Страница Подтверждение
    page_confirmation.should_h1_standard_order()
    page_confirmation.choice_of_payment_terms_prepayment()
    comment = 'ТЕСТИРОВАНИЕ!!!\ntest_selenium_web_ui'
    page_confirmation.type_comment(comment)
    page_confirmation.choice_of_delivery_method_to_specified_address()
    page_confirmation.choice_address_type_delivery_moscow(delivery_address)
    cost_delivery_in_chapter_delivery_address = page_confirmation.save_cost_delivery_moscow_type_delivery()
    print(f'{cost_delivery_in_chapter_delivery_address} - стоимость доставки в разделе Адрес доставки')
    page_confirmation.check_that_door_to_door_is_selected_in_delivery_address()
    page_confirmation.check_include_shipping_in_order_price_check_box_not_selected_chapter_delivery_address()
    page_confirmation.choice_of_delivery_to_address_method_pickup_pto()
    page_confirmation.choice_address_pto(delivery_address)
    cost_delivery_in_chapter_dzerzhinsk = page_confirmation.save_cost_delivery_pto()
    print(f'{cost_delivery_in_chapter_dzerzhinsk} - стоимость доставки в разделе Адрес доставки Дзержинск')
    page_confirmation.check_that_door_to_door_is_selected_in_delivery_address_dzerzhinsk()
    page_confirmation.deactivate_check_box_include_shipping_in_order_price_dzerzhinsk()

    count_section_by_code = page_confirmation.saving_number_of_sections_by_codes()
    print(f'{count_section_by_code} количество разделов по кодам на странице Подтверждение')
    with allure.step('Проверяем количество разделов по кодам на странице Подтверждение'):
        assert count_section_by_code == expected_count_section_by_code, \
            (f'Количество разделов по кодам на странице Подтверждение - ({count_section_by_code}) не соответствует '
             f'ожидаемому - ({expected_count_section_by_code})')

    # Сохраняем артикулы по номеру секции в разделе Оборудование в корзине
    # Сохраняем общую стоимость по номеру секции в разделе Оборудование в корзине
    # Сохраняем общую массу по номеру секции в разделе Оборудование в корзине
    for count in range(1, expected_count_section_by_code + 1):
        dict_article_by_section_confirmation_page[count] = page_confirmation.save_article_in_section(count)
        dict_total_price_by_section_confirmation_page[count] = page_confirmation.save_total_price_by_section(count)
        dict_total_wight_by_section_confirmation_page[count] = page_confirmation.save_wight_by_section(count)
    print(dict_article_by_section_confirmation_page, 'Коды по секциям на странице Подтверждение')
    print(f'{dict_total_price_by_section_confirmation_page} Общая стоимость по секциям на странице Подтверждение')
    print(f'{dict_total_wight_by_section_confirmation_page} Общий вес по секциям на странице Подтверждение')

    page_confirmation.click_confirmation_button()
    num_dkp_list = page_confirmation.save_all_num_dkp()
    print(f'{num_dkp_list} Созданные ДКП')
    num_pq = num_dkp_list[0].split('-')[0]
    print(num_pq)
    window_open = browser.current_window_handle

    # Переход в срм
    browser.execute_script(f'window.open("{link_search_pq_in_crm}")')
    page_search_pq_crm.switching_window(-1)
    auth_crm_extru_start(ruco=login_crm)

    page_search_pq_crm.open()

    window_search_pq = browser.current_window_handle
    page_search_pq_crm.search_pq(num_pq, expected_count_pq=expected_count_section_by_code + 1)  # +1 само МКП
    page_search_pq_crm.check_visible_dkp(num_pq, num_dkp_list)
    page_search_pq_crm.go_to_pq_by_number_in_new_tab(num_pq)

    page_pq_in_crm.check_article_in_pq(article_list, num_pq)
    page_pq_in_crm.waiting_for_account_creation()
    page_pq_in_crm.delivery_conditions_must_be_delivery_to_the_specified_address()
    page_pq_in_crm.check_entered_address(delivery_address)
    page_pq_in_crm.check_the_delivery_paid()
    page_pq_in_crm.payment_condition_must_be_advance_payment()
    browser.close()

    #  Переходим в каждое ДКП со страницы поиска и делаем различные проверки
    dict_article_by_num_order_crm = {}  # Словарь Артикулы по номерам заказов
    for dkp in num_dkp_list:
        browser.switch_to.window(window_search_pq)
        page_search_pq_crm.go_to_pq_by_number_in_new_tab(dkp)

        page_pq_in_crm.delivery_conditions_must_be_delivery_to_the_specified_address()
        page_pq_in_crm.check_entered_address(delivery_address)
        page_pq_in_crm.check_the_delivery_paid()
        page_pq_in_crm.payment_condition_must_be_advance_payment()

        # Сохраняем номер заказа
        num_order = page_pq_in_crm.save_num_order_in_title_pq()
        # Сохраняем коды
        article_list_on_page = page_pq_in_crm.store_articles_product()

        # Сохраняем в словарь артикулы по номерам заказов
        dict_article_by_num_order_crm.update({num_order: article_list_on_page})

        # Проверяем, что коды в секциях на странице Подтверждение присутствуют в одном из ДКП
        for idx, el in enumerate(article_list_on_page):
            # Смотрим есть ли замена по расчету пто. Если есть, заменяем присвоенный номер расчета из 1с на код пто изначальный
            calculation_num_pto = page_pq_in_crm.store_article_pto_by_calculation_from_1c(el)
            # Смотрим есть ли замена по расчету насоса. Если есть, заменяем присвоенный номер расчета из 1с на код насоса изначальный
            calculation_num_pump = page_pq_in_crm.store_article_pump_by_calculation_from_1c(el)

            if calculation_num_pto != '':
                article_list_on_page[idx] = calculation_num_pto
            elif calculation_num_pump != '':
                article_list_on_page[idx] = calculation_num_pump

        res_check_found_article = any(article_list_on_page == article_expected for article_expected in
                                      dict_article_by_section_confirmation_page.values())

        # Заново сохраняем все коды на странице в том виде, в каком они есть, чтобы дальше сравнивать по заказам
        # Сохраняем коды
        article_list_on_page = page_pq_in_crm.store_articles_product()
        # Сохраняем в словарь артикулы по номерам заказов
        dict_article_by_num_order_crm.update({num_order: article_list_on_page})
        print(f'{dict_article_by_num_order_crm} Артикулы по номерам заказов')

        if res_check_found_article is False:
            raise MyException(f'На странице ДКП {dkp} не найдено ни одной пачки кодов со страницы Подтверждение. '
                              f'Ожидаемые коды по секциям - ({dict_article_by_section_confirmation_page}). '
                              f'Коды на странице - ({article_list_on_page})')

    # Переход в проектное условие (PQ в опене)
    browser.switch_to.window(window_open)

    page_ul_menu_orders.click_orders_tab()
    page_ul_menu_orders.go_to_orders()

    dict_article_by_num_order_open = {}  # словарь {'номер заказа в Опене': 'артикул'}
    err_dict = {}  # Сюда складываются те заказы, в которых нет ожидаемых кодов
    # Проходимся по каждому заказу и проверяем коды, условия поставки, оплаты
    for order, articles_order in dict_article_by_num_order_crm.items():

        page_orders_search_open.order_search_by_number_and_author(order)
        page_orders_search_open.go_to_order(order)
        page_order_details_open.payment_condition_must_be_advance_payment()
        page_order_details_open.check_delivery_method(delivery_method)
        page_order_details_open.check_address_delivery(delivery_address, order)

        # Сохраняем номер заказа в Опене. Создаем словарь {'номер заказа в Опене': 'артикул'}
        num_order_open = page_order_details_open.store_num_order()
        article_open_page = page_order_details_open.save_name_article_on_all_lines()
        dict_article_by_num_order_open[num_order_open] = article_open_page
        browser.back()

        if articles_order != dict_article_by_num_order_open[order]:
            err_dict.update({order: articles_order})

    if len(err_dict) != 0:
        raise MyException(f'Артикулы из заказа в срм не найдены в Опене в деталях заказа. '
                          f'Список артикулов по заказам, которые не найдены в Опене - {err_dict}')
