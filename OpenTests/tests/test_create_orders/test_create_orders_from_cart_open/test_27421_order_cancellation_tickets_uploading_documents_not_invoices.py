import allure
import pytest
from config import TestEnvironment
from open_pages.cart_page.cart_page import CartPage
from open_pages.header.header_page import Header
from open_pages.main_page.main_page import MainPage
from open_pages.order_details_page.order_details_page import OrderDetails
from open_pages.standart_order_page.standart_order_page import StandardOrderPage


@allure.feature('Тикеты')
@allure.story('Отмена заказа')
@pytest.mark.xdist_group(name="open")  # группа для параллельного запуска
@pytest.mark.parametrize('article', ['w488900 2'])
@pytest.mark.stage
def test_27421_order_cancellation_tickets_uploading_documents_not_invoices(browser, article):
    """Тикеты отмены заказа, Выгрузка документов (не счетов)"""
    link_open = TestEnvironment.LINK_OPEN_TST

    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.open()
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_VODOKOMFORT, TestEnvironment.PASSWORD_TST_VODOKOMFORT)
    comment = 'Автотесты!!!\ntest_selenium_web_ui'

    # Переход в Корзину
    page = Header(browser, link_open)
    page.click_basket()

    # Действия в корзине
    page = CartPage(browser, link_open)
    page.click_empty_trash()
    page.choice_of_client_number()
    page.type_product_in_input(article)
    page.click_add_button()
    price_cart = page.store_price()
    page.click_continue_button()

    # Действия на странице Подтверждение
    page = StandardOrderPage(browser, link_open)
    page.should_h1_standard_order()
    page.choice_of_payment_terms_prepayment()
    page.choice_of_delivery_method_pickup_pto()

    price_confirmation = page.store_price_confirmation()
    # print(price_confirmation, 'price_confirmation---')
    page.should_be_equal_prices(price_cart, price_confirmation)

    page.type_comment(comment)

    page.click_confirmation_button()

    # Страница с созданными заказами
    page.click_num_pq_on_order_placed_page()

    # Страница детали заказа
    page = OrderDetails(browser, link_open)
    page.waiting_for_account_creation()
    page.payment_condition_must_be_advance_payment()
    page.data_display_check()
    price_order = float(page.store_price_order())
    num_order = page.store_num_order()
    print(f'{num_order} - Номер заказа')

    name_articles_list = page.save_name_article_on_all_lines()
    for name_articles in name_articles_list:
        assert name_articles not in article, \
            f'Номер расчета - ({article}) не сменился на кодовый номер. Артикулы на странице - ({name_articles_list})'

    page.click_btn_copy_kp()

    page = CartPage(browser, link_open)
    article_on_basket = page.save_list_articles_in_cart()
    print(article_on_basket, 'article_on_basket')

    for article_cart in article_on_basket:
        assert article_cart in article, f'Наименование артикула в корзине не совпадает с ожидаемым - ({article}. ' \
                                        f'Артикулы на странице Корзина - ({article_on_basket}))'

    price__copy_cart = page.store_price()
    assert abs(price__copy_cart - price_order) < 1, \
        f'Стоимость в корзине - ({price__copy_cart}) после копирования заказа не соответствует стоимости заказа - ' \
        f'({price_order})'

    page.click_empty_trash()
