import time

import allure
import pytest

from base_page.base_page import BasePageCrm
from config import TestEnvironment
from crm_pages.header_page.header_page import Tools
from crm_pages.pq_page.pq_page import PqPage
from crm_pages.search_pq_page.search_pq_page import SearchPq
from open_pages.cart_page.cart_page import CartPage
from open_pages.design_condition_page.design_condition_page import DesignConditionPage
from open_pages.header.header_page import Header
from open_pages.main_page.main_page import MainPage
from open_pages.new_design_condition.new_design_condition_page import NewDesignCondition
from open_pages.standart_order_page.standart_order_page import StandardOrderPage


@allure.feature('Создание КП из корзины')
@allure.story('Самовывоз. Стандартный заказ - Предоплата. Материалы. Спец цена')
@pytest.mark.xdist_group(name="crm")
@pytest.mark.parametrize('article', ['003H6756 065B3051R 065B8311RG'])
@pytest.mark.stage
def test_48561_creating_commercial_offer_and_applying_discounts_on_special_prices(browser, article,
                                                                                  auth_crm_extru_start,
                                                                                  auth_extru_crm_from_authorized_page,
                                                                                  agreement_on_all_conditions_extru):
    """Создание КП и применение скидок на спец. цены"""
    link_tst_open = TestEnvironment.LINK_OPEN_TST
    login_tst_open = TestEnvironment.LOGIN_TST_VODOKOMFORT
    password_tst_open = TestEnvironment.PASSWORD_TST_VODOKOMFORT

    link_search_pq_in_crm = TestEnvironment.LINK_SEARCH_PQ_TST
    login_tst_crm = TestEnvironment.LOGIN_CRM

    expected_discounts_all_articles = 0.0
    dict_price_list_in_cart_open = {}  # Словарь прайс - лист из корзины Опена
    dict_price_list_in_confirmation_page = {}  # Словарь прайс - лист на странице Подтверждение на новом проектном условии
    dict_price_with_nds_by_article_pq_page = {}  # Словарь итоговой суммы с НДС по артикулу
    comment = 'ТЕСТИРОВАНИЕ!!!\ntest_selenium_web_ui'
    num_object = '1150786'  # Объект для выбора в проектном условии Опен
    name_engineer_section = 'Котельная'  # Инженерный раздел для выбора в Опен
    expected_text_tooltip_open = 'Специальная цена'  # Ожидаемое сообщение в тултипе по артикулу в Опене
    promo_course = 115
    discount_for_article_retail = 50.0  # Скидка для кода по рознице

    page = MainPage(browser, link_tst_open)
    page.open()
    page.authorization_from_main_page(login_tst_open, password_tst_open)
    article_list = article.split(' ')

    # Переход в Корзину
    page = Header(browser, link_tst_open)
    page.click_basket()

    # Действия в корзине
    page = CartPage(browser, link_tst_open)
    page.click_empty_trash()
    page.choice_of_client_number()
    page.type_product_in_input(article)
    page.click_add_button()
    page.checking_adding_items_to_cart(article_list)
    article_in_basket = page.save_list_articles_in_cart()

    page.check_special_price_info_in_list_article(article_in_basket)
    discounts_all_articles = page.store_discounts_all_articles()
    with allure.step('Проверяем скидки в корзине'):
        for el in discounts_all_articles:
            assert el == expected_discounts_all_articles, \
                f'Скидка в корзине - ({el}) не равна ожидаемой скидке - ({expected_discounts_all_articles})'

    # Сохраняем прайс - лист по коду
    for el in article_in_basket:
        price_list_by_article = page.save_price_list_by_article(el)
        dict_price_list_in_cart_open[el] = price_list_by_article

    page.click_continue_button()

    page = StandardOrderPage(browser, link_tst_open)
    page.should_h1_standard_order()
    page.click_new_project()

    page = NewDesignCondition(browser, link_tst_open)
    page.there_must_be_an_advance_payment()
    page.type_comment(comment)
    page.input_num_object_in_field_name_or_number_of_pinned_object(num_object)
    page.choose_name_object(num_object)
    page.choose_eng_section(name_engineer_section)
    page.choose_end_buyer()

    discount_contractual_confirmation_page = page.save_contractual_discounts()
    with allure.step('Проверяем договорные скидки на странице Подтверждение'):
        for el in discount_contractual_confirmation_page:
            assert el == expected_discounts_all_articles, \
                f'Договорные скидки на странице Подтверждение - ({el}) не соответствуют ожидаемым - ' \
                f'({expected_discounts_all_articles})'

    requested_discounts = page.saving_requested_discounts_on_page()
    with allure.step('Проверяем запрашиваемые скидки на странице Подтверждение'):
        for el in requested_discounts:
            assert el == expected_discounts_all_articles, \
                f'Запрашиваемые скидки на странице Подтверждение - ({el}) не соответствуют ожидаемым - ' \
                f'({expected_discounts_all_articles})'

    for article in article_in_basket:
        dict_price_list_in_confirmation_page[article] = page.save_price_list_by_article(article)
    print(dict_price_list_in_confirmation_page)

    with allure.step('Сравниваем прайс листы по коду из корзины с прайсами на странице Подтверждение'):
        for key in dict_price_list_in_cart_open:
            if key in dict_price_list_in_confirmation_page:
                print(dict_price_list_in_cart_open[key], dict_price_list_in_confirmation_page[key])
                assert abs(dict_price_list_in_cart_open[key] - dict_price_list_in_confirmation_page[key]) <= 0.1, \
                    f'Прайс лист кода {key} на странице Подтверждение - ({dict_price_list_in_confirmation_page[key]}) ' \
                    f'не соответствует прайсу в корзине - ({dict_price_list_in_cart_open[key]})'
            else:
                raise AssertionError(f'Артикул {key} не найден в ({dict_price_list_in_confirmation_page})')

    for article in article_in_basket:
        page.check_text_in_info_tooltip_identifier(expected_text=expected_text_tooltip_open, article=article)

    page.click_button_confirm()
    page.transition_to_created_design_condition()

    page = DesignConditionPage(browser, link_tst_open)
    created_num_pq = page.store_created_num_pq()
    print(created_num_pq, 'Номер созданного PQ')

    #  Переход в crm
    page = BasePageCrm(browser, link_search_pq_in_crm)
    browser.execute_script("window.open(arguments[0])", link_search_pq_in_crm)
    page.switching_window(-1)
    auth_crm_extru_start(ruco=login_tst_crm)
    page.open()

    page = SearchPq(browser, link_search_pq_in_crm)
    page.search_pq(created_num_pq)
    page.go_to_pq_by_number_in_new_tab(created_num_pq)

    page = PqPage(browser, link_search_pq_in_crm)
    page.status_of_checkpoint_must_be_approval()

    for article in article_in_basket:
        page.there_should_be_a_special_price_icon_at_article(article)

    with allure.step('Проверка скидок дистра у каждого артикула на странице PQ в СРМ'):
        for article in article_in_basket:
            discount_article = page.save_discount_distributor_by_article(article)
            assert discount_article == expected_discounts_all_articles, \
                f'Скидка дистра - ({discount_article}) артикула - ({article}) не равна ожидаемой скидке - ({expected_discounts_all_articles})'

    page.check_that_discount_fields_are_not_editable_on_all_items()
    agreement_list = page.agreement_with_orange_mark()

    url_pq = browser.current_url
    auth_extru_crm_from_authorized_page(url_pq, agreement_list[0])

    page = PqPage(browser, link_search_pq_in_crm)
    page.click_btn_consent_failure()
    page.entering_a_comment_for_approval()
    page.click_btn_reject_in_the_approval_modal()

    with allure.step('Проверяем, что переключатели спец цена / розница и обратно работают'):
        for article in article_in_basket:
            page.click_btn_switch_special_price_retail_at_article(article)  # Со спец. цены на розницу
            time.sleep(0.5)
            page.click_btn_switch_special_price_retail_at_article(article)  # С Розницы на спец. цену

    # Переключаем цену на розницу у одного кода
    article_retail = article_in_basket[1]
    page.click_btn_switch_special_price_retail_at_article(article_retail)
    promo_course_on_page_by_article_retail = page.save_promo_curse(article_retail)
    with allure.step(f'Проверяем, что к коду {article_retail} с розницей применился промо курс'):
        assert promo_course_on_page_by_article_retail == promo_course, \
            f'К коду с розницей - ({article_retail}) не применился промо курс - ({promo_course}). ' \
            f'Значение курса промо кода на странице - ({promo_course_on_page_by_article_retail})'

    page.placing_a_discount_distributor_by_article(value_discount=discount_for_article_retail, article=article_retail)
    page.checking_calculation_of_total_amount_with_nds_by_items(article_in_basket)

    # Сохраняем итоговую сумму с НДС по каждой позиции
    for article in article_in_basket:
        dict_price_with_nds_by_article_pq_page[article] = page.save_amount_with_nds_distributor_by_article(article)

    page.click_btn_save_pq()

    with allure.step('Проверяем, что итоговая сумма с НДС в каждом артикуле после сохранения не изменилась'):
        for article in article_in_basket:
            price_with_nds_by_article_after_save = page.save_amount_with_nds_distributor_by_article(article)
            assert price_with_nds_by_article_after_save == dict_price_with_nds_by_article_pq_page[article], \
                f'Итоговая сумма с НДС артикула - ({article}) - ({price_with_nds_by_article_after_save}) ПОСЛЕ сохранения ' \
                f'не равна итоговой сумме с НДС ДО сохранения - ({dict_price_with_nds_by_article_pq_page[article]})'

    page.check_cp_from_client_agreed_by_author_of_cp()

    total_price_nds_kp = page.store_amount_nds_total_in_kp_crm_rub()
    with allure.step('Проверяем, что общая сумма по позициям соответствует итоговой сумме в КП'):
        expected_total_price = 0.0
        for article in dict_price_with_nds_by_article_pq_page:
            expected_total_price += dict_price_with_nds_by_article_pq_page[article]
        assert expected_total_price == total_price_nds_kp, \
            f'Итоговая сумма КП - ({total_price_nds_kp}) не соответствует общей сумме по позициям - ({expected_total_price})'

    page.verification_of_agreement_den()
    page.send_for_approval_pq_page()
    page.modal_kp_has_not_been_pre_screened()
    page.check_cp_from_client_agreed_by_author_of_cp()
    agreement_on_all_conditions_extru()
    auth_extru_crm_from_authorized_page(url_pq, login_tst_crm)
    page.create_account()
    page.waiting_for_account_creation()
    num_dkp = page.save_all_num_dkp()[0]

    grand_total_all_dkp = page.saving_grand_total_all_dkp()

    with allure.step('Проверка итоговой суммы всех ДКП на равенство итоговой сумме МКП'):
        assert abs(grand_total_all_dkp - total_price_nds_kp) < 1, \
            f'Общая сумма всех ДКП - {grand_total_all_dkp} не соответствует общей сумме на странице PQ - ' \
            f'{total_price_nds_kp}'

    page.go_to_order_by_reference_number(1)

    page.there_should_be_a_retail_icon_at_article(article_retail)

    promo_course_on_page_by_article_retail = page.save_promo_curse(article_retail)
    with allure.step(f'Проверяем, что к коду {article_retail} с розницей применился промо курс'):
        assert promo_course_on_page_by_article_retail == promo_course, \
            f'К коду с розницей - ({article_retail}) не применился промо курс - ({promo_course}). ' \
            f'Значение курса промо кода на странице - ({promo_course_on_page_by_article_retail})'

    discounts_retail_article_on_pq_page = page.save_discount_distributor_by_article(
        article_retail)  # Скидка у кода по рознице
    with allure.step(f'Проверяем скидку дистра у кода с розницей - ({article_retail})'):
        assert discounts_retail_article_on_pq_page == discount_for_article_retail, \
            f'Скидка {discounts_retail_article_on_pq_page} дистра у артикула с розницей - ({article_retail}) не соответствует ' \
            f'ожидаемой - ({discount_for_article_retail})'

    with allure.step(f'Сверяем итоговые суммы МКП {created_num_pq} и ДКП {num_dkp}'):
        total_price_dkp = page.saving_the_final_amount_rub_after_agreement()
        assert abs(total_price_dkp - total_price_nds_kp) < 0.3, \
            f'Итоговая сумма ДКП {num_dkp} - ({total_price_dkp}) не соответствует итоговой сумме МКП - ({total_price_nds_kp})'
