import allure
import pytest

from base_page.base_page import BasePageCrm
from config import TestEnvironment
from conftest import auth_crm_extru_start
from crm_pages.assortments_page.assortments_page import AssortmentsPage, ModalEdit
from crm_pages.pq_page.pq_page import PqPage
from crm_pages.search_pq_page.search_pq_page import SearchPq
from open_pages.cart_page.cart_page import CartPage
from open_pages.confirmation_page.confirmation_page import ConfirmationPage
from open_pages.header.header_page import Header
from open_pages.main_page.main_page import MainPage
from open_pages.order_details_page.order_details_page import OrderDetails
from open_pages.standart_order_page.standart_order_page import StandardOrderPage


@allure.feature('Создание заказа из корзины')
@allure.story('Самовывоз. БОМ. Предоплата')
# Если нет информации в ассортименте об остатках на складе, то ее можно обновить в сервисе
# https://ruecom-intru-tst.ridancorp.net/DAPI/index.html#post-/api/Material/UpdateMaterialsAvaliability
@pytest.mark.skip(
    reason='На странице ассортимента не показывается складское количество и количество на поставку товара')
@pytest.mark.xdist_group(name="open")  # группа для параллельного запуска
@pytest.mark.stage
# @pytest.mark.parametrize('article', ['013G2174R 7000'])
# @pytest.mark.parametrize('article', ['065B3585R 7000'])
# @pytest.mark.parametrize('article', ['013G2174R 7000'])
@pytest.mark.parametrize('article', ['013G7222R 7000'])
def test_40937_cart_bom_pickup(browser, article, auth_crm_extru_start):
    """40937 Корзина BOM самовывоз"""
    link_open = TestEnvironment.LINK_OPEN_TST
    link_pq_search = TestEnvironment.LINK_SEARCH_PQ_TST

    login_open = TestEnvironment.LOGIN_TST_VODOKOMFORT
    password_open = TestEnvironment.PASSWORD_TST_VODOKOMFORT
    amount_bom = 70_000
    article_bom = article.split(' ')[0]
    comment = 'ТЕСТИРОВАНИЕ ПРОДА!!!\ntest_selenium_web_ui'
    address_pickup = 'Московская обл., Истра, деревня Лешково, д 217'

    login_crm = TestEnvironment.LOGIN_CRM
    link_assortments = TestEnvironment.LINK_ASSORTMENTS_PAGE_CRM

    page = MainPage(browser, link_open)
    page.open()
    page.authorization_from_main_page(login_open, password_open)

    page = Header(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_basket()

    page = CartPage(browser, link_open)
    page.choice_of_client_number()
    page.click_empty_trash()
    page.type_product_in_input(article)
    page.click_add_button()
    page.enter_the_number_of_pieces_in_the_quantity_input_field(amount_bom)
    page.click_button_update_cart()
    amount_bom_on_page = page.save_amount_product_by_article(article_bom)
    assert amount_bom == amount_bom_on_page, \
        f'Количество штук - ({amount_bom_on_page}) у кода - ({article_bom}) в Корзине не соответствуют ожидаемому ' \
        f'количеству - ({amount_bom})'

    quantity_in_stock = page.store_quantity_in_stock(article_bom)
    page.click_toolip_article()
    name_articles_in_bom = page.save_name_article_in_tooltip_composition_of_set()
    print(name_articles_in_bom)
    window_open = browser.current_window_handle

    page = BasePageCrm(browser, link_assortments)
    browser.execute_script(f"window.open('')")
    page.switching_window(-1)
    auth_crm_extru_start(ruco=login_crm)
    page.open()
    window_assortments = browser.current_window_handle

    page = AssortmentsPage(browser, link_assortments)
    page.search_article(article_bom)
    page.editing_folder_09_ridan_products(article_bom)

    page = ModalEdit(browser, link_assortments)
    page.there_should_be_a_price_code_in_cu()
    price_ue_bom_in_assortments = page.save_price_code()
    page.closing_editing_modal()

    articles_1_in_bom = name_articles_in_bom[0]
    articles_2_in_bom = name_articles_in_bom[1]

    page = AssortmentsPage(browser, link_assortments)
    page.search_article(articles_1_in_bom)
    page.editing_folder_09_ridan_products(articles_1_in_bom)

    page = ModalEdit(browser, link_assortments)
    amount_in_stock_articles_1_in_bom = page.save_in_stock_amount()
    page.closing_editing_modal()

    page = AssortmentsPage(browser, link_assortments)
    page.search_article(articles_2_in_bom)
    page.editing_folder_09_ridan_products(articles_2_in_bom)

    page = ModalEdit(browser, link_assortments)
    amount_in_stock_articles_2_in_bom = page.save_in_stock_amount()
    page.closing_editing_modal()

    print(f'{amount_in_stock_articles_1_in_bom} - на складе, {amount_in_stock_articles_2_in_bom} -на складе')

    if amount_in_stock_articles_1_in_bom < amount_in_stock_articles_2_in_bom:
        assert amount_in_stock_articles_1_in_bom == quantity_in_stock, \
            f'Наименьшее количество позиций на складе - ({amount_in_stock_articles_1_in_bom}) у одного из кодов ' \
            f'- ({articles_1_in_bom}) в составе БОМ - ({article_bom}) не соответствует количеству на складе - ' \
            f'({quantity_in_stock}) в корзине'
    elif amount_in_stock_articles_2_in_bom < amount_in_stock_articles_1_in_bom:
        assert amount_in_stock_articles_2_in_bom == quantity_in_stock, \
            f'Наименьшее количество позиций на складе - ({amount_in_stock_articles_2_in_bom}) у одного из кодов ' \
            f'- ({articles_2_in_bom}) в составе БОМ - ({article_bom}) не соответствует количеству на складе - ' \
            f'({quantity_in_stock}) в корзине'

    page = CartPage(browser, link_open)
    browser.switch_to.window(window_open)
    page.checking_whether_payment_is_being_made_at_promotional_rate(article_bom, price_ue_bom_in_assortments)

    price_cart = page.store_price()
    page.click_continue_button()

    page = StandardOrderPage(browser, link_open)
    page.should_h1_standard_order()
    price_confirmation = page.store_price_confirmation()
    assert price_confirmation == price_cart, \
        f'Стоимость на странице Подтверждение - ({price_confirmation}) не соответствует стоимости в корзине - ' \
        f'({price_cart})'

    page = ConfirmationPage(browser, link_open)
    discounts_confirmation_page = page.store_all_discounts_on_the_confirmation_page()

    page = StandardOrderPage(browser, link_open)
    page.should_be_equal_prices(price_cart, price_confirmation)
    page.choice_of_payment_terms_prepayment()
    page.type_comment(comment)
    page.choice_of_delivery_method_pickup()
    page.should_be_the_default_address(address_pickup)
    page.click_confirmation_button()
    page.click_num_pq_on_order_placed_page()

    page = OrderDetails(browser, link_open)
    page.waiting_for_account_creation()
    page.data_display_check()
    price_order_open = float(page.store_price_order())
    assert price_order_open == price_confirmation, \
        f'Стоимость в заказе - ({price_order_open}) не соответствует стоимости на странице Подтверждение - ' \
        f'({price_confirmation})'

    num_order = page.store_num_order()
    print(num_order, 'Номер заказа')
    page.checking_printing_forms_download(num_order)
    page.click_btn_tooltip_article()

    page = CartPage(browser, link_open)
    name_articles_in_bom_order_page = page.save_name_article_in_tooltip_composition_of_set()
    assert name_articles_in_bom_order_page == name_articles_in_bom, \
        f'Состав артикулов в БОМе на странице заказа - ({name_articles_in_bom_order_page}) не соответствует составу ' \
        f'БОМа в корзине - ({name_articles_in_bom})'

    page = OrderDetails(browser, link_open)
    discounts_order_page_open = page.sve_all_discounts()
    assert discounts_order_page_open == discounts_confirmation_page, \
        f'Скидки на странице заказа - ({discounts_order_page_open}) не соответствуют скидкам на странице Подтверждение - ' \
        f'({discounts_confirmation_page})'

    browser.switch_to.window(window_assortments)

    page = BasePageCrm(browser, link_pq_search)
    page.open()

    page = SearchPq(browser, link_pq_search)

    page.search_order(num_order)
    page.go_to_order(num_order)

    page = PqPage(browser, TestEnvironment.LINK_CRM_TST)
    page.payment_condition_must_be_advance_payment()

    price_order_crm = float(page.store_price_crm_order())
    assert price_order_crm == price_order_open, \
        f'Стоимость на странице заказа в crm - ({price_order_crm}) не соответствует стоимости на странице заказа в ' \
        f'Опен- ({price_order_open})'

    discounts_order_page_crm = page.store_all_discounts()
    assert discounts_order_page_crm == discounts_order_page_open, \
        f'Скидки на странице заказа в CRM - ({discounts_order_page_crm}) не соответствуют скидкам на странице заказа ' \
        f'в Опен - ({discounts_order_page_open})'

    page.terms_of_delivery_must_be_standard_contractual_terms()
    page.click_btn_kit_contents()

    articles_in_modal_kit_contents_crm = page.save_article_in_modal_kit_contents()
    assert articles_in_modal_kit_contents_crm == name_articles_in_bom_order_page, \
        f'Состав артикулов в БОМе в модалке Состав комплекта в CRM - ({articles_in_modal_kit_contents_crm}) не ' \
        f'соответствуют составу БОМа в Опене на странице заказа - ({name_articles_in_bom_order_page})'
