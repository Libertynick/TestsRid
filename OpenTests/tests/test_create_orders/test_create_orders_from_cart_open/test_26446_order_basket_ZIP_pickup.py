import allure
import pytest
from config import TestEnvironment
from conftest import auth_crm_extru_start
from crm_pages.pq_page.pq_page import PqPage
from crm_pages.search_pq_page.search_pq_page import SearchPq
from open_pages.cart_page.cart_page import CartPage
from open_pages.header.header_page import Header
from open_pages.main_page.main_page import MainPage
from open_pages.order_details_page.order_details_page import OrderDetails, ModalWindowCancelOrder
from open_pages.standart_order_page.standart_order_page import StandardOrderPage

ADDRESS_PICKUP_PTO = 'Нижегородская обл., Дзержинск, ул. Учебная, д 1А'  # Адрес самовывоза


@allure.feature('Создание заказа из корзины')
@allure.story('Самовывоз. ЗИП. Стандартный заказ Предоплата')
@pytest.mark.xdist_group(name="open")
@pytest.mark.parametrize('article', ['w488900 1'])
@pytest.mark.stage
@pytest.mark.autostart
def test_creation_kp_zip(browser, article, auth_crm_extru_start):
    """Создание КП на коды ЗИП"""
    # Действия на Главной странице
    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.open()
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_VODOKOMFORT, TestEnvironment.PASSWORD_TST_VODOKOMFORT)

    # Переход в Корзину
    page = Header(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_basket()

    # Действия в корзине
    page = CartPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.choice_of_client_number()
    page.click_empty_trash()
    page.type_product_in_input(article)
    page.click_add_button()
    price_cart_first = page.store_price()
    # print(price_cart_first, 'price_cart_first---')
    allowances_cart_no_zip = page.save_allowances()
    # print(allowances_cart_no_zip, 'Надбавки без ЗИПа')

    # Добавление ЗИП
    page.add_zip()
    price_cart_zip = page.store_price()
    # print(price_cart_zip, 'price_cart_zip ---')
    allowances_cart_zip = page.save_allowances()
    # print(allowances_cart_zip, 'Надбавки с ЗИПом')
    for allowance in allowances_cart_zip:
        assert allowance == allowances_cart_no_zip[0], \
            f'Надбавки в корзине с ЗИПом - ({allowances_cart_zip}) не соответствуют надбавкам без ЗИПа - ' \
            f'({allowances_cart_no_zip})'
    page.checking_for_upward_price_changes(price_cart_zip, price_cart_first)
    page.click_continue_button()

    # Действия на странице Подтверждение
    page = StandardOrderPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.should_h1_standard_order()
    # page.click_new_project()
    # page.click_standard_order()
    page.choice_of_payment_terms_prepayment()
    page.choice_of_delivery_method_pickup_pto()

    price_confirmation = page.store_price_material_pto()

    with allure.step('Проверка равенства итоговой стоимости на странице Подтверждение с корзиной'):
        assert abs(price_confirmation - price_cart_zip) < 1, \
            f'Итоговая стоимость на странице Подтверждение - {price_confirmation} не соответствует стоимости в ' \
            f'корзине - {price_cart_zip}'

    page.should_be_equal_prices(price_cart_zip, price_confirmation)
    allowance_on_confirmation_page = page.save_allowances()
    # print(allowance_on_confirmation_page, 'Надбавки на странице Подтверждение')
    with allure.step('Проверка равенства надбавок на странице Подтверждение с корзиной'):
        assert allowance_on_confirmation_page == allowances_cart_zip, \
            f'Надбавки на странице Подтверждение - ({allowance_on_confirmation_page}) не соответствуют надбавкам на ' \
            f'странице Корзина с ЗИПом - ({allowances_cart_zip})'

    comment = 'Автотесты!!!\ntest_selenium_web_ui'
    page.type_comment(comment)

    page.click_confirmation_button()

    # Страница с созданными заказами
    page.go_to_created_order(1)

    # Страница детали заказа
    page = OrderDetails(browser, TestEnvironment.LINK_OPEN_TST)
    page.waiting_for_account_creation()
    page.payment_condition_must_be_advance_payment()
    page.data_display_check()
    price_order_1 = float(page.store_price_order())
    num_order_1 = page.store_num_order()
    print(f'{num_order_1} - Номер заказа')
    # print(price_order_1, f'Стоимость заказа {num_order} в деталях заказа в Опене')

    allowance_order_1_page_open = page.saving_surcharges_in_the_order()
    print(allowance_order_1_page_open, 'Надбавки на странице Детали заказа')

    with allure.step(f'Проверка соответствия надбавок на странице Заказа {num_order_1} с корзиной'):
        for allowance in allowance_order_1_page_open:
            assert allowance in allowances_cart_zip, \
                f'Надбавки на странице Заказа {num_order_1} - ({allowance_order_1_page_open})не соответствуют ' \
                f'надбавкам на странице Корзина с ЗИПом - ({allowances_cart_zip})'

    page.checking_printing_forms_download(num_order_1)
    page.verify_check_host(num_order_1)

    # Возвращение на страницу с созданными заказами
    page = ModalWindowCancelOrder(browser, TestEnvironment.LINK_OPEN_TST)
    page.back_page()

    # Страница с созданными заказами
    page = OrderDetails(browser, TestEnvironment.LINK_OPEN_TST)
    page.waiting_open_page_reference_number()

    page = StandardOrderPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.go_to_created_order(2)

    # Страница детали второго заказа
    page = OrderDetails(browser, TestEnvironment.LINK_OPEN_TST)
    page.waiting_for_account_creation()
    page.payment_condition_must_be_advance_payment()
    page.data_display_check()
    price_order_2 = float(page.store_price_order())
    num_order_2 = page.store_num_order()
    print(f'{num_order_2} - Заказ 2')

    summ_orders = price_order_2 + price_order_1

    with allure.step(f'Проверка равенства суммы итоговой стоимости двух заказов {num_order_1} {num_order_2} с '
                     f'суммой на странице Подтверждение'):
        assert abs(summ_orders - price_confirmation) < 1, \
            f'Сумма - {summ_orders} двух заказов {num_order_1} {num_order_2} не соответствует сумме на странице ' \
            f'Подтверждение - {price_confirmation}'

    allowance_order_2_page_open = page.saving_surcharges_in_the_order()
    print(allowance_order_2_page_open, 'Надбавки на странице Детали заказа')

    with allure.step(f'Проверка соответствия надбавок на странице заказа {num_order_2} с надбавками в корзине с ЗИПом'):
        for allowance in allowance_order_2_page_open:
            assert allowance in allowances_cart_zip, \
                f'Надбавки на странице Заказа {num_order_2} - ({allowance_order_2_page_open})не соответствуют ' \
                f'надбавкам на странице Корзина с ЗИПом - ({allowances_cart_zip})'

    page.checking_printing_forms_download(num_order_2)
    page.verify_check_host(num_order_2)

    # Переход в crm для сверки информации в заказа
    auth_crm_extru_start(ruco=TestEnvironment.LOGIN_CRM)
    page = SearchPq(browser, TestEnvironment.LINK_SEARCH_PQ_TST)
    page.open()
    window_search_order = browser.current_window_handle

    page.search_order(num_order_1)
    page.go_to_order(num_order_1)

    page = PqPage(browser, TestEnvironment.LINK_CRM_TST)
    page.payment_condition_must_be_advance_payment()
    price_order_crm_1 = float(page.store_price_crm_order())
    # print(price_order_crm_1, f'Стоимость заказа в ДКП crm {num_order}')
    page.verify_price_crm_with_price_open(price_order_crm_1, price_order_1)

    allowance_order_page_crm = page.saving_surcharges_on_all_article_lines()
    # print(allowance_order_page_crm, 'Надбавки на странице Заказа в CRM')
    with allure.step(f'Проверка соответствия надбавок на странице заказа в CRM {num_order_1} с надбавками на '
                     f'странице заказа в Опене'):
        assert allowance_order_page_crm == allowance_order_1_page_open, \
            f'Надбавки на странице заказа {num_order_1} в CRM - ({allowance_order_page_crm}) не соответствуют ' \
            f'надбавкам на странице заказа в Опене - ({allowance_order_1_page_open})'

    browser.switch_to.window(window_search_order)

    page = SearchPq(browser, TestEnvironment.LINK_SEARCH_PQ_TST)
    page.search_order(num_order_2)
    page.go_to_order(num_order_2)

    page = PqPage(browser, TestEnvironment.LINK_CRM_TST)
    page.payment_condition_must_be_advance_payment()
    price_order_crm_2 = float(page.store_price_crm_order())
    # print(price_order_crm_1, f'Стоимость заказа в ДКП crm {num_order}')
    page.verify_price_crm_with_price_open(price_order_crm_2, price_order_2)

    allowance_order_page_crm = page.saving_surcharges_on_all_article_lines()
    # print(allowance_order_page_crm, 'Надбавки на странице Заказа в CRM')
    with allure.step(f'Проверка соответствия надбавок на странице заказа в CRM {num_order_2} с надбавками на '
                     f'странице заказа в Опене'):
        assert allowance_order_page_crm == allowance_order_2_page_open, \
            f'Надбавки на странице заказа {num_order_2} в CRM - ({allowance_order_page_crm}) не соответствуют ' \
            f'надбавкам на странице заказа в Опене - ({allowance_order_2_page_open})'
