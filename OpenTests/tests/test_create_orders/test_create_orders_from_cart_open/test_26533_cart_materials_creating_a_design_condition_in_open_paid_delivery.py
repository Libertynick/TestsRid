import allure
import pytest

from base_page.base_page import BasePageCrm
from base_page.base_page_locators import BaseOpenLocators
from config import TestEnvironment
from conftest import auth_crm_extru_start, agreement_on_all_conditions_extru
from crm_pages.pq_page.pq_page import PqPage
from crm_pages.search_pq_page.search_pq_page import SearchPq
from open_pages.cart_page.cart_page import CartPage
from open_pages.confirmation_page.confirmation_page import ConfirmationPage
from open_pages.design_condition_page.design_condition_page import DesignConditionPage
from open_pages.header.header_page import Header
from open_pages.main_page.main_page import MainPage
from open_pages.new_design_condition.new_design_condition_page import NewDesignCondition
from open_pages.order_details_page.order_details_page import OrderDetails
from open_pages.standart_order_page.standart_order_page import StandardOrderPage


@allure.feature('Создание проектного условия в Open')
@allure.story('Платная доставка на указанный адрес. Материалы. Предоплата')
@pytest.mark.xdist_group(name="design condition")  # группа для параллельного запуска
@pytest.mark.parametrize('article', ['065B3050 10  003L0143 25'])
@pytest.mark.stage
def test_26533_cart_materials_creating_a_design_condition_in_open(browser, article, auth_crm_extru_start,
                                                                  agreement_on_all_conditions_extru,
                                                                  auth_extru_crm_from_authorized_page):
    """26533 Корзина Материалы Создание проектного условия в Open платная доставка"""
    delivery_address = 'г Москва, ул Римского-Корсакова, д 100'  # Адрес доставки
    comment = 'ТЕСТИРОВАНИЕ!!!\ntest_selenium_web_ui'
    value_for_increasing_discount = 5  # Значение для увеличения скидки
    num_object = '1139467'

    login_open = TestEnvironment.LOGIN_TST_BURNYASHEVA
    password_open = TestEnvironment.PASSWORD_TST_BURNYASHEVA
    link_open = TestEnvironment.LINK_OPEN_TST
    link_search_pq_in_crm = TestEnvironment.LINK_SEARCH_PQ_TST

    page = MainPage(browser, link_open)
    page.open()
    page.authorization_from_main_page(login_open, password_open)

    # Переход в Корзину
    page = Header(browser, link_open)
    page.click_basket()

    # Действия в корзине
    page = CartPage(browser, link_open)
    page.choice_of_client_number()
    page.click_empty_trash()
    page.type_product_in_input(article)
    page.click_add_button()
    price_cart = page.store_price()
    # print(price_cart, 'Стоимость в Корзине')
    page.click_continue_button()

    # Стандартный заказ
    page = StandardOrderPage(browser, link_open)
    page.should_h1_standard_order()
    page.click_new_project()

    # Новое Проектное условие
    page = NewDesignCondition(browser, link_open)
    page.there_must_be_an_advance_payment()
    page.click_shipping_list()
    page.selection_of_delivery_to_specified_address()
    page.entering_delivery_address(delivery_address)
    cost_delivery = page.delivery_cost_calculation()
    # print(cost_delivery, 'Стоимость доставки до адреса')
    assert cost_delivery != 0, f'Стоимость доставки равна 0 - ({cost_delivery})'

    price_new_design_condition = page.store_price_confirmation()
    # print(price_new_design_condition, 'Стоимость на странице Новое Проектное условие до проставления скидок')
    page.should_be_equal_prices(price_cart, price_new_design_condition)
    page.type_comment(comment)
    page.choose_name_object(num_object)
    page.choose_eng_section()
    page.choose_end_buyer()
    page.button_input_gcm()
    page.input_new_gcm(value_for_increasing_discount)
    discounts_in_gcm_tab = page.saving_a_list_with_discounts_in_gcm_tab()
    # print(discounts_in_gcm_tab, 'Скидки в модалке внесения скидок по ГЦМ')
    page.click_on_button_confirm_entered_gcm()
    requested_discount_on_page_design_condition = page.saving_requested_discounts_on_page()
    # print(requested_discount_on_page_design_condition, 'Запрашиваемые Скидки на странице Новое Проектное условие')
    assert sorted(requested_discount_on_page_design_condition) == sorted(discounts_in_gcm_tab), \
        f'Запрашиваемые Скидки на странице Проектное условие - ({requested_discount_on_page_design_condition}) ' \
        f'не равны введенным скидкам в модалке Внесение скидок по ГЦМ - ({discounts_in_gcm_tab})'
    price_new_design_condition_after_applying_discounts = page.store_price_confirmation()
    # print(price_new_design_condition_after_applying_discounts,
    #       'Стоимость на странице Новое Проектное условие после проставления скидок')
    page.click_button_confirm()
    page.transition_to_created_design_condition()

    # Проектное условие
    page = DesignConditionPage(browser, link_open)
    design_condition_discounts = page.store_all_discounts_on_the_design_condition_page()
    # print(design_condition_discounts, 'Скидки на странице Проектное условие')
    assert design_condition_discounts == requested_discount_on_page_design_condition, \
        f'Скидки на странице Проектное условие (PQ) - ({design_condition_discounts}) не равны запрашиваемым скидкам ' \
        f'на странице Новое проектное условие - ({requested_discount_on_page_design_condition})'

    total_price_on_design_condition = page.saving_the_final_cost_rub_on_the_design_condition_page()
    # print(total_price_on_design_condition, 'Итоговая стоимость на странице Проектное условие')
    assert abs(total_price_on_design_condition - price_new_design_condition_after_applying_discounts) <= 2, \
        f'Итоговая стоимость на странице Проектное условие - ({total_price_on_design_condition}) не равна стоимости ' \
        f'на странице Новое проектное условие - ({price_new_design_condition_after_applying_discounts})'

    page.availability_display_check()
    created_num_pq = page.store_created_num_pq()
    print(created_num_pq, 'Номер созданного PQ')
    page.click_printing_forms()
    page.checking_export_to_excel_download(created_num_pq)

    #  Переход в crm для согласования
    page = BasePageCrm(browser, link_search_pq_in_crm)
    browser.execute_script("window.open(arguments[0])", link_search_pq_in_crm)
    page.switching_window(-1)
    auth_crm_extru_start(ruco=TestEnvironment.LOGIN_CRM)
    page.open()

    page = SearchPq(browser, TestEnvironment.LINK_CRM_TST)
    window_search_pq_crm = browser.current_window_handle  # Вкладка поиска PQ
    page.search_pq(created_num_pq)
    page.go_to_pq_by_number_in_new_tab(created_num_pq)

    # Страница PQ
    agreement_on_all_conditions_extru()
    url_pq = browser.current_url
    auth_extru_crm_from_authorized_page(url_page=url_pq, name_user=TestEnvironment.LOGIN_CRM)

    page = PqPage(browser, link_search_pq_in_crm)
    total_price_crm = page.saving_the_final_amount_rub_after_agreement()
    # print(total_price_crm, 'Итоговая сумма в crm')
    assert total_price_crm == total_price_on_design_condition, \
        f'Сумма на странице PQ в crm - ({total_price_crm}) не равна сумме на странице Проектное условие в Опен - ' \
        f'({total_price_on_design_condition})'

    discounts_in_pq_crm = page.store_all_discounts()
    # print(discounts_in_pq_crm, 'Скидки на странице PQ в crm')
    assert discounts_in_pq_crm == design_condition_discounts, \
        f'Скидки на странице PQ в crm - ({discounts_in_pq_crm}) не соответствуют скидкам на странице Проектное ' \
        f'условие - ({design_condition_discounts})'

    # Переход на вкладку Опен - Проектное условие
    page.switching_window(0)
    browser.refresh()
    page.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)

    page = DesignConditionPage(browser, link_open)
    page.payment_condition_must_be_advance_payment()
    page.availability_display_check()
    page.click_printing_forms()
    page.checking_export_to_excel_download(created_num_pq)
    page.click_printing_forms()
    page.checking_commercial_offer_ridan_download()
    page.click_button_order()

    # Страница Подтверждение
    page = ConfirmationPage(browser, link_open)
    page.check_box_shipment_only_when_fully_assembled_must_not_be_selected()
    page.clickability_check_shipment_only_when_fully_assembled()
    page.must_be_prepaid()

    discounts_confirmation_page = page.store_all_discounts_on_the_confirmation_page()
    # print(discounts_confirmation_page, f'Скидки на странице Подтверждение')
    discounts_confirmation_page.sort()
    discounts_in_pq_crm.sort()
    assert discounts_confirmation_page == discounts_in_pq_crm, \
        f'Скидки на странице Подтверждение - ({discounts_confirmation_page}) не равны скидкам на странице PQ в CRM - ' \
        f'({discounts_in_pq_crm})'

    total_price_confirmation_page = page.store_total_cost_on_the_confirmation_page()
    # print(total_price_confirmation_page, f'Итоговая стоимость на странице Подтверждение')
    assert total_price_confirmation_page - total_price_crm < 2, \
        f'Итоговая стоимость на странице Подтверждение - ({total_price_confirmation_page}) не равна стоимости на ' \
        f'странице PQ в crm - ({total_price_crm})'

    page.input_comment()
    page.save_to_excel(created_num_pq)
    page.click_button_confirm()
    page.dkp_link_open_check()
    page.click_on_the_button_to_return_to_pq()

    # Страница Проектное условие
    page = DesignConditionPage(browser, link_open)
    page.waiting_to_create_invoices()
    page.click_printing_forms()
    page.checking_export_to_excel_download(created_num_pq)
    page.click_printing_forms()
    page.checking_commercial_offer_ridan_download()

    amount_of_orders_created = page.saving_the_amount_in_created_orders()
    # print(amount_of_orders_created, 'Сумма созданных заказов')
    assert abs(amount_of_orders_created - total_price_confirmation_page) < 2, \
        f'Сумма созданных заказов - ({amount_of_orders_created}) не равна стоимости на странице Подтверждение - ' \
        f'({total_price_confirmation_page})'

    page.go_to_order(1)

    # Страница Детали заказа
    page = OrderDetails(browser, link_open)
    page.data_display_check()
    page.payment_condition_must_be_advance_payment()
    num_order = page.store_num_order()
    print(num_order, 'Номер заказа')
    price_order = page.store_price_order()
    discounts_order = page.sve_all_discounts()
    page.checking_printing_forms_download(num_order)

    browser.switch_to.window(window_search_pq_crm)

    # Страница поиска заказа в crm
    page = SearchPq(browser, link_search_pq_in_crm)
    page.search_order(num_order)
    page.go_to_order(num_order)

    #  Страница заказа
    page = PqPage(browser, TestEnvironment.LINK_CRM_TST)
    page.payment_condition_must_be_advance_payment()
    price_order_crm = page.store_price_crm_order()
    # print(price_order_crm, f'Стоимость заказа в ДКП crm {num_order}')
    assert price_order_crm == float(price_order), \
        f'Стоимость - ({price_order_crm}) заказа {num_order} на странице Заказа в crm не равна стоимости - ' \
        f'({price_order}) заказа - ({num_order}) на странице Детали заказа в Опене'

    all_discounts_crm_order = page.store_all_discounts()
    # print(all_discounts_crm_order, f'Скидки на странице заказа в crm - {num_order}')
    assert all_discounts_crm_order == discounts_order, \
        f'Скидки - {all_discounts_crm_order}) на странице заказа {num_order} в crm не соответствуют скидкам - ' \
        f'{discounts_order} заказа {num_order} на странице Детали заказа в Опене'
