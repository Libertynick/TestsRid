import pytest
from config import TestEnvironment
from open_pages.cart_page.cart_page import CartPage
from open_pages.distributor_selection_page.distributor_selection_page import DistributorSelectionPage
from open_pages.header.header_page import UlMenuOrdersPage, Header
from open_pages.header.profile_menu_user import ProfileMenuUser
from open_pages.incoming_order_pages.incoming_order_page.incoming_order_page import IncomingOrderPage
from open_pages.incoming_order_pages.incoming_orders_search_page.incoming_orders_search_page import \
    IncomingOrdersSearchPage
from open_pages.indirect_customer_confirmation_page.indirect_customer_confirmation_page import \
    IndirectCustomerConfirmationPage
from open_pages.main_page.main_page import MainPage
from open_pages.purchase_order_page.purchase_order_page import PurchaseOrderPage
from open_pages.purchase_orders_list_page.purchase_orders_list_page import PurchaseOrdersListPage


@pytest.mark.xdist_group(name="open")  # группа для параллельного запуска
@pytest.mark.skip(reason='Изменился интерфейс, сейчас функционалРидан Онлайн')
@pytest.mark.parametrize('article', ['065B8210R 10 015P1001 3'])
@pytest.mark.stage
def test_27636_basket_materials_order_of_indirect_customer_dol(browser, article):
    """Корзина Материалы Заказ непрямого клиента (DOL)"""
    desired_payment_terms = ' Предоплата. Наличный расчет '  # Желаемые условия оплаты
    desired_delivery_terms = ' Доставка со склада Ридан '  # Жедаемые условия доставки
    delivery_address = 'г Москва, ул Римского-Корсакова, д 2А'  # адрес доставки

    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.open()
    page.authorization_from_main_page(
        TestEnvironment.LOGIN_TST_INDIRECT_CUSTOMER, TestEnvironment.PASSWORD_TST_INDIRECT_CUSTOMER)

    # Переход в Корзину
    page = Header(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_basket()

    # Действия в корзине
    page = CartPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.choice_of_client_number()
    page.click_empty_trash()
    page.type_product_in_input(article)
    page.click_add_button()
    price_cart = page.store_price()
    # print(price_cart, '---price_cart---')
    page.click_continue_button()

    page = DistributorSelectionPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.should_be_header_distributor_selection()
    page.should_be_cards_with_distributors_displayed()
    page.select_distributor_card_vodokomfort()

    # Страница Подтверждение
    page = IndirectCustomerConfirmationPage(browser, TestEnvironment.LINK_OPEN_TST)
    all_discounts_indirect_customer = page.store_all_discounts_on_the_confirmation_page()
    # print(all_discounts_indirect_customer, 'Скидки у непрямого клиента на стр Подтверждение')
    total_cost_confirmation_page = page.store_total_cost_on_the_confirmation_page()
    # print(total_cost_confirmation_page, 'Сумма заказа на странице Подтверждение')

    assert price_cart == total_cost_confirmation_page, \
        f'Сумма на странице Подтверждение - ({total_cost_confirmation_page}) не равна сумме в корзине - ({price_cart})'

    selected_distributor = page.saving_the_selected_distributor()
    # print(selected_distributor, 'Выбранный дистрибьютор')
    page.choice_of_desired_payment_terms(desired_payment_terms)
    page.choice_of_desired_delivery_terms(desired_delivery_terms)
    page.choice_of_delivery_address(delivery_address)
    comment_from_delivery = page.input_comment_from_delivery()
    order_comment = page.input_order_comment()
    # print(f'{comment_from_delivery} - комментарий к доставке \n{order_comment} - комментарий к заказу')
    page.click_button_confirm()
    number_application = page.save_number_application()
    print(number_application, 'Номер заявки на покупку')
    page.click_button_more(number_application)

    # Страница Заявка на покупку
    page = PurchaseOrderPage(browser, TestEnvironment.LINK_OPEN_TST)
    indirect_client_organization = page.store_indirect_client_organization()
    user_name_indirect_client = page.store_autor_application()
    # print(indirect_client_organization, 'Организация непрямого клиента')
    # print(user_name_indirect_client, 'Автор заявки')
    page.the_selected_distributor_should_be_displayed(selected_distributor)
    page.should_be_status_pending_response()
    page.application_status_should_be_new()
    total_price_on_the_application_page = page.store_total_price()
    # print(total_price_on_the_application_page, 'Стоимость на странице Заявка на покупку')
    assert int(total_price_on_the_application_page) == int(total_cost_confirmation_page), \
        f'Стоимость на странице Заявка на покупку - ({total_price_on_the_application_page}) не равна стоимости на ' \
        f'странице Подтверждение - ({total_cost_confirmation_page})'
    page.availability_check()
    page.checking_the_desired_payment_terms(desired_payment_terms)
    page.checking_the_desired_delivery_conditions(desired_delivery_terms)
    page.check_order_comment(order_comment)
    page.check_shipping_comment(comment_from_delivery)
    page.check_delivery_address(delivery_address)

    page = ProfileMenuUser(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_profile()
    page.logout()

    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.open()
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_VODOKOMFORT, TestEnvironment.PASSWORD_TST_VODOKOMFORT)

    page = ProfileMenuUser(browser, TestEnvironment.LINK_OPEN_TST)
    page.go_to_orders_menu_distributor()

    page = UlMenuOrdersPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_orders_tab()
    page.go_to_orders()

    # Страница Поиска Входящие заказы
    page = IncomingOrdersSearchPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.search_application(number_application)

    # Страница Входящий заказ
    page = IncomingOrderPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.should_be_title_incoming_order(number_application)
    page.should_be_on_the_indirect_client_organization_page(indirect_client_organization)
    page.must_be_an_indirect_customer_contact(user_name_indirect_client)
    page.must_be_a_delivery_address(delivery_address)
    page.must_be_status_application_new()
    page.availability_check()
    page.checking_the_desired_payment_terms(desired_payment_terms)
    page.checking_the_desired_delivery_conditions(desired_delivery_terms)
    page.check_order_comment(order_comment)
    page.check_shipping_comment(comment_from_delivery)
    price_on_the_page_incoming_order = page.store_total_price()
    # print(price_on_the_page_incoming_order, 'Стоиость на странице Входящий заказ')

    assert price_on_the_page_incoming_order == total_price_on_the_application_page, \
        f'Стоимость на странице Входящий заказ - ({price_on_the_page_incoming_order}) не равна стоимости на странице ' \
        f'Заявка на покупку - ({total_price_on_the_application_page})'

    page.take_an_application()
    page.should_be_title_incoming_order(number_application)
    page.should_be_on_the_indirect_client_organization_page(indirect_client_organization)
    page.must_be_an_indirect_customer_contact(user_name_indirect_client)
    page.must_be_a_delivery_address(delivery_address)
    page.availability_check()
    page.checking_the_desired_payment_terms(desired_payment_terms)
    page.checking_the_desired_delivery_conditions(desired_delivery_terms)
    page.check_order_comment(order_comment)
    page.check_shipping_comment(comment_from_delivery)
    price_on_the_page_incoming_order = page.store_total_price()
    # print(price_on_the_page_incoming_order, 'Стоиость на странице Входящий заказ')
    assert price_on_the_page_incoming_order == total_price_on_the_application_page, \
        f'Стоимость на странице Входящий заказ - ({price_on_the_page_incoming_order}) не равна стоимости на странице ' \
        f'Заявка на покупку - ({total_price_on_the_application_page})'

    page.deal_approval()
    page.should_be_title_incoming_order(number_application)
    page.should_be_on_the_indirect_client_organization_page(indirect_client_organization)
    page.must_be_an_indirect_customer_contact(user_name_indirect_client)
    page.must_be_a_delivery_address(delivery_address)
    page.availability_check()
    page.checking_the_desired_payment_terms(desired_payment_terms)
    page.checking_the_desired_delivery_conditions(desired_delivery_terms)
    page.check_order_comment(order_comment)
    page.check_shipping_comment(comment_from_delivery)
    price_on_the_page_incoming_order = page.store_total_price()
    # print(price_on_the_page_incoming_order, 'Стоиость на странице Входящий заказ')
    assert price_on_the_page_incoming_order == total_price_on_the_application_page, \
        f'Стоимость на странице Входящий заказ - ({price_on_the_page_incoming_order}) не равна стоимости на странице ' \
        f'Заявка на покупку - ({total_price_on_the_application_page})'
    page.create_an_outgoing_order()

    page.delivery_from_our_warehouse()
    page.should_be_title_incoming_order(number_application)
    page.should_be_on_the_indirect_client_organization_page(indirect_client_organization)
    page.must_be_an_indirect_customer_contact(user_name_indirect_client)
    page.must_be_a_delivery_address(delivery_address)
    page.checking_the_desired_payment_terms(desired_payment_terms)
    page.checking_the_desired_delivery_conditions(desired_delivery_terms)
    page.check_order_comment(order_comment)
    page.check_shipping_comment(comment_from_delivery)
    price_on_the_page_incoming_order = page.store_total_price()
    # print(price_on_the_page_incoming_order, 'Стоиость на странице Входящий заказ')
    assert price_on_the_page_incoming_order == total_price_on_the_application_page, \
        f'Стоимость на странице Входящий заказ - ({price_on_the_page_incoming_order}) не равна стоимости на странице ' \
        f'Заявка на покупку - ({total_price_on_the_application_page})'

    # Авторизация под непрямым клентом
    page = ProfileMenuUser(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_profile()
    page.logout()

    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.authorization_from_main_page(
        TestEnvironment.LOGIN_TST_INDIRECT_CUSTOMER, TestEnvironment.PASSWORD_TST_INDIRECT_CUSTOMER)
    page = ProfileMenuUser(browser, TestEnvironment.LINK_OPEN_TST)
    page.transition_to_purchase_orders_under_an_indirect_client()

    page = PurchaseOrdersListPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.search_application(number_application)
    page.go_to_application_by_number(number_application)

    # Страница Заявка на покупку
    page = PurchaseOrderPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.the_selected_distributor_should_be_displayed(selected_distributor)
    total_price_on_the_application_page = page.store_total_price()
    # print(total_price_on_the_application_page, 'Стоимость на странице Заявка на покупку')
    assert int(total_price_on_the_application_page) == int(total_cost_confirmation_page), \
        f'Стоимость на странице Заявка на покупку - ({total_price_on_the_application_page}) не равна стоимости на ' \
        f'странице Подтверждение - ({total_cost_confirmation_page})'

    page.checking_the_desired_payment_terms(desired_payment_terms)
    page.checking_the_desired_delivery_conditions(desired_delivery_terms)
    page.check_order_comment(order_comment)
    page.check_shipping_comment(comment_from_delivery)
    page.application_status_to_be_processed()
    page.must_be_supplied_from_the_distributor_warehouse()
    page.click_button_cargo_received()
