import allure
import pytest

from base_page.base_page import BasePageCrm
from base_page.base_page_locators import BaseOpenLocators
from config import TestEnvironment
from crm_pages.pq_page.pq_page import PqPage
from crm_pages.search_pq_page.search_pq_page import SearchPq
from open_pages.cart_page.cart_page import CartPage
from open_pages.confirmation_page.confirmation_page import ConfirmationPage
from open_pages.design_condition_page.design_condition_page import DesignConditionPage
from open_pages.header.header_page import Header
from open_pages.kp_ridan_page.kp_ridan_page import KpRidanPage
from open_pages.main_page.main_page import MainPage
from open_pages.order_details_page.order_details_page import OrderDetails
from open_pages.standart_order_page.standart_order_page import StandardOrderPage


@allure.feature('Создание заказа из корзины. КП Ридан')
@allure.story('Доставка на указанный адрес. ПТО. Предоплата')
@pytest.mark.xdist_group(name="open")  # группа для параллельного запуска
@pytest.mark.parametrize('article', ['w488900 3'])
@pytest.mark.stage
def test_26668_basket_creation_of_kp_ridan_pto_delivery_to_specified_address(browser, article, auth_crm_extru_start,
                                                                             auth_extru_crm_from_authorized_page,
                                                                             agreement_on_all_conditions_extru):
    """26668 Корзина ПТО Создание КП Ридан """
    link_open = TestEnvironment.LINK_OPEN_TST
    login_open = TestEnvironment.LOGIN_TST_VODOKOMFORT
    password_open = TestEnvironment.PASSWORD_TST_VODOKOMFORT
    delivery_address = 'г Москва, ул Римского-Корсакова, д 1'
    final_buyer = 'фирма "ВОДОКОМФОРТ" (Офис Москва)'
    type_delivery = 'Доставка на указанный адрес'

    login_crm = TestEnvironment.LOGIN_CRM

    # Действия на Главной странице
    page = MainPage(browser, link_open)
    page.open()
    page.authorization_from_main_page(login_open, password_open)

    # Переход в Корзину
    page = Header(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_basket()

    # Действия в корзине
    page = CartPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.choice_of_client_number()
    page.click_empty_trash()
    page.type_product_in_input(article)
    page.click_add_button()
    price_cart = page.store_price()
    page.click_continue_button()

    # Действия на странице Подтверждение
    page = StandardOrderPage(browser, link_open)
    page.should_h1_standard_order()
    page.click_btn_kp_ridan()

    page = KpRidanPage(browser, link_open)
    page.there_must_be_an_advance_payment()
    page.choice_of_delivery_method_to_specified_address()
    page.choice_address(delivery_address)
    page.button_cost_delivery()
    cost_delivery = page.save_cost_delivery_type_delivery_cost_production_dzerzhinsk()

    with allure.step('Проверка, что стоимость доставки не равна 0'):
        assert cost_delivery != 0, \
            f'Стоимость доставки равна 0. Сохраненная стоимость доставки - ({cost_delivery})'

    page.type_comment('selenium_test_web 123')
    price_confirmation_page = page.store_price_confirmation()
    with allure.step('Сравнение стоимости на странице Подтверждение со стоимостью в корзине'):
        assert abs(price_confirmation_page - price_cart) < 0.5, \
            f'Стоимость на странице Подтверждение КП Ридан - ({price_confirmation_page}) не равна стоимости на странице ' \
            f'Корзина - ({price_cart})'

    page.click_btn_add_a_discount_by_gcm()
    negotiated_discount_in_modal_for_entering_discounts_on_gcm = page. \
        saving_negotiated_discount_in_modal_for_entering_discounts_on_gcm()
    page.you_cannot_enter_more_than_contractual_discount_into_requested_discount(
        negotiated_discount_in_modal_for_entering_discounts_on_gcm)
    page.click_btn_confirmation_in_modal_making_discounts()
    discount_requested_on_page_kp_ridan = page.save_discount_requested_on_page_confirmation()

    with allure.step(
            'Проверка, что запрашиваемая скидка в модалке внесения скидок по ГЦМ отображается на странице Подтверждение'):
        for discount_on_page_confirmation in discount_requested_on_page_kp_ridan:
            assert negotiated_discount_in_modal_for_entering_discounts_on_gcm == discount_on_page_confirmation, \
                f'Запрашиваемая скидка в модалке внесения скидок по ГЦМ - ' \
                f'({negotiated_discount_in_modal_for_entering_discounts_on_gcm}) не соответствует запрашиваемой скидке ' \
                f'на странице Подтверждение после внесения - ({discount_on_page_confirmation})'

    page.click_confirmation_button()
    page.click_num_pq_on_order_placed_page()

    page = DesignConditionPage(browser, link_open)
    design_condition_discounts = page.store_all_discounts_on_the_design_condition_page()
    with allure.step(
            'Проверка, что указанные скидки на странице Подтверждение отображаются на странице Проектное условие в Опене'):
        assert discount_requested_on_page_kp_ridan == design_condition_discounts, \
            f'Скидки на странице Проектное условие (PQ) - ({design_condition_discounts}) не равны запрашиваемым скидкам ' \
            f'на странице КП Ридан (Подтверждение) - ({discount_requested_on_page_kp_ridan})'

    # price_confirmation_page = price_confirmation_page + cost_delivery
    total_price_on_design_condition = page.saving_the_final_cost_rub_on_the_design_condition_page()
    with allure.step(
            'Проверка, что итоговая стоимость со страницы Подтверждение отображается на странице Проектное условие в Опене'):
        assert abs(total_price_on_design_condition - price_confirmation_page) <= 2, \
            f'Итоговая стоимость на странице Проектное условие - ({total_price_on_design_condition}) не равна стоимости ' \
            f'на странице КП Ридан (Подтверждение) - ({price_confirmation_page})'

    page.delivery_method_must_be_paid_delivery()
    page.availability_display_check()
    created_num_pq = page.store_created_num_pq()
    print(created_num_pq, 'Номер созданного PQ')
    page.click_printing_forms()
    page.checking_export_to_excel_download(created_num_pq)

    #  Переход в crm для согласования
    page = BasePageCrm(browser, TestEnvironment.LINK_SEARCH_PQ_TST)
    browser.execute_script("window.open(arguments[0])", TestEnvironment.LINK_SEARCH_PQ_TST)
    page.switching_window(-1)
    auth_crm_extru_start(ruco=login_crm)
    page.open()

    page = SearchPq(browser, TestEnvironment.LINK_CRM_TST)
    window_search_pq_crm = browser.current_window_handle  # Вкладка поиска PQ
    page.search_pq(created_num_pq)
    page.go_to_pq_by_number_in_new_tab(created_num_pq)

    # Страница PQ
    page = PqPage(browser, TestEnvironment.LINK_SEARCH_PQ_TST)
    agreements = page.agreement_with_orange_mark()
    print(agreements)

    url_pq = browser.current_url
    auth_extru_crm_from_authorized_page(url_page=url_pq, name_user=agreements[0])

    page = PqPage(browser, TestEnvironment.LINK_SEARCH_PQ_TST)
    page.click_btn_consent_failure()
    page.entering_a_comment_for_approval()
    page.click_btn_reject_in_the_approval_modal()
    auth_extru_crm_from_authorized_page(url_page=url_pq, name_user=login_crm)
    page.final_buyer_dropdown_list_expansion()
    page.end_customer_input(final_buyer)
    page.entering_a_shipping_address(delivery_address)
    page.click_button_recalculate_pq_page()
    page.save_pq_on_pq_page()
    page.send_for_approval_pq_page()
    page.modal_kp_has_not_been_pre_screened()
    agreement_on_all_conditions_extru()

    auth_extru_crm_from_authorized_page(url_page=url_pq, name_user=login_crm)

    # Страница PQ
    page = PqPage(browser, TestEnvironment.LINK_SEARCH_PQ_TST)
    total_price_crm = page.saving_the_final_amount_rub_after_agreement()
    with allure.step('Сверка итоговой суммы на странице PQ в срм с суммой на странице Проектное условие в Опен'):
        assert total_price_crm == total_price_on_design_condition, \
            f'Сумма на странице PQ в crm - ({total_price_crm}) не равна сумме на странице Проектное условие в Опен - ' \
            f'({total_price_on_design_condition})'

    discounts_in_pq_crm = page.store_all_discounts()
    with allure.step('Сверка скидок на странице PQ в срм со скидками на странице Проектное условие в Опен'):
        assert discounts_in_pq_crm == design_condition_discounts, \
            f'Скидки на странице PQ в crm - ({discounts_in_pq_crm}) не соответствуют скидкам на странице Проектное ' \
            f'условие - ({design_condition_discounts})'

    # Переход на вкладку Опен - Проектное условие
    page.switching_window(0)
    browser.refresh()
    page.waiting_for_loader_processing_on_page(BaseOpenLocators.LOCATOR_SPINNER_NO_TEXT)

    page = DesignConditionPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.payment_condition_must_be_advance_payment()
    page.availability_display_check()
    page.click_printing_forms()
    page.checking_export_to_excel_download(created_num_pq)
    page.click_printing_forms()
    page.checking_commercial_offer_ridan_download()
    page.click_button_order()

    # Страница Подтверждение
    page = ConfirmationPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.checkbox_shipment_only_when_fully_loaded_must_be_selected()
    page.must_be_prepaid()
    page.checking_the_selected_delivery(type_delivery)

    discounts_confirmation_page = page.store_all_discounts_on_the_confirmation_page()
    with allure.step('Сверка скидок на странице Подтверждение со скидками на странице PQ в срм'):
        assert discounts_confirmation_page == discounts_in_pq_crm, \
            f'Скидки на странице Подтверждение - ({discounts_confirmation_page}) не равны скидкам на странице PQ в CRM - ' \
            f'({discounts_in_pq_crm})'

    total_price_confirmation_page = page.store_total_cost_on_the_confirmation_page()
    with allure.step('Сверка итоговой стоимости на странице Подтверждение с итоговой стоимостью на странице PQ в срм'):
        assert total_price_confirmation_page - total_price_crm < 2, \
            f'Итоговая стоимость на странице Подтверждение - ({total_price_confirmation_page}) не равна стоимости на ' \
            f'странице PQ в crm - ({total_price_crm})'

    page.input_comment()
    page.save_to_excel(created_num_pq)
    page.click_button_confirm()
    page.dkp_link_open_check()
    page.click_on_the_button_to_return_to_pq()

    # Страница Проектное условие
    page = DesignConditionPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.waiting_to_create_invoices()
    page.click_printing_forms()
    page.checking_export_to_excel_download(created_num_pq)
    page.click_printing_forms()
    page.checking_commercial_offer_ridan_download()

    amount_of_orders_created = page.saving_the_amount_in_created_orders()
    with allure.step('Проверка, что сумма созданных заказов на странице Проектное условие в Опене соответствует '
                     'итоговой стоимости на странице Подтверждение'):
        assert abs(amount_of_orders_created - total_price_confirmation_page) < 2, \
            f'Сумма созданных заказов - ({amount_of_orders_created}) не равна стоимости на странице Подтверждение - ' \
            f'({total_price_confirmation_page})'

    page.go_to_order(1)

    # Страница Детали заказа
    page = OrderDetails(browser, TestEnvironment.LINK_OPEN_TST)
    page.data_display_check()
    page.payment_condition_must_be_advance_payment()
    num_order = page.store_num_order()
    print(num_order, 'Номер заказа')
    price_order = page.store_price_order()
    discounts_order = page.sve_all_discounts()
    page.checking_printing_forms_download(num_order)
    page.check_delivery_method(type_delivery)

    browser.switch_to.window(window_search_pq_crm)

    # Страница поиска заказа в crm
    page = SearchPq(browser, TestEnvironment.LINK_SEARCH_PQ_TST)
    page.search_order(num_order)
    page.go_to_order(num_order)

    #  Страница заказа
    page = PqPage(browser, TestEnvironment.LINK_CRM_TST)
    page.payment_condition_must_be_advance_payment()
    page.delivery_conditions_must_be_delivery_to_the_specified_address()
    price_order_crm = page.store_price_crm_order()
    with allure.step(
            'Сверка стоимости заказа на странице заказа в срм со стоимостью на странице Детали заказа в Опене'):
        assert price_order_crm == float(price_order), \
            f'Стоимость - ({price_order_crm}) заказа {num_order} на странице Заказа в crm не равна стоимости - ' \
            f'({price_order}) заказа - ({num_order}) на странице Детали заказа в Опене'

    all_discounts_crm_order = page.store_all_discounts()
    with allure.step(
            'Сверка скидок в заказе на странице заказа в срм со скидками на странице Детали заказа в Опене'):
        assert all_discounts_crm_order == discounts_order, \
            f'Скидки - {all_discounts_crm_order}) на странице заказа {num_order} в crm не соответствуют скидкам - ' \
            f'{discounts_order} заказа {num_order} на странице Детали заказа в Опене'
