import allure
import pytest

from config import TestEnvironment
from open_pages.cart_page.cart_page import CartPage
from open_pages.header.header_page import Header
from open_pages.main_page.main_page import MainPage
from open_pages.order_details_page.order_details_page import OrderDetails, ModalWindowCancelOrder
from open_pages.standart_order_page.standart_order_page import StandardOrderPage

ARTICLE = ['065B8207R 10']
ADDRESS_PICKUP = 'Московская обл., Истра, деревня Лешково, д 217'


@allure.feature('Создание заказа из корзины')
@allure.story('Самовывоз. Материалы. Стандартный заказ - Предоплата')
@pytest.mark.xdist_group(name="open")
@pytest.mark.parametrize('article', ['003L0144 10'])
@pytest.mark.stage
def test_23950_creation_kp(browser, article):
    """Создание КП самовывоз"""
    article_list = article.split(' ')[::2]

    # Действия на Главной странице
    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.open()
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_VODOKOMFORT, TestEnvironment.PASSWORD_TST_VODOKOMFORT)

    # Переход в Корзину
    page = Header(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_basket()

    # Действия в корзине
    page = CartPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_empty_trash()
    page.choice_of_client_number()

    page.type_product_in_input(article)
    page.click_add_button()
    page.checking_adding_items_to_cart(article_list)
    price_cart = page.store_price()
    page.click_continue_button()

    # Действия на странице Подтверждение
    page = StandardOrderPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.should_h1_standard_order()
    price_confirmation = page.store_price_confirmation()
    # print(price_confirmation, 'price_confirmation---')
    page.should_be_equal_prices(price_cart, price_confirmation)
    page.choice_of_payment_terms_prepayment()
    comment = 'ТЕСТИРОВАНИЕ ПРОДА!!!\ntest_selenium_web_ui'
    page.type_comment(comment)
    page.choice_of_delivery_method_pickup()
    page.should_be_the_default_address(ADDRESS_PICKUP)
    page.click_confirmation_button()
    # num_pq = page.modal_window_order_place_store_pq_1()
    # print(num_pq)
    page.click_num_pq_on_order_placed_page()

    # Страница Детали заказа
    page = OrderDetails(browser, TestEnvironment.LINK_OPEN_TST)
    page.waiting_for_account_creation()
    page.data_display_check()
    price_order = page.store_price_order()

    num_order = page.store_num_order()
    print(num_order, 'Номер заказа')
    page.checking_printing_forms_download(num_order)

    # Отмена заказа
    page.click_order_cancellation()

    page = ModalWindowCancelOrder(browser, TestEnvironment.LINK_OPEN_TST)

    price_modal_cancel_order = page.save_price_in_modal_cancel_order()
    with allure.step('Проверка равенства суммы заказа в модалке Отмена заказа с суммой заказа на странице заказа'):
        assert abs(price_modal_cancel_order - float(price_order)) < 1, \
            f'Сумма заказа - ({price_modal_cancel_order}) в модалке Отмена заказа не соответствует сумме заказа на ' \
            f'странице заказа - ({float(price_order)})'

    page.click_send_request_in_modal_cancel_order()
    page.there_should_be_a_message_about_the_need_to_choose_a_reason()
    page.click_on_the_drop_down_list_of_reasons()
    page.choice_of_reason_placement_error()
    page.entering_a_comment()
    page.click_send_request_in_modal_cancel_order()
    page.status_must_be_registered_in_json()
    num_request = page.saving_request_number_in_json()
    page.click_btn_close_in_modal_cancel_order(num_order)

    page = OrderDetails(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_button_position_history()

    date_in_modal_position_history = page.saving_date_in_position_history_modal()

    with allure.step('Проверка, что дата в модалке История позиций не пустая '):
        assert date_in_modal_position_history != '', \
            f'Строка Дата в модалке История позиций пустая - ({date_in_modal_position_history})'

    status_in_modal_position_history = page.saving_status_in_position_history_modal()

    with allure.step('Проверка, что Статус в модалке История позиций не пустой'):
        assert status_in_modal_position_history != '', \
            f'Строка Статус в модалке История позиций пустая - ({status_in_modal_position_history})'

    page.close_modal_position_history()

    page.click_btn_show_request_history()
    page.click_btn_list_request()
    num_request_in_modal_list_request = page.save_num_request_in_modal_list_requests()

    with allure.step('Проверка соответствия номера запроса отмены заказа в модалке Отмена заказа номеру в модалке '
                     'Список запросов'):
        assert num_request_in_modal_list_request == num_request, \
            f'Номер запроса на отмену заказа - ({num_request_in_modal_list_request}) в модалке Список запросов ' \
            f'не соответствует номеру запроса в модалке Отмена заказа - ({num_request})'
