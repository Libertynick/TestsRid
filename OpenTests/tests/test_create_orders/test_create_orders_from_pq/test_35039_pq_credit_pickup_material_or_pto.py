import allure
import pytest

from config import TestEnvironment

from crm_pages.modal_new_kp.modal_new_kp import ModalNewKp
from crm_pages.object_page.object_page import ObjectPage, KpTab
from crm_pages.pq_page.pq_page import PqPage
from crm_pages.search_pq_page.search_pq_page import SearchPq

from open_pages.confirmation_page.confirmation_page import ConfirmationPage
from open_pages.design_condition_page.design_condition_page import DesignConditionPage
from open_pages.header.profile_menu_user import ProfileMenuUser
from open_pages.main_page.main_page import MainPage
from open_pages.my_design_conditions_page.my_design_conditions_page import MyDesignConditionsPage
from open_pages.order_details_page.order_details_page import OrderDetails


@allure.feature('Создание заказа из PQ')
@allure.story('Кредитные условия. Материалы. Самовывоз')
@pytest.mark.parametrize('article', ['003L0145 10 065B3050  10'])
@pytest.mark.stage
def test_35039_pq_credit_pickup_material_or_pto(
        browser,
        article,
        auth_crm_extru_start,
        agreement_on_all_conditions_extru,
        auth_extru_crm_from_authorized_page
):
    """Заказ из pq на кредитные условия, самовывоз"""
    total_payment_before_shipment = '60%'  # Суммарная оплата перед отгрузкой
    advance_payment_for_placing_an_order = '60%'  # Размер аванса для размещения заказа
    object_tst = TestEnvironment.LINK_OBJECT_IN_TST

    auth_crm_extru_start()

    # Страница Объекта
    page = ObjectPage(browser, object_tst)
    page.open()
    page.click_add_kp()

    # Модалка создания КП
    page = ModalNewKp(browser, TestEnvironment.LINK_CRM_TST)
    page.choice_distributor(TestEnvironment.DISTRIBUTOR_VODOKOMFORT_TST)
    page.choice_sap_code_main_contract()
    page.choice_final_buyer()
    # pdb.set_trace()
    page.expanding_payment_terms_menu()
    page.click_on_button_agree_on_payment_terms()
    page.choice_of_total_payment_before_shipment(total_payment_before_shipment)
    page.choice_of_advance_payment_amount_for_placement(advance_payment_for_placing_an_order)

    # процент за кредит до добавления кодов
    interest_on_loan_before_adding_codes = page.saving_interest_on_a_loan()
    # print(interest_on_loan_before_adding_codes, 'Процент за кредит до добавления кодов')

    # процент за конвертацию до добавления кодов
    percentage_for_conversion_before_adding_codes = page.saving_percentage_for_conversion()
    # print(percentage_for_conversion_before_adding_codes, 'Процент за конвертацию до добавления кодов')

    #  общая надбавка до добавления кодов
    total_surcharge_before_adding_codes = page.allowance_calculation(
        interest_on_loan_before_adding_codes, percentage_for_conversion_before_adding_codes)
    # print(total_surcharge_before_adding_codes, 'Общая надбавка до добавления кодов')

    #  продолжительность кредитования до добавления кодов
    lending_duration_before_adding_codes = page.saving_loan_duration()
    # print(lending_duration_before_adding_codes, 'Продолжительность кредитования до добавления кодов')

    # оплата перед отгрузкой до добавления кодов
    payment_before_shipment_before_adding_codes = page.saving_total_payment_before_shipment()
    # print(payment_before_shipment_before_adding_codes, 'Оплата перед отгрузкой до добавления кодов')

    page.adding_codes(article)
    total_amount_crm_before_save = page.store_amount_nds_total_in_kp_crm_rub()
    # print(total_amount_crm_before_save, 'Стоимость в crm до сохранения')
    all_discount_crm_before_save = page.store_all_discount()
    # print(all_discount_crm_before_save, 'Скидки в crm до сохранения')

    # процент за кредит после добавления кодов
    interest_on_loan_after_adding_codes = page.saving_interest_on_a_loan()
    # print(interest_on_loan_after_adding_codes, 'Процент за кредит после добавления кодов')
    assert interest_on_loan_after_adding_codes == interest_on_loan_before_adding_codes, \
        f'процент за кредит после добавления кодов - ({interest_on_loan_after_adding_codes}) ' \
        f'не равен процент за кредит до добавления кодов - ({interest_on_loan_before_adding_codes})'

    # процент за конвертацию после добавления кодов
    percentage_for_conversion_after_adding_codes = page.saving_percentage_for_conversion()
    # print(percentage_for_conversion_after_adding_codes, 'Процент за конвертацию после добавления кодов')
    assert percentage_for_conversion_after_adding_codes == percentage_for_conversion_before_adding_codes, \
        f'процент за конвертацию после добавления кодов - ({percentage_for_conversion_after_adding_codes}) не равен ' \
        f'проценту за конвертацию до добавления кодов - ({percentage_for_conversion_before_adding_codes})'

    # продолжительность кредитования после добавления кодов
    lending_duration_after_adding_codes = page.saving_loan_duration()
    # print(lending_duration_after_adding_codes, 'Продолжительность кредитования после добавления кодов')
    assert lending_duration_after_adding_codes == lending_duration_before_adding_codes, \
        f'продолжительность кредитования после добавления кодов - ({lending_duration_after_adding_codes}) не равна ' \
        f'продолжительности кредитования до добавления кодов - ({lending_duration_before_adding_codes})'

    # оплата перед отгрузкой после добавления кодов
    payment_before_shipment_after_adding_codes = page.saving_total_payment_before_shipment()
    # print(payment_before_shipment_after_adding_codes, 'Оплата перед отгрузкой после добавления кодов')
    assert payment_before_shipment_after_adding_codes == payment_before_shipment_after_adding_codes, \
        f'оплата перед отгрузкой после добавления кодов - ({payment_before_shipment_after_adding_codes}) не равна ' \
        f'оплата перед отгрузкой до добавления кодов - ({payment_before_shipment_before_adding_codes})'

    allowance_before_save = page.save_all_allowance()
    # print(allowance_before_save, 'Надбавки до сохранения')

    for allowance in allowance_before_save:
        assert float(total_surcharge_before_adding_codes) == float(allowance), \
            f'Надбавка по сумме полей (Процент за кредит) и (Процент за конвертацию) - ' \
            f'({total_surcharge_before_adding_codes}) не равна надбавке на линиях артикулов - ({allowance})'

    page.click_btn_save_pq()
    advance_payment_for_placing_an_order_after_save = page.saving_advance_payment_for_placing_an_order()
    # print(advance_payment_for_placing_an_order_after_save, 'Размер аванса для размещения заказа')

    assert advance_payment_for_placing_an_order_after_save == advance_payment_for_placing_an_order, \
        f'Размер аванса для размещения заказа ПОСЛЕ СОХРАНЕНИЯ - ({advance_payment_for_placing_an_order_after_save}) ' \
        f'не равен введенному авансу для размещения заказа ПРИ СОЗДАНИИ КП - ({advance_payment_for_placing_an_order})'

    total_payment_before_shipment_after_save = page.saving_total_payment_before_shipment()
    # print(total_payment_before_shipment_after_save, 'Суммарная оплата перед отгрузкой после сохранения КП')

    assert total_payment_before_shipment_after_save == total_payment_before_shipment, \
        f'Суммарная оплата перед отгрузкой ПОСЛЕ СОХРАНЕНИЯ КП - ({total_payment_before_shipment_after_save}) ' \
        f'не равна суммарной оплате перед отгрузкой ПРИ СОЗДАНИИ КП - ({total_payment_before_shipment})'

    loan_duration_after_save = page.saving_loan_duration()
    # print(loan_duration_after_save, 'Продолжительность кредитования после сохранения')

    interest_on_a_loan_after_save = page.saving_interest_on_a_loan()
    print(interest_on_a_loan_after_save, 'Процент за кредит после сохранения')

    percentage_for_conversion_after_save = page.saving_percentage_for_conversion()
    print(percentage_for_conversion_after_save, 'Процент за конвертацию')

    allowance_after_save = page.save_all_allowance()
    # print(allowance_after_save, 'Надбавки после сохранения')
    assert allowance_after_save == allowance_before_save, \
        f'Надбавки после сохранения - ({allowance_after_save}) не равны Надбавкам до сохранения - ' \
        f'({allowance_before_save})'

    num_pq = page.store_num_pq_in_title()
    print(num_pq)
    payment_terms_code_in_modal_new_pq = page.save_payment_terms_code()
    # print(payment_terms_code_in_modal_new_pq, 'Код условий оплаты на странице Модалка создания PQ')
    page.send_for_approval_from_modal_new_kp()
    page.modal_kp_has_not_been_pre_screened()
    page.click_on_the_button_create_kp_without_request()

    # Переход на вкладку КП -> Переход на страницу PQ по номеру PQ
    page = ObjectPage(browser, TestEnvironment.LINK_CRM_TST)
    page.go_to_chapter_kp()
    page = KpTab(browser, TestEnvironment.LINK_CRM_TST)
    page.opening_pq_in_a_new_tab_by_number(num_pq)

    # Страница PQ
    page = PqPage(browser, TestEnvironment.LINK_CRM_TST)
    page.switching_on_tumbler_show_discount_column_if_off()

    agreement_on_all_conditions_extru()

    pq_url = browser.current_url

    # Смена на Левона
    auth_extru_crm_from_authorized_page(url_page=pq_url)

    # Сохранение итоговой суммы после согласования и сравнение с суммой до согласования
    page = PqPage(browser, TestEnvironment.LINK_CRM_TST)
    final_amount_after_agreement = page.saving_the_final_amount_rub_after_agreement()
    assert abs(final_amount_after_agreement - total_amount_crm_before_save) < 1, \
        f'Сумма в PQ после согласования ({final_amount_after_agreement}) не равна сумме до согласования ' \
        f'({total_amount_crm_before_save})'
    # print(final_amount_after_agreement, 'Итоговая сумма КП в crm после согласования')

    all_discounts_after_agreement = page.store_all_discounts()
    # print(all_discounts_after_agreement, 'Скидки в crm после согласования')

    assert all_discounts_after_agreement == all_discount_crm_before_save, \
        f'Скидок после согласования - ({all_discounts_after_agreement}) ' \
        f'не равны скидкам до сохранения - ({all_discount_crm_before_save})'

    total_payment_before_shipment_pq_page = page.saving_total_payment_before_shipment()
    # print(total_payment_before_shipment_pq_page, 'Суммарная оплата перед отгрузкой на странице КП после согласования')

    assert total_payment_before_shipment_pq_page == total_payment_before_shipment_after_save, \
        f'Суммарная оплата перед отгрузкой на странице КП после согласования - ({total_payment_before_shipment_pq_page})' \
        f'не равна Суммарной оплата перед отгрузкой после сохранения - ({total_payment_before_shipment_after_save})'

    advance_payment_for_placing_an_order_pq_page = page.saving_advance_payment_for_placing_an_order()
    # print(advance_payment_for_placing_an_order_pq_page,
    #       'Размер аванса для размещения заказа на странице КП после согласования')

    assert advance_payment_for_placing_an_order_pq_page == advance_payment_for_placing_an_order_after_save, \
        f'Размер аванса для размещения заказа на странице КП после согласования - ({advance_payment_for_placing_an_order_pq_page})' \
        f'не равен Размеру аванса для размещения заказа после сохранения - ({advance_payment_for_placing_an_order_after_save})'

    loan_duration_pq_page = page.saving_loan_duration()
    # print(loan_duration_pq_page, 'Продолжительность кредитования на странице КП после согласования')

    assert loan_duration_pq_page == loan_duration_after_save, \
        f'Продолжительность кредитования на странице КП после согласования - ({loan_duration_pq_page})' \
        f'не равна Продолжительности кредитования после сохранения - ({loan_duration_after_save})'

    surcharges_on_all_lines_pq_page = page.saving_surcharges_on_all_article_lines()
    # print(surcharges_on_all_lines_pq_page, 'Надбавки на всех линиях на странице КП')

    assert surcharges_on_all_lines_pq_page == allowance_after_save, \
        f'Надбавки на странице КП после согласования - ({surcharges_on_all_lines_pq_page}) не равны надбавкам после ' \
        f'сохранения КП - ({allowance_after_save})'

    page = ModalNewKp(browser, TestEnvironment.LINK_CRM_TST)
    payment_terms_code_in_pq_page = page.save_payment_terms_code()
    # print(payment_terms_code_in_pq_page, 'Код условий оплаты на странице Модалка создания PQ')
    assert payment_terms_code_in_pq_page == payment_terms_code_in_modal_new_pq, \
        f'Код условий оплаты на странице PQ не соответствует коду условий оплаты на странице модалка создания PQ - ' \
        f'({payment_terms_code_in_modal_new_pq})'

    # Переход в Опен

    browser.execute_script("window.open(arguments[0])", TestEnvironment.LINK_OPEN_TST)
    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.switching_window(-1)
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_VODOKOMFORT, TestEnvironment.PASSWORD_TST_VODOKOMFORT)

    # Переход в Мои проектные условия
    page = ProfileMenuUser(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_profile()
    page.go_to_design_conditions()

    page = MyDesignConditionsPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.search_for_pq_and_switch_to_it(num_pq)

    # Страница Проектное условие
    page = DesignConditionPage(browser, TestEnvironment.LINK_OPEN_TST)

    # Сохранение итоговой стоимости и проверка на равенство с суммой на странице в crm после согласования
    total_cost_on_the_design_condition_page = page.saving_the_final_cost_rub_on_the_design_condition_page()
    # print(total_cost_on_the_design_condition_page, 'Итоговая стоимость на странице Проектное условие')
    assert total_cost_on_the_design_condition_page == final_amount_after_agreement, \
        f'Итоговая сумма на странице Проектное условие ({total_cost_on_the_design_condition_page})' \
        f'не равна итоговой сумме после согласования в crm ({final_amount_after_agreement})'

    #  Сохранение и Проверка равенства скидок в crm и на странице Проектное условие
    all_discounts_on_the_design_condition_page = page.store_all_discounts_on_the_design_condition_page()
    # print(all_discounts_on_the_design_condition_page, 'скидки на странице Проектное условие')
    set_all_discounts_on_the_design_condition_page = set(all_discounts_on_the_design_condition_page)
    set_all_discount_in_crm = set(all_discounts_after_agreement)
    assert set_all_discounts_on_the_design_condition_page == set_all_discount_in_crm, \
        f'Скидки в crm ({set_all_discount_in_crm}) не равны скидкам на странице ' \
        f'Проектное условие ({set_all_discounts_on_the_design_condition_page})'

    # Сохранение и проверка равенства надбавок
    allowances_on_the_page_design_condition = page.saving_of_allowances_on_all_lines_of_articles()
    # print(allowances_on_the_page_design_condition, 'Надбавки на странице Проектное условие')
    assert allowances_on_the_page_design_condition == surcharges_on_all_lines_pq_page, \
        f'Надбавки на странице Проектное условие - ({allowances_on_the_page_design_condition}) не равны надбавкам' \
        f'на странице КП после согласования - ({surcharges_on_all_lines_pq_page})'

    # Сохранение условий оплаты и проверка на равенство с условиями из crm
    payment_terms_design_condition = page.save_payment_terms()
    assert payment_terms_design_condition in payment_terms_code_in_pq_page, \
        f'Условия оплаты на странице Проектное условие в Опен - ({payment_terms_design_condition}) не соответствуют ' \
        f'условиям оплаты на странице PQ в crm - ({payment_terms_code_in_pq_page})'

    page.availability_display_check()
    page.click_button_order()

    # Страница Подтверждение
    page = ConfirmationPage(browser, TestEnvironment.LINK_OPEN_TST)
    all_discounts_confirmation_page = page.store_all_discounts_on_the_confirmation_page()
    # print(all_discounts_confirmation_page, 'Скидки на странице Проектный заказ')

    set_all_discounts_confirmation_page = set(all_discounts_confirmation_page)
    assert set_all_discounts_confirmation_page == set_all_discounts_on_the_design_condition_page, \
        f'Скидки на странице Подтверждение ({set_all_discounts_confirmation_page}) не равны' \
        f'скидкам на странице Проектное условие ({set_all_discounts_on_the_design_condition_page})'

    total_cost_on_the_confirmation_page = page.store_total_cost_on_the_confirmation_page()
    total_cost_on_the_confirmation_page = int(total_cost_on_the_confirmation_page)
    total_cost_on_the_design_condition_page = int(total_cost_on_the_design_condition_page)
    # print(total_cost_on_the_confirmation_page, 'Итоговая стоимость на странице Подтверждение')

    assert abs(total_cost_on_the_confirmation_page - total_cost_on_the_design_condition_page) < 2, \
        f'Стоимость на странице Подтверждение ({total_cost_on_the_confirmation_page}) не равна' \
        f'стоимости на странице Проектное условие ({total_cost_on_the_design_condition_page})'

    all_allowance_on_the_confirmation_page = page.store_all_allowance()
    # print(all_allowance_on_the_confirmation_page, 'Надбавки на странице Подтверждение')

    assert all_allowance_on_the_confirmation_page == allowances_on_the_page_design_condition, \
        f'Надбавки на странице Подтверждение - ({all_allowance_on_the_confirmation_page}) не соответствуют ' \
        f'надбавкам на странице Проектное условие - ({allowances_on_the_page_design_condition})'

    page.clickability_check_shipment_only_when_fully_assembled()
    page.check_box_shipment_only_when_fully_assembled_must_not_be_selected()
    page.checking_the_address_of_the_warehouse_during_self_delivery_materials()

    terms_of_payment_on_the_confirmation_page = page.store_terms_of_payment()
    # print(terms_of_payment_on_the_confirmation_page, 'Условия оплаты на странице Подтверждение')
    assert terms_of_payment_on_the_confirmation_page == payment_terms_design_condition, \
        f'Условия оплаты на странице Подтверждение - ({terms_of_payment_on_the_confirmation_page}) не соответствуют ' \
        f'условиям оплаты на странице Проектное условие - ({payment_terms_design_condition}) '

    page.materials_must_be_self_pickup()
    page.input_comment()
    page.save_to_excel(num_pq)
    page.click_button_confirm()
    page.dkp_link_open_check()
    page.click_on_the_button_to_return_to_pq()

    page = DesignConditionPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.waiting_to_create_invoices()
    amount_in_created_orders = page.saving_the_amount_in_created_orders()
    # print(amount_in_created_orders, 'Суммарная стоимость в созданных заказах')

    cost_difference = abs(final_amount_after_agreement - amount_in_created_orders)
    assert cost_difference < 1, \
        f'Разница между стоимостью в CRM после согласования - ({final_amount_after_agreement}) и стоимостью в ' \
        f'созданном заказе - ({amount_in_created_orders}) больше 1'

    page.go_to_order(1)

    # Страница Детали заказа
    page = OrderDetails(browser, TestEnvironment.LINK_OPEN_TST)
    page.data_display_check()

    all_allowances_in_order = page.saving_surcharges_in_the_order()
    # print(all_allowances_in_order, 'Надбавки на странице заказа')

    assert all_allowances_in_order == surcharges_on_all_lines_pq_page, \
        f'Надбавки на странице Заказа - ({all_allowances_in_order}) не равны надбавкам ' \
        f'на странице PQ в crm - ({surcharges_on_all_lines_pq_page})'

    terms_of_payment_in_order = page.save_terms_of_payment_in_order_page()
    # print(terms_of_payment_in_order, 'Условия оплаты на странице Заказа')
    assert terms_of_payment_in_order == terms_of_payment_on_the_confirmation_page, \
        f'Условия оплаты на странице Подтверждение - ({terms_of_payment_on_the_confirmation_page})' \
        f'не равны условиям оплаты на странице Заказа - ({terms_of_payment_in_order})'

    price_in_order_page = page.store_price_order()
    num_order = page.store_num_order()
    print(f'{num_order} - номер заказа')
    # print(price_in_order_page, f'Стоимость заказа {num_order} в деталях заказа в Опене')

    page.checking_printing_forms_download(num_order)

    # Открытие страницы поиска заказа в crm
    browser.execute_script("window.open(arguments[0])", TestEnvironment.LINK_SEARCH_PQ_TST)
    page.switching_window(-1)
    page = SearchPq(browser, TestEnvironment.LINK_SEARCH_PQ_TST)
    page.search_order(num_order)
    page.go_to_order(num_order)

    page = PqPage(browser, TestEnvironment.LINK_CRM_TST)

    total_payment_before_shipment_dkp_crm = page.saving_total_payment_before_shipment()
    # print(total_payment_before_shipment_dkp_crm, 'Суммарная оплата перед отгрузкой ДКП')
    assert total_payment_before_shipment_dkp_crm == total_payment_before_shipment, \
        f'Суммарная оплата перед отгрузкой ДКП crm - ({total_payment_before_shipment_dkp_crm}) не равна выбранной суммарной оплате' \
        f'перед отгрузкой при создании КП - ({total_payment_before_shipment})'

    advance_payment_for_placing_an_order_dkp_crm = page.saving_advance_payment_for_placing_an_order()
    # print(advance_payment_for_placing_an_order_dkp_crm, 'Размер аванса для размещения заказа в ДКП')
    assert advance_payment_for_placing_an_order_dkp_crm == advance_payment_for_placing_an_order, \
        f'Размер аванса для размещения заказа в ДКП crm - ({advance_payment_for_placing_an_order_dkp_crm}) не равен' \
        f'выбранному авансу для размещения заказа при создании КП - ({advance_payment_for_placing_an_order})'

    loan_duration_dkp_crm = page.saving_loan_duration()
    # print(loan_duration_dkp_crm, 'Продолжительность кредитования в ДКП')
    assert loan_duration_dkp_crm == loan_duration_pq_page, \
        f'Продолжительность кредитования в ДКП crm - ({loan_duration_dkp_crm}) не равна ' \
        f'Продолжительности кредитования на странице PQ после согласования - ({loan_duration_pq_page})'

    allowance_dkp_crm = page.saving_surcharges_on_all_article_lines()
    # print(allowance_dkp_crm, 'Надбавки в ДКП')
    assert allowance_dkp_crm == all_allowances_in_order, \
        f'Надбавки в ДКП crm - ({allowance_dkp_crm}) не равны надбавкам на странице Заказа в Опене - ' \
        f'({all_allowances_in_order})'

    price_order_crm = page.store_price_crm_order()
    # print(price_order_crm, 'Стоимость созданного (ДКП) заказа в CRM')
    page.verify_price_crm_with_price_open(price_order_crm, float(price_in_order_page))
