import allure
import pytest

from base_page.base_page import BasePageCrm
from config import TestEnvironment
from crm_pages.assortments_page.assortments_page import AssortmentsPage, ModalEdit
from crm_pages.header_page.header_page import HeaderPage
from crm_pages.modal_new_kp.modal_new_kp import ModalNewKp
from crm_pages.object_page.object_page import ObjectPage
from crm_pages.search_objects_page.search_object_page import SearchObjectPage

articles_list = ['082X9014', '060G1791', '082X4060R', '082X4050R']

url_assortments = TestEnvironment.LINK_ASSORTMENTS_PAGE_CRM
login_crm = TestEnvironment.LOGIN_CRM
password_crm = TestEnvironment.PASSWORD_CRM_TST
object_tst = TestEnvironment.OBJECT_TST
distributor_vodokomfort = TestEnvironment.DISTRIBUTOR_VODOKOMFORT_TST

date_curse_cb = '01.01.2018'  # дата курса Центрального Банка
discount_value_to_enter = 50.0  # Значение скидки для ввода
number_of_codes_to_increase = 10  # количество кодов для увеличения
terms_of_payment = 'Предоплата 50%, 60 дней кредит (0% за кредит, 0% за конвертацию)'  # Условия оплаты

total_payment_before_shipment = '75%'  # Суммарная оплата перед отгрузкой
advance_payment_for_placing_an_order = '32%'  # Размер аванса для размещения заказа
days_of_lending = '222'  # Количество дней кредитования
interest_on_loan = '2'  # Процент за кредит
percentage_for_conversion = '4'  # процент за конвертацию

url_crm = TestEnvironment.LINK_CRM_TST


def checking_cost_without_nds_code_in_ye(browser, article: str, price_code_base_cu: float,
                                         price_one_joke_without_nds_article: float):
    """Проверка стоимости без НДС кода в уе
    price_code_base_cu - базовая стоимость в уе в ассортименте
    price_one_joke_without_nds_article - цена за штуку без ндс на странице
    """
    page = ModalNewKp(browser, url_crm)

    curse_cu_article = page.saving_current_course_in_kp_by_article(article)
    # print(curse_cu_article, f'Внутренний курс кода {article}')
    true_price_one_joke_without_nds_article = page.calculation_of_cost_in_rubles_at_internal_rate_cu(
        curse_cu_article, price_code_base_cu
    )
    # print(true_price_one_joke_without_nds_article, f'Ожидаемая стоимость без НДС артикула {article}')
    # print()
    assert true_price_one_joke_without_nds_article == price_one_joke_without_nds_article, \
        f'Ожидаемая стоимость - ({true_price_one_joke_without_nds_article}) без НДС артикула {article} не ' \
        f'соответствует стоимости без НДС - ({price_one_joke_without_nds_article}) при создании КП артикула ' \
        f'{article}'


def checking_cost_without_nds_code_in_rub(article: str, price_code_base_rub: float,
                                          price_one_joke_without_nds_article: float):
    """Проверка стоимости без НДС кода в рублях
        price_code_base_rub - базовая стоимость в rub в ассортименте
        price_one_joke_without_nds_article - цена за штуку без ндс на странице
    """
    assert price_code_base_rub == price_one_joke_without_nds_article, \
        f'Стоимость в ассортименте в рублях - ({price_code_base_rub}) кода {article} не соответствует стоимости без ' \
        f'НДС на странице создания КП - ({price_one_joke_without_nds_article})'


def checking_cost_of_codes_with_nds_from_client(
        browser, article: str, price_one_joke_without_nds_article: float, discount_client=0.0):
    """Проверка стоимости кодов с НДС, колонка Клиент
    price_one_joke_without_nds_article - цена за штуку без НДС
    """
    page = ModalNewKp(browser, url_crm)
    amount_with_nds_at_the_client_article = page.save_amount_with_nds_at_the_client_by_article(article)
    # print(amount_with_nds_at_the_client_article, f'Сумма с НДС у клиента артикула {article}')

    count_code_article = page.saving_number_of_pieces_of_code(article)
    true_amount_with_nds = page.calculation_of_amount_with_nds_client(
        price_one_joke_without_nds_article, count_code_article, discount_client)
    # print(true_amount_with_nds, f'Стоимость с НДС, которая должна быть у кода {article}')
    # print()
    assert abs(amount_with_nds_at_the_client_article - true_amount_with_nds) < 0.5, \
        f'Сумма с НДС у Клиента - ({amount_with_nds_at_the_client_article}) на странице у кода {article} не ' \
        f'соответствует ожидаемой сумме - ({true_amount_with_nds})'


def checking_price_with_nds_of_distributor(browser, article: str):
    """Проверка стоимости c НДС Дистрибьютора"""
    page = ModalNewKp(browser, url_crm)

    amount_without_nds_by_article = page.save_price_one_joke_without_nds(article)
    # print(amount_without_nds_by_article, f'Сумма с НДС у клиента артикула {article} -=-=-=-=')
    amount_with_nds_distributor_article_on_page = page.save_amount_with_nds_distributor_by_article(article)
    # print(amount_with_nds_distributor_article_on_page, f'Сумма с НДС дистрибьютора на странице артикула {article}')
    count_code_article = page.saving_number_of_pieces_of_code(article)
    discount_article = page.save_discount_distributor_by_article(article)
    # print(discount_article_1, f'Скидка кода {article} -==-=--=-')
    true_amount_with_nds_distributor_article = page.calculation_amount_with_nds_distributor(
        article, amount_without_nds_by_article, discount_article, count_code_article)
    # print(true_amount_with_nds_distributor_article, f'Ожидаемая стоимость с НДС кода {article} \n')
    assert abs(amount_with_nds_distributor_article_on_page - true_amount_with_nds_distributor_article) < 0.5, \
        f'Стоимость с НДС дистрибьютора ({amount_with_nds_distributor_article_on_page}) на странице кода ' \
        f'{article} не соответствует ожидаемой стоимости с НДС дистра - ' \
        f'({true_amount_with_nds_distributor_article})'


def checking_final_cost_of_distributor(browser):
    """Проверка итоговой стоимости Дистрибьютора"""
    page = ModalNewKp(browser, url_crm)

    total_cost_distributor = page.store_amount_nds_total_in_kp_crm_rub()
    # print(total_cost_distributor, 'Итоговая стоимость  дистрибьютора')
    total_cost_distributor_all_lines = page.save_sum_amount_with_nds_distributor_all_lines()
    # print(total_cost_distributor_all_lines, 'Сумма стоимости с НДС дистрибьютора на всех линиях \n')
    assert total_cost_distributor_all_lines == total_cost_distributor_all_lines, \
        f'Итоговая Стоимость дистрибьютора - ({total_cost_distributor}) не соответствует сумме стоимости с НДС ' \
        f'дистра - ({total_cost_distributor_all_lines}) на всех линиях'


def checking_cost_total_for_client(browser):
    """Проверка стоимости Итого у клиента"""
    page = ModalNewKp(browser, url_crm)

    total_cost_client = page.save_total_cost_client()
    # print(total_cost_client, 'Итоговая стоимость у клиента')
    total_sum_with_nds_all_lines_client = page.saving_total_amount_with_nds_all_lines_client()
    # print(total_sum_with_nds_all_lines_client, 'Общая сумма по всем линиям стоимости с НДС у клиента \n')
    assert abs(total_sum_with_nds_all_lines_client - total_cost_client) < 0.1, \
        f'Сумма стоимости с НДС у клиента по всем линиям - ({total_sum_with_nds_all_lines_client}) не соответствует ' \
        f'итоговой стоимости клиента - ({total_cost_client})'


def checking_cost_of_code_in_ye(browser, article: str, cost_price_base_cu: float,
                                exchange_rate_for_current_date: float):
    """Проверка себестоимости кода в уе
    cost_price_base_cu - базовая стоимость в уе в ассортименте
    exchange_rate_for_current_date - курс на текущую дату
    """
    page = ModalNewKp(browser, url_crm)

    cost_price_article = page.save_cost_price_by_article(article)

    # print(exchange_rate_for_current_date, 'курс на текущую дату')
    # print(cost_price_article, f'Себестоимость на странице артикула {article}')
    true_cost_price_rub_article = page.calculation_cost_price_rub(cost_price_base_cu, exchange_rate_for_current_date)
    # print(true_cost_price_rub_article, f'Ожидаемая Себестоимость уешного артикула {article} \n')

    assert abs(true_cost_price_rub_article - cost_price_article) < 2, \
        f'Себестоимость в рублях на странице - ({cost_price_article}) артикула {article} не соответствует ' \
        f'ожидаемой себестоимости в рублях - ({true_cost_price_rub_article})'


def checking_cost_code_without_converting_to_currency(browser, article: str, cost_price_base_rub: float):
    """Проверка себестоимости кода без пересчета на валюту
    cost_price_base_rub - базовая стоимость в рублях в ассортименте
    """
    page = ModalNewKp(browser, url_crm)

    cost_price_article = page.save_cost_price_by_article(article)
    # print(cost_price_article, f'Себестоимость на странице артикула {article}')
    # print(f'Ожидаемая себестоимость - ({cost_price_base_rub}) рублевого кода {article}')
    assert cost_price_base_rub == cost_price_article, \
        f'Себестоимость в рублях на странице - ({cost_price_article}) артикула {article} не соответствует ' \
        f'ожидаемой себестоимости в рублях - ({cost_price_base_rub})'


@allure.feature('Цены в КП')
@allure.story('Цены в КП (конвертация из прайса, скидки, наценки, себестоимость)')
@pytest.mark.parametrize('article', [articles_list])
@pytest.mark.stage
def test_38254_prices_in_cp_conversion_from_price_list_discounts_markups_cost(
        browser,
        article,
        auth_crm_extru_start,
        auth_extru_crm_from_authorized_page,
        agreement_on_all_conditions_extru
):
    """38254 Цены в КП (конвертация из прайса, скидки, наценки, себестоимость)"""

    article_1 = article[0]
    article_2 = article[1]
    article_3 = article[2]
    article_4 = article[3]

    page = AssortmentsPage(browser, url_assortments)

    auth_crm_extru_start(ruco=login_crm)

    page.open()

    page = AssortmentsPage(browser, url_assortments)
    #  Сохранение цен 1-ого артикула
    page.search_article(article_1)
    page.editing_folder_09_ridan_products(article_1)

    # Модалка редактирования
    page = ModalEdit(browser, url_assortments)
    if page.changing_estimated_cost_to_ye_if_it_is_in_rubles():
        page.click_btn_save()
        page = AssortmentsPage(browser, url_assortments)
        page.search_article(article_1)
        page.editing_folder_09_ridan_products(article_1)

    page = ModalEdit(browser, url_assortments)
    cost_price_base_cu_1 = page.save_cost_price()
    # print(cost_price_base_cu_1, f'Себестоимость в модалке редактирования кода в УЕ {article_1}')
    page.there_should_be_a_price_code_in_cu()
    price_code_base_cu_1 = page.save_price_code()
    # print(price_code_base_cu_1, f'Стоимость в модалке редактирования кода в УЕ {article_1}')
    # print()
    page.closing_editing_modal()

    #  Сохранение цен 2-ого артикула
    page = AssortmentsPage(browser, url_assortments)
    page.search_article(article_2)
    page.editing_folder_09_ridan_products(article_2)

    # Модалка редактирования
    page = ModalEdit(browser, url_assortments)
    page.there_should_be_a_cost_price_in_rub()
    cost_price_base_rub_2 = page.save_cost_price()
    # print(cost_price_base_rub_2, f'Себестоимость в модалке редактирования кода в рублях {article_2}')
    page.there_should_be_a_price_code_in_cu()
    price_code_base_cu_2 = page.save_price_code()
    # print(price_code_base_cu_2, f'Стоимость в модалке редактирования кода в УЕ {article_2}')
    # print()
    page.closing_editing_modal()

    # Сохранение цен 3-ого артикула

    page = AssortmentsPage(browser, url_assortments)
    page.search_article(article_3)
    page.editing_folder_09_ridan_products(article_3)

    # Модалка редактирования
    page = ModalEdit(browser, url_assortments)
    if page.changing_price_to_rubles_if_it_is_in_usd():
        page.click_btn_save()
        page = AssortmentsPage(browser, url_assortments)
        page.search_article(article_3)
        page.editing_folder_09_ridan_products(article_3)

    page = ModalEdit(browser, url_assortments)
    page.changing_estimated_cost_to_ye_if_it_is_in_rubles()
    page.click_btn_save()

    page = AssortmentsPage(browser, url_assortments)
    page.editing_folder_09_ridan_products(article_3)

    page = ModalEdit(browser, url_assortments)
    page.there_should_be_a_cost_price_in_cu()
    cost_price_base_cu_3 = page.save_cost_price()
    # print(cost_price_base_cu_3, f'Себестоимость в модалке редактирования кода в УЕ {article_3}')
    price_code_base_rub_3 = page.save_price_code()
    # print(price_code_base_rub_3, f'Стоимость в модалке редактирования кода в рублях {article_3}')
    # print()
    page.closing_editing_modal()

    # Сохранение цен 4-ого артикула

    page = AssortmentsPage(browser, url_assortments)
    page.search_article(article_4)
    page.editing_folder_09_ridan_products(article_4)

    # Модалка редактирования
    page = ModalEdit(browser, url_assortments)
    page.there_should_be_a_cost_price_in_rub()

    if page.changing_price_to_rubles_if_it_is_in_usd():
        page.click_btn_save()
        page = AssortmentsPage(browser, url_assortments)
        page.search_article(article_4)
        page.editing_folder_09_ridan_products(article_4)

    page = ModalEdit(browser, url_assortments)
    cost_price_base_rub_4 = page.save_cost_price()
    # print(cost_price_base_rub_4, f'Себестоимость в модалке редактирования кода в рублях {article_4}')
    price_code_base_rub_4 = page.save_price_code()
    # print(price_code_base_rub_4, f'Стоимость в модалке редактирования кода в рублях {article_4}')
    # print()
    page.closing_editing_modal()

    # Переход в создание КП

    page = BasePageCrm(browser, url_crm)
    page.open()

    # Переход на страницу поиска объектов.
    page = HeaderPage(browser, url_crm)
    page.go_to_object_page()

    page = SearchObjectPage(browser, url_crm)
    # Выбор офиса продаж
    page.selecting_a_sales_office()
    # поиск объекта
    page.search_object(object_tst)
    # Переход в объект
    page.go_to_object(object_tst)

    # Страница Объекта
    page = ObjectPage(browser, url_crm)
    page.click_add_kp()

    # Модалка создания КП
    page = ModalNewKp(browser, url_crm)
    page.choice_distributor(distributor_vodokomfort)
    page.choice_sap_code_main_contract()
    page.choice_final_buyer()
    page.there_must_be_an_advance_payment()

    # Ввод кодов
    articles_for_adding = [code + ' ' for code in article]
    page.adding_codes(articles_for_adding)

    # Проверка стоимости без НДС у всех кодов
    # Проверка стоимости без НДС 1-ого артикула в уе
    price_one_joke_without_nds_article_1 = page.save_price_one_joke_without_nds(article_1)
    # print(price_one_joke_without_nds_article_1, f'Стоимость за штуку без НДС артикула {article_1} при создании КП')
    checking_cost_without_nds_code_in_ye(browser, article_1, price_code_base_cu_1, price_one_joke_without_nds_article_1)

    # Проверка стоимости без НДС 2-ого артикула в уе
    price_one_joke_without_nds_article_2 = page.save_price_one_joke_without_nds(article_2)
    # print(price_one_joke_without_nds_article_2, f'Стоимость за штуку без НДС артикула {article_2} при создании КП')
    checking_cost_without_nds_code_in_ye(browser, article_2, price_code_base_cu_2, price_one_joke_without_nds_article_2)

    # Проверка стоимости без НДС 3-ого артикула в рублях
    curse_cu_article_3 = page.save_curse_cu_by_article_taking_into_account_promo(article_3)
    # print(curse_cu_article_3, f'Внутренний курс кода {article_3}')
    price_one_joke_without_nds_article_3 = page.save_price_one_joke_without_nds(article_3)
    # print(price_one_joke_without_nds_article_3, f'Стоимость за штуку без НДС артикула {article_3}')
    # print()
    checking_cost_without_nds_code_in_rub(article_3, price_code_base_rub_3, price_one_joke_without_nds_article_3)

    # Проверка стоимости без НДС 4-ого артикула в рублях
    price_one_joke_without_nds_article_4 = page.save_price_one_joke_without_nds(article_4)
    # print(price_one_joke_without_nds_article_4, f'Стоимость за штуку без НДС артикула {article_4}')
    curse_cu_article_4 = page.save_curse_cu_by_article_taking_into_account_promo(article_4)
    # print(curse_cu_article_4, f'Внутренний курс кода {article_4}')
    # print()
    checking_cost_without_nds_code_in_rub(article_4, price_code_base_rub_4, price_one_joke_without_nds_article_4)

    #  Проверка стоимости с НДС у всех кодов (колонка Клиент)
    # Код 1 - ый
    checking_cost_of_codes_with_nds_from_client(browser, article_1, price_one_joke_without_nds_article_1)
    # Проверка стоимости с НДС у всех кодов (колонка Клиент) Код 2 - ой
    checking_cost_of_codes_with_nds_from_client(browser, article_2, price_one_joke_without_nds_article_2)
    #  Проверка стоимости с НДС у всех кодов (колонка Клиент) Код 3 - ий
    checking_cost_of_codes_with_nds_from_client(browser, article_3, price_one_joke_without_nds_article_3)
    # Проверка стоимости с НДС у всех кодов (колонка Клиент) Код 4 - ий
    checking_cost_of_codes_with_nds_from_client(browser, article_4, price_one_joke_without_nds_article_4)
    # Проверка стоимости Итого у клиента
    checking_cost_total_for_client(browser)

    # Проверка стоимости c НДС Дистрибьютора
    # 1 - ый код
    checking_price_with_nds_of_distributor(browser, article_1)
    # Проверка стоимости c НДС Дистрибьютора 2 - ой код
    checking_price_with_nds_of_distributor(browser, article_2)
    # Проверка стоимости c НДС Дистрибьютора 3 - ий код
    checking_price_with_nds_of_distributor(browser, article_3)
    # Проверка стоимости c НДС Дистрибьютора 4 - ый код
    checking_price_with_nds_of_distributor(browser, article_4)
    # Проверка итоговой стоимости Дистрибьютора
    checking_final_cost_of_distributor(browser)

    # Сохранение курса на текущую дату
    exchange_rate_for_current_date = page.save_central_bank_rate()
    # print(exchange_rate_for_current_date, '\nКурс на текущую дату \n')

    # Проверка себестоимости на каждом коде
    # 1- ый код
    checking_cost_of_code_in_ye(browser, article_1, cost_price_base_cu_1, exchange_rate_for_current_date)
    # 2- ой код
    checking_cost_code_without_converting_to_currency(browser, article_2, cost_price_base_rub_2)
    # 3- ий код
    checking_cost_of_code_in_ye(browser, article_3, cost_price_base_cu_3, exchange_rate_for_current_date)
    # 4- ый код
    checking_cost_code_without_converting_to_currency(browser, article_4, cost_price_base_rub_4)

    page.click_button_recalculate()
    page.select_course_date(date_curse_cb)
    page.click_button_recalculate()
    page.checking_entered_date_of_central_bank_exchange_rate(date_curse_cb)

    # Проверка стоимости без НДС у всех кодов
    # Проверка стоимости без НДС 1-ого артикула в уе
    price_one_joke_without_nds_article_1 = page.save_price_one_joke_without_nds(article_1)
    # print(price_one_joke_without_nds_article_1, f'Стоимость за штуку без НДС артикула {article_1} при создании КП')
    checking_cost_without_nds_code_in_ye(browser, article_1, price_code_base_cu_1, price_one_joke_without_nds_article_1)

    # Проверка стоимости без НДС 2-ого артикула в уе
    price_one_joke_without_nds_article_2 = page.save_price_one_joke_without_nds(article_2)
    # print(price_one_joke_without_nds_article_2, f'Стоимость за штуку без НДС артикула {article_2} при создании КП')
    checking_cost_without_nds_code_in_ye(browser, article_2, price_code_base_cu_2, price_one_joke_without_nds_article_2)

    # Проверка стоимости без НДС 3-ого артикула в рублях
    curse_cu_article_3 = page.save_curse_cu_by_article_taking_into_account_promo(article_3)
    # print(curse_cu_article_3, f'Внутренний курс кода {article_3}')
    price_one_joke_without_nds_article_3 = page.save_price_one_joke_without_nds(article_3)
    # print(price_one_joke_without_nds_article_3, f'Стоимость за штуку без НДС артикула {article_3}')
    # print()
    checking_cost_without_nds_code_in_rub(article_3, price_code_base_rub_3, price_one_joke_without_nds_article_3)

    # Проверка стоимости без НДС 4-ого артикула в рублях
    price_one_joke_without_nds_article_4 = page.save_price_one_joke_without_nds(article_4)
    # print(price_one_joke_without_nds_article_4, f'Стоимость за штуку без НДС артикула {article_4}')
    curse_cu_article_4 = page.save_curse_cu_by_article_taking_into_account_promo(article_4)
    # print(curse_cu_article_4, f'Внутренний курс кода {article_4}')
    # print()
    checking_cost_without_nds_code_in_rub(article_4, price_code_base_rub_4, price_one_joke_without_nds_article_4)

    #  Проверка стоимости с НДС у всех кодов (колонка Клиент)
    # Код 1 - ый
    checking_cost_of_codes_with_nds_from_client(browser, article_1, price_one_joke_without_nds_article_1)
    # Проверка стоимости с НДС у всех кодов (колонка Клиент) Код 2 - ой
    checking_cost_of_codes_with_nds_from_client(browser, article_2, price_one_joke_without_nds_article_2)
    #  Проверка стоимости с НДС у всех кодов (колонка Клиент) Код 3 - ий
    checking_cost_of_codes_with_nds_from_client(browser, article_3, price_one_joke_without_nds_article_3)
    # Проверка стоимости с НДС у всех кодов (колонка Клиент) Код 4 - ий
    checking_cost_of_codes_with_nds_from_client(browser, article_4, price_one_joke_without_nds_article_4)

    # Проверка стоимости Итого у клиента
    checking_cost_total_for_client(browser)

    # Проверка стоимости c НДС Дистрибьютора
    # 1 - ый код
    checking_price_with_nds_of_distributor(browser, article_1)
    # Проверка стоимости c НДС Дистрибьютора 2 - ой код
    checking_price_with_nds_of_distributor(browser, article_2)
    # Проверка стоимости c НДС Дистрибьютора 3 - ий код
    checking_price_with_nds_of_distributor(browser, article_3)
    # Проверка стоимости c НДС Дистрибьютора 4 - ый код
    checking_price_with_nds_of_distributor(browser, article_4)

    # Проверка итоговой стоимости Дистрибьютора
    checking_final_cost_of_distributor(browser)

    # Проверка себестоимости на каждом коде (курс ЦБ)
    # 1- ый код
    checking_cost_of_code_in_ye(browser, article_1, cost_price_base_cu_1, exchange_rate_for_current_date)
    # 2- ой код
    checking_cost_code_without_converting_to_currency(browser, article_2, cost_price_base_rub_2)
    # 3- ий код
    checking_cost_of_code_in_ye(browser, article_3, cost_price_base_cu_3, exchange_rate_for_current_date)
    # 4- ый код
    checking_cost_code_without_converting_to_currency(browser, article_4, cost_price_base_rub_4)

    # Переключение валюты на уе
    # print('Переключение на УЕ')
    page.switching_currency_to_ue()
    page.click_button_recalculate()

    # Проверка Цена без НДС в уе 1 - ый код
    price_one_joke_without_nds_article_1_cu = page.save_price_one_joke_without_nds(article_1)
    # print(f'{price_one_joke_without_nds_article_1_cu} Цена без НДС в УЕ артикула {article_1} на странице \n')
    assert price_one_joke_without_nds_article_1_cu == price_code_base_cu_1, \
        f'После пересчета КП на УЕ. Цена без НДС за штуку в УЕ  на странице ' \
        f'({price_one_joke_without_nds_article_1_cu}) артикула {article_1} не соответствует цене в уе в ' \
        f'ассортименте - {price_code_base_cu_1}'

    # Проверка Цена без НДС уе 2 - ой код
    price_one_joke_without_nds_article_2_cu = page.save_price_one_joke_without_nds(article_2)
    # print(f'{price_one_joke_without_nds_article_2_cu} Цена без НДС в УЕ артикула {article_2} на странице \n')
    assert price_one_joke_without_nds_article_2_cu == price_code_base_cu_2, \
        f'После пересчета КП на УЕ. Цена без НДС за штуку в УЕ ({price_one_joke_without_nds_article_2_cu}) на ' \
        f'странице артикула {article_2} не соответствует цене в уе в ассортименте - {price_code_base_cu_2}'

    # Проверка Цена без НДС уе 3 - ий код
    price_one_joke_without_nds_article_3_cu = page.save_price_one_joke_without_nds(article_3)
    # print(f'{price_one_joke_without_nds_article_3_cu} Цена без НДС в УЕ артикула {article_3} на странице \n')

    expected_price_one_joke_without_nds_article_3_cu = price_code_base_rub_3 / exchange_rate_for_current_date
    expected_price_one_joke_without_nds_article_3_cu = round(expected_price_one_joke_without_nds_article_3_cu, 2)
    # print(expected_price_one_joke_without_nds_article_3_cu, f'Ожидаемая цена без НДС в уе кода {article_3}')

    # Разблокировать, как починят или определятся как надо (сейчас считает по курсу на выбранную дату - 01,01,2018)
    # assert price_one_joke_without_nds_article_3_cu == expected_price_one_joke_without_nds_article_3_cu, \
    #     f'После пересчета КП на УЕ. Цена без НДС за штуку в УЕ на странице артикула {article_3} не соответствует ' \
    #     f'ожидаемой цене в уе - {expected_price_one_joke_without_nds_article_3_cu}'

    # Проверка Цена без НДС уе 4 - ый код
    price_one_joke_without_nds_article_4_cu = page.save_price_one_joke_without_nds(article_4)
    # print(f'{price_one_joke_without_nds_article_4_cu} Цена без НДС в УЕ артикула {article_4} на странице \n')

    expected_price_one_joke_without_nds_article_4_cu = price_code_base_rub_4 / exchange_rate_for_current_date
    expected_price_one_joke_without_nds_article_4_cu = round(expected_price_one_joke_without_nds_article_4_cu, 2)
    # print(expected_price_one_joke_without_nds_article_4_cu, f'Ожидаемая цена без НДС в уе кода {article_4}')

    # Разблокировать, как починят или определятся как надо (сейчас считает по курсу на выбранную дату - 01,01,2018)
    # assert price_one_joke_without_nds_article_4_cu == expected_price_one_joke_without_nds_article_4_cu, \
    #     f'После пересчета КП на УЕ. Цена без НДС за штуку в УЕ на странице артикула {article_4} не соответствует ' \
    #     f'ожидаемой цене в уе - {expected_price_one_joke_without_nds_article_4_cu}'

    # Проверка Цена с НДС у Клиента
    # 1 code
    checking_cost_of_codes_with_nds_from_client(browser, article_1, price_one_joke_without_nds_article_1_cu)
    # 2 code
    checking_cost_of_codes_with_nds_from_client(browser, article_2, price_one_joke_without_nds_article_2_cu)
    # 3 code
    checking_cost_of_codes_with_nds_from_client(browser, article_3, price_one_joke_without_nds_article_3_cu)
    # 4 code
    checking_cost_of_codes_with_nds_from_client(browser, article_4, price_one_joke_without_nds_article_4_cu)
    checking_cost_total_for_client(browser)

    # Проверка стоимости с НДС у Дистра
    # 1 code
    checking_price_with_nds_of_distributor(browser, article_1)
    # 2 code
    checking_price_with_nds_of_distributor(browser, article_2)
    # 3 code
    checking_price_with_nds_of_distributor(browser, article_3)
    # 4 code
    checking_price_with_nds_of_distributor(browser, article_4)
    checking_final_cost_of_distributor(browser)

    # Проверка себестоимости на каждом коде
    # 1- ый код
    checking_cost_code_without_converting_to_currency(browser, article_1, cost_price_base_cu_1)
    # 2- ой код
    checking_cost_code_without_converting_to_currency(browser, article_2, cost_price_base_rub_2)
    # 3- ий код
    checking_cost_code_without_converting_to_currency(browser, article_3, cost_price_base_cu_3)
    # 4- ый код
    checking_cost_code_without_converting_to_currency(browser, article_4, cost_price_base_rub_4)

    # Переключение на внутренний курс
    # print('Переключение на внутренний курс')
    page.switching_currency_to_a_internal_rate()
    page.click_button_recalculate()

    # Проверка стоимости без НДС у всех кодов
    # Проверка стоимости без НДС 1-ого артикула в уе
    price_one_joke_without_nds_article_1 = page.save_price_one_joke_without_nds(article_1)
    # print(price_one_joke_without_nds_article_1, f'Стоимость за штуку без НДС артикула {article_1} при создании КП')
    checking_cost_without_nds_code_in_ye(browser, article_1, price_code_base_cu_1, price_one_joke_without_nds_article_1)

    # Проверка стоимости без НДС 2-ого артикула в уе
    price_one_joke_without_nds_article_2 = page.save_price_one_joke_without_nds(article_2)
    # print(price_one_joke_without_nds_article_2, f'Стоимость за штуку без НДС артикула {article_2} при создании КП')
    checking_cost_without_nds_code_in_ye(browser, article_2, price_code_base_cu_2, price_one_joke_without_nds_article_2)

    # Проверка стоимости без НДС 3-ого артикула в рублях
    curse_cu_article_3 = page.save_curse_cu_by_article_taking_into_account_promo(article_3)
    print(curse_cu_article_3, f'Внутренний курс кода {article_3}')
    price_one_joke_without_nds_article_3 = page.save_price_one_joke_without_nds(article_3)
    # print(price_one_joke_without_nds_article_3, f'Стоимость за штуку без НДС артикула {article_3}')
    # print()
    checking_cost_without_nds_code_in_rub(article_3, price_code_base_rub_3, price_one_joke_without_nds_article_3)

    # Проверка стоимости без НДС 4-ого артикула в рублях
    price_one_joke_without_nds_article_4 = page.save_price_one_joke_without_nds(article_4)
    # print(price_one_joke_without_nds_article_4, f'Стоимость за штуку без НДС артикула {article_4}')
    curse_cu_article_4 = page.save_curse_cu_by_article_taking_into_account_promo(article_4)
    print(curse_cu_article_4, f'Внутренний курс кода {article_4}')
    # print()
    checking_cost_without_nds_code_in_rub(article_4, price_code_base_rub_4, price_one_joke_without_nds_article_4)

    #  Проверка стоимости с НДС у всех кодов (колонка Клиент)
    # Код 1 - ый
    checking_cost_of_codes_with_nds_from_client(browser, article_1, price_one_joke_without_nds_article_1)
    # Проверка стоимости с НДС у всех кодов (колонка Клиент) Код 2 - ой
    checking_cost_of_codes_with_nds_from_client(browser, article_2, price_one_joke_without_nds_article_2)
    #  Проверка стоимости с НДС у всех кодов (колонка Клиент) Код 3 - ий
    checking_cost_of_codes_with_nds_from_client(browser, article_3, price_one_joke_without_nds_article_3)
    # Проверка стоимости с НДС у всех кодов (колонка Клиент) Код 4 - ий
    checking_cost_of_codes_with_nds_from_client(browser, article_4, price_one_joke_without_nds_article_4)
    # Проверка стоимости Итого у клиента
    checking_cost_total_for_client(browser)

    # Проверка стоимости c НДС Дистрибьютора
    # 1 - ый код
    checking_price_with_nds_of_distributor(browser, article_1)
    # Проверка стоимости c НДС Дистрибьютора 2 - ой код
    checking_price_with_nds_of_distributor(browser, article_2)
    # Проверка стоимости c НДС Дистрибьютора 3 - ий код
    checking_price_with_nds_of_distributor(browser, article_3)
    # Проверка стоимости c НДС Дистрибьютора 4 - ый код
    checking_price_with_nds_of_distributor(browser, article_4)
    # Проверка итоговой стоимости Дистрибьютора
    checking_final_cost_of_distributor(browser)

    # Сохранение курса на текущую дату
    exchange_rate_for_current_date = page.save_central_bank_rate()
    print(exchange_rate_for_current_date, '\nКурс на текущую дату \n')
    page.switching_currency_to_a_internal_rate()

    # print(f'Проставление скидки {discount_value_to_enter} у Дистра и Клиента без пересчета')
    # Проставление скидок Клиента
    page.placing_discounts_on_all_items_to_client(discount_value_to_enter)
    # Проверка Сумма с НДС Клиента
    # code 1
    price_one_joke_without_nds_article_1 = page.save_price_one_joke_without_nds(article_1)
    checking_cost_of_codes_with_nds_from_client(
        browser, article_1, price_one_joke_without_nds_article_1, discount_value_to_enter)
    # code 2
    price_one_joke_without_nds_article_2 = page.save_price_one_joke_without_nds(article_2)
    checking_cost_of_codes_with_nds_from_client(
        browser, article_2, price_one_joke_without_nds_article_2, discount_value_to_enter)
    # code 3
    price_one_joke_without_nds_article_3 = page.save_price_one_joke_without_nds(article_3)
    checking_cost_of_codes_with_nds_from_client(
        browser, article_3, price_one_joke_without_nds_article_3, discount_value_to_enter)
    # code 4
    price_one_joke_without_nds_article_4 = page.save_price_one_joke_without_nds(article_4)
    checking_cost_of_codes_with_nds_from_client(
        browser, article_4, price_one_joke_without_nds_article_4, discount_value_to_enter)
    checking_cost_total_for_client(browser)

    # Проставление скидок Дистра
    page.placing_discounts_on_all_items_to_distributor(discount_value_to_enter)
    # Проверка Сумма с НДС Дистра
    # code 1
    checking_price_with_nds_of_distributor(browser, article_1)
    # code 2
    checking_price_with_nds_of_distributor(browser, article_2)
    # code 3
    checking_price_with_nds_of_distributor(browser, article_3)
    # code 4
    checking_price_with_nds_of_distributor(browser, article_4)
    checking_final_cost_of_distributor(browser)

    print('Смена количества кодов')
    # Смена количества кодов
    page.entering_number_of_codes(article_1, number_of_codes_to_increase)
    page.entering_number_of_codes(article_2, number_of_codes_to_increase)
    page.entering_number_of_codes(article_3, number_of_codes_to_increase)
    page.entering_number_of_codes(article_4, number_of_codes_to_increase)

    # Проверка Цена с НДС Клиент
    # code 1
    price_one_joke_without_nds_article_1 = page.save_price_one_joke_without_nds(article_1)
    checking_cost_of_codes_with_nds_from_client(
        browser, article_1, price_one_joke_without_nds_article_1, discount_value_to_enter)
    # Проверка стоимости с НДС у всех кодов (колонка Клиент) Код 2 - ой
    price_one_joke_without_nds_article_1 = page.save_price_one_joke_without_nds(article_2)
    checking_cost_of_codes_with_nds_from_client(
        browser, article_2, price_one_joke_without_nds_article_2, discount_value_to_enter)
    #  Проверка стоимости с НДС у всех кодов (колонка Клиент) Код 3 - ий
    price_one_joke_without_nds_article_1 = page.save_price_one_joke_without_nds(article_3)
    checking_cost_of_codes_with_nds_from_client(
        browser, article_3, price_one_joke_without_nds_article_3, discount_value_to_enter)
    # Проверка стоимости с НДС у всех кодов (колонка Клиент) Код 4 - ий
    price_one_joke_without_nds_article_1 = page.save_price_one_joke_without_nds(article_4)
    checking_cost_of_codes_with_nds_from_client(
        browser, article_4, price_one_joke_without_nds_article_4, discount_value_to_enter)
    # Проверка стоимости Итого у клиента
    checking_cost_total_for_client(browser)

    # Проверка Сумма с НДС Дистра
    # code 1
    checking_price_with_nds_of_distributor(browser, article_1)
    # code 2
    checking_price_with_nds_of_distributor(browser, article_2)
    # code 3
    checking_price_with_nds_of_distributor(browser, article_3)
    # code 4
    checking_price_with_nds_of_distributor(browser, article_4)
    checking_final_cost_of_distributor(browser)

    # Смена условий оплаты
    page.expanding_payment_terms_menu()
    page.selection_of_contractual_payment_terms(terms_of_payment)
    page.click_button_recalculate()

    # Проверка Сумма с НДС Дистра
    # code 1
    checking_price_with_nds_of_distributor(browser, article_1)
    # code 2
    checking_price_with_nds_of_distributor(browser, article_2)
    # code 3
    checking_price_with_nds_of_distributor(browser, article_3)
    # code 4
    checking_price_with_nds_of_distributor(browser, article_4)
    checking_final_cost_of_distributor(browser)

    # Выбор Согласование условий оплаты
    page.expanding_payment_terms_menu()
    page.click_on_button_agree_on_payment_terms()
    page.choice_of_total_payment_before_shipment(total_payment_before_shipment)
    page.choice_of_advance_payment_amount_for_placement(advance_payment_for_placing_an_order)
    page.choice_lending_duration(days_of_lending)
    page.entering_loan_interest(interest_on_loan)

    page.entering_percentage_for_conversion(percentage_for_conversion)
    page.click_button_recalculate()
    true_allowance = page.allowance_calculation(float(interest_on_loan), float(percentage_for_conversion))
    allowance_on_page = page.save_all_allowance()
    for allowance in allowance_on_page:
        assert allowance == float(true_allowance), f'Надбавка на странице ({allowance}) не соответствует ожидаемой ' \
                                                   f'надбавке ({true_allowance})'

    # Проверка Сумма с НДС Дистра
    # code 1
    checking_price_with_nds_of_distributor(browser, article_1)
    # code 2
    checking_price_with_nds_of_distributor(browser, article_2)
    # code 3
    checking_price_with_nds_of_distributor(browser, article_3)
    # code 4
    checking_price_with_nds_of_distributor(browser, article_4)
    checking_final_cost_of_distributor(browser)
