import allure

from api_testing_project.services.crm_commerce.create_offer.api.api_create_offer import ApiCreateOffer
from config import TestEnvironment
from open_pages.confirmation_page.confirmation_page import ConfirmationPage
from open_pages.design_condition_page.design_condition_page import DesignConditionPage
from open_pages.header.profile_menu_user import ProfileMenuUser
from open_pages.main_page.main_page import MainPage
from open_pages.my_design_conditions_page.my_design_conditions_page import MyDesignConditionsPage


@allure.feature('Создание заказа из PQ')
@allure.story('Создание заказа в Open c частичным выкупом из разных вкладок')
def test_48600_creating_an_order_in_open_with_partial_redemption_from_different_tabs(browser):
    """
    Создание заказа в Open c частичным выкупом из разных вкладок
    https://rucotfs.ridancorp.net/DanfossDev/CRM/_workitems/edit/48600
    """
    link_open = TestEnvironment.LINK_OPEN_TST

    login_open = TestEnvironment.LOGIN_TST_VODOKOMFORT
    password_open = TestEnvironment.PASSWORD_TST_VODOKOMFORT

    page_main_open = MainPage(browser, link_open)
    page_profile_menu_open = ProfileMenuUser(browser, link_open)
    page_my_design_condition = MyDesignConditionsPage(browser, link_open)
    page_design_condition = DesignConditionPage(browser, link_open)
    page_confirmation = ConfirmationPage(browser, link_open)

    null = None
    true = True
    false = False
    request_create_offer = {
        "docType": "Order",
        "showPriceWithDiscount": false,
        "showDiscount": true,
        "currencyDate": "2025-05-27T00:00:00",
        "currency": "RUB",
        "exchangeRateType": "YRU",
        "userName": "RUCO1681",
        "personId": "50dad901-7146-436a-9b32-a34da09f88dd",
        "usePromoCurrency": true,
        "offerId": null,
        "passportId": "4DBB2A44-D895-468D-A51F-AE98B9B3D487",
        "specTypeId": "02061701-51E6-402E-B18F-7BAE7A27F6FB",
        "specificationId": "83BAAF6E-B790-4F35-8910-9AA020449733",
        "paymentTerms": "RU00",
        "surchargesPayment": "0",
        "surchargesConversion": 0,
        "payPercentComponentsBTP": null,
        "payPercentBeforePlacingIntoProduction": 100,
        "isDraft": false,
        "isEndUserPQ": false,
        "purchaseType": "121B015A-E76D-4688-9BB6-2A56EC6DE2EF",
        "finalBuyerId": "ACB8F425-C3B6-4B38-9F34-1E7FBFD53FA9",
        "customerId": "ACB8F425-C3B6-4B38-9F34-1E7FBFD53FA9",
        "clientInn": "7705238125",
        "availableForDistributor": false,
        "autoAvailableForDistributor": true,
        "debtorAccount": "RT25-7705238125-HE",
        "currencySpecialFixation": true,
        "setContractDiscounts": true,
        "orderLines": [
            {
                "ODID": null,
                "materialCode": "003L0391R",
                "RequestedMaterialCode": "003L0391R",
                "quantity": 3,
                "lineNumber": 1,
                "usePromoCurrency": true,
                "discountPercent": 48,
                "endClientDiscountPercent": 0,
                "excludePosition": false,
                "useSpecialPrice": false,
                "lineType": "Material",
                "copiedFromId": null
            },
            {
                "ODID": null,
                "materialCode": "w488900",
                "RequestedMaterialCode": "w488900",
                "quantity": 4,
                "lineNumber": 2,
                "usePromoCurrency": true,
                "discountPercent": 55,
                "endClientDiscountPercent": 0,
                "excludePosition": false,
                "useSpecialPrice": false,
                "lineType": "HEX",
                "copiedFromId": null
            },
            {
                "ODID": null,
                "materialCode": "TDU1008144",
                "RequestedMaterialCode": "TDU1008144",
                "quantity": 4,
                "lineNumber": 3,
                "usePromoCurrency": true,
                "discountPercent": 50,
                "endClientDiscountPercent": 0,
                "excludePosition": false,
                "useSpecialPrice": false,
                "lineType": "TDU",
                "copiedFromId": null
            },
            {
                "ODID": null,
                "materialCode": "Q0404240004-1",
                "RequestedMaterialCode": "Q0404240004-1",
                "quantity": 3,
                "lineNumber": 4,
                "usePromoCurrency": true,
                "discountPercent": 55,
                "endClientDiscountPercent": 0,
                "excludePosition": false,
                "useSpecialPrice": false,
                "lineType": "Pump",
                "copiedFromId": null
            }
        ],
        "deliveryOptions": {
            "ConsigneeCode": null,
            "Condition": "RU",
            "DeliveryCost": 0,
            "Comment": null,
            "ClientFinalDelivery": null,
            "ConsigneeContacts": null,
            "consigneeAgreementDelivery": {
                "SourceFiasId": "00000000-0000-0000-0000-000000000000",
                "DestinationFiasId": null,
                "Address": null,
                "PaidDelivery": false,
                "ConditionDescription": "Стандартные договорные условия",
                "INN": "7705238125"
            },
            "CostIncludedInOrder": false,
            "totalDeliveryWeight": 0.8400000000000001,
            "endPoint": "ToTK",
            "deliveryType": "Pickup",
            "consigneeId": "00000000-0000-0000-0000-000000000000"
        },
        "deliveryOptionsHex": null,
        "deliveryOptionsProd": {
            "ConsigneeCode": null,
            "Condition": "RU",
            "DeliveryCost": 0,
            "Comment": null,
            "ClientFinalDelivery": null,
            "ConsigneeContacts": null,
            "consigneeAgreementDelivery": {
                "SourceFiasId": "00000000-0000-0000-0000-000000000000",
                "DestinationFiasId": null,
                "Address": null,
                "PaidDelivery": false,
                "ConditionDescription": "Стандартные договорные условия",
                "INN": "7705238125"
            },
            "CostIncludedInOrder": false,
            "totalDeliveryWeight": 4,
            "endPoint": "ToTK",
            "deliveryType": "Pickup",
            "consigneeId": "00000000-0000-0000-0000-000000000000"
        },
        "deliveryOptionsDZRProd": {
            "ConsigneeCode": null,
            "Condition": "RU",
            "DeliveryCost": 0,
            "Comment": null,
            "ClientFinalDelivery": null,
            "ConsigneeContacts": null,
            "consigneeAgreementDelivery": {
                "SourceFiasId": "00000000-0000-0000-0000-000000000000",
                "DestinationFiasId": null,
                "Address": null,
                "PaidDelivery": false,
                "ConditionDescription": "Стандартные договорные условия",
                "INN": "7705238125"
            },
            "CostIncludedInOrder": false,
            "totalDeliveryWeight": 1522.48,
            "endPoint": "ToTK",
            "deliveryType": "PickupDZR",
            "consigneeId": "00000000-0000-0000-0000-000000000000"
        },
        "isExport": false,
        "validDays": 14,
        "source": null,
        "sellerId": "20C340FE-6AFF-486F-B248-FD8DBE2C93CD",
        "IsATOffer": false,
        "autoFromEngSpec": false,
        "isNew": true
    }
    headers = {'userId': '94b73863-d339-4fd1-8293-392a0ae470fd'}  # userId  Оганесян Левон

    api_create_offer = ApiCreateOffer()
    id_offer, num_pq = api_create_offer.create_offer(headers=headers, request=request_create_offer)
    articles = api_create_offer.get_all_articles()
    print(articles)

    expected_text_error_in_modal = 'Превышение количества позиций аcсортимента по базовому КП'  # Ожидаемый текст ошибки в модалке превышения количества по позициям
    expected_count_by_article_tab_1 = {
        articles[0]: '2', articles[1]: '2', articles[2]: '2', articles[3]: '2'
    }  # Количество штук по коду в первой вкладке
    expected_count_by_article_tab_2 = {
        articles[0]: '1', articles[1]: '2', articles[2]: '2', articles[3]: '1'
    }  # Количество штук по коду во 2-ой вкладке
    expected_count_by_article_tab_3 = {
        articles[0]: '1', articles[1]: '1', articles[2]: '1', articles[3]: '1'
    }  # Количество штук по коду в 3-ей вкладке

    # Переход в Опен
    page_main_open.open()
    page_main_open.authorization_from_main_page(login_open, password_open)

    # Мои проектные условия
    page_profile_menu_open.click_profile()
    page_profile_menu_open.go_to_design_conditions()
    page_my_design_condition.search_for_pq_and_switch_to_it(num_pq)
    window_pq_1 = browser.current_window_handle

    # Проектное условие. Открываем КП в 4-х вкладках
    url_pq_open = browser.current_url
    browser.execute_script("window.open(arguments[0])", url_pq_open)
    page_my_design_condition.switching_window(-1)
    window_pq_2 = browser.current_window_handle

    browser.execute_script("window.open(arguments[0])", url_pq_open)
    page_my_design_condition.switching_window(-1)
    window_pq_3 = browser.current_window_handle

    browser.execute_script("window.open(arguments[0])", url_pq_open)
    page_my_design_condition.switching_window(-1)

    # Переходим к первой вкладке
    browser.switch_to.window(window_pq_1)

    # Вводим количество штук по артикулу
    for article, count in expected_count_by_article_tab_1.items():
        page_design_condition.entering_quantity_by_article(article=article, count=count)
    page_design_condition.click_button_order()

    # Страница Подтверждение
    count_by_article_confirmation_page_tab_1 = {}  # Количество товара по артикулу на странице Подтверждение на 1-ой вкладке
    for el in articles:
        dict_count = page_confirmation.save_count_by_article(el)
        count_by_article_confirmation_page_tab_1.update(dict_count)
    print(count_by_article_confirmation_page_tab_1, '1-ая вкладка')

    # Проверяем, что на странице Подтверждение верно отображается количество по коду
    with allure.step('Проверяем, что на странице Подтверждение верно отображается количество по коду'):
        for article, count in expected_count_by_article_tab_1.items():
            assert count_by_article_confirmation_page_tab_1[article] == count, \
                (f'Количество кода {article} - {count_by_article_confirmation_page_tab_1[article]} '
                 f'не соответствует ожидаемому - {count}')

    page_confirmation.click_button_confirm()

    # 2-ая вкладка
    browser.switch_to.window(window_pq_2)

    # Вводим количество штук по артикулу
    for article, count in expected_count_by_article_tab_2.items():
        page_design_condition.entering_quantity_by_article(article=article, count=count)
    page_design_condition.click_button_order()

    # Страница Подтверждение
    count_by_article_confirmation_page_tab_2 = {}  # Количество товара по артикулу на странице Подтверждение на 2-ой вкладке
    for el in articles:
        dict_count = page_confirmation.save_count_by_article(el)
        count_by_article_confirmation_page_tab_2.update(dict_count)
    print(count_by_article_confirmation_page_tab_2, '2-ая вкладка')

    # Проверяем, что на странице Подтверждение верно отображается количество по коду
    with allure.step('Проверяем, что на странице Подтверждение верно отображается количество по коду'):
        for article, count in expected_count_by_article_tab_2.items():
            assert count_by_article_confirmation_page_tab_2[article] == count, \
                (f'Количество кода {article} - {count_by_article_confirmation_page_tab_2[article]} '
                 f'не соответствует ожидаемому - {count}')

    page_confirmation.click_button_confirm()

    # 3-я вкладка
    browser.switch_to.window(window_pq_3)
    # Вводим количество штук по артикулу
    for article, count in expected_count_by_article_tab_3.items():
        page_design_condition.entering_quantity_by_article(article=article, count=count)

    page_design_condition.click_on_order_button_with_expected_error()

    page_confirmation.check_modal_content(expected_text_in_modal=expected_text_error_in_modal)
