import allure
import pytest

from config import TestEnvironment
from crm_pages.organization_page.editing_organization_page import EditingOrganization, ModalCreateTransaction, \
    TitleTransaction
from crm_pages.modal_new_kp.modal_new_kp import ModalNewKp
from crm_pages.pq_page.pq_page import PqPage


@allure.feature('Создание заказа из PQ')
@allure.story('Предоплата. Самовывоз. Создание счета в СРМ. КП в организации на ПТО + материалы.')
@pytest.mark.stage
@pytest.mark.parametrize('article_pto', ['w488900 w452192'])
@pytest.mark.parametrize('article_materials', ['003L0391R 003L0125R'])
def test_45059_cp_in_organization_for_technical_training_materials(browser, article_pto, article_materials,
                                                                   auth_crm_extru_start,
                                                                   auth_extru_crm_from_authorized_page,
                                                                   agreement_on_all_conditions_extru):
    """КП в организации на ПТО + материалы"""
    login_crm = TestEnvironment.LOGIN_CRM

    url_organization = 'https://ruecom-extru-tst.ridancorp.net/OneCRM/Classes/634?viewMode=view&id=acb8f425-c3b6-4b38-' \
                       '9f34-1e7fbfd53fa9&fullWidth=false&modal=false&childid=704'
    potential_mode = 'Частичная закупка'
    article_for_adding = article_materials + ' ' + article_pto
    article_list = article_for_adding.split(' ')
    discounts_for_entering = [23.4589, 19.3856, 45.1284, 57.9213]

    auth_crm_extru_start(ruco=login_crm)

    page = EditingOrganization(browser, url_organization)
    page.open()
    page.go_to_title_transactions()

    page = TitleTransaction(browser, url_organization)
    page.click_button_create_transaction()

    page = ModalCreateTransaction(browser, url_organization)
    name_created_transaction = page.save_name_created_transaction()
    page.click_btn_save()

    page = TitleTransaction(browser, url_organization)
    page.click_btn_editing_a_deal_by_deal_name(name_created_transaction)

    page = ModalCreateTransaction(browser, url_organization)
    page.click_create_kp()

    page = ModalNewKp(browser, url_organization)
    page.potential_mode_selection(potential_mode)
    page.choice_sap_code_main_contract()
    page.there_must_be_an_advance_payment()
    page.there_should_be_standard_contractual_terms()
    page.adding_codes(article_for_adding)
    page.placing_a_discount_distributor_by_article(discounts_for_entering[0], article_list[0])
    page.placing_a_discount_distributor_by_article(discounts_for_entering[1], article_list[1])
    page.placing_a_discount_distributor_by_article(discounts_for_entering[2], article_list[2])
    page.placing_a_discount_distributor_by_article(discounts_for_entering[3], article_list[3])
    page.click_button_recalculate()
    total_price_kp = page.store_amount_nds_total_in_kp_crm_rub()
    page.click_btn_save_pq()
    num_pq = page.store_num_pq_in_title()
    total_price_after_save = page.store_amount_nds_total_in_kp_crm_rub()

    assert abs(total_price_after_save - total_price_kp) < 0.5, \
        f'Итоговая стоимость кп до сохранения - ({total_price_kp}) не равна стоимости после сохранения кп - ' \
        f'({total_price_after_save})'

    page.send_for_approval_from_modal_new_kp()
    page.modal_kp_has_not_been_pre_screened()

    page = ModalCreateTransaction(browser, url_organization)
    page.opening_pq_in_modal_transaction_in_a_new_tab_by_number(num_pq)

    page = PqPage(browser, url_organization)
    total_price_on_pq_page = page.saving_the_final_amount_rub_after_agreement()

    assert abs(total_price_on_pq_page - total_price_kp) < 0.5, \
        f'Итоговая сумма КП на странице PQ - ({total_price_on_pq_page}) не соответствует сумме до сохранения КП - ' \
        f'({total_price_kp})'

    page.payment_condition_must_be_advance_payment()
    page.terms_of_delivery_must_be_standard_contractual_terms()
    page.checking_selected_potential_mode(potential_mode)

    all_discounts_on_pq_page = sorted(page.store_all_discounts())
    discounts_for_entering = sorted(discounts_for_entering)
    assert all_discounts_on_pq_page == discounts_for_entering, \
        f'Скидки на странице pq {num_pq} - ({all_discounts_on_pq_page}) не соответствуют введенным при создании КП - ' \
        f'({discounts_for_entering})'

    agreement_on_all_conditions_extru()

    url_pq = browser.current_url
    auth_extru_crm_from_authorized_page(url_page=url_pq, name_user=login_crm)

    # Сохранение итоговой суммы после согласования и сравнение с суммой до согласования
    page = PqPage(browser, TestEnvironment.LINK_CRM_TST)
    final_amount_after_agreement = page.saving_the_final_amount_rub_after_agreement()

    assert abs(final_amount_after_agreement - total_price_on_pq_page) < 0.5, \
        f'Сумма в PQ после согласования ({final_amount_after_agreement}) не равна сумме до согласования ' \
        f'({total_price_on_pq_page})'

    all_discounts_on_pq_page_after_agreement = sorted(page.store_all_discounts())
    assert all_discounts_on_pq_page_after_agreement == discounts_for_entering, \
        f'Скидки после согласования КП - ({all_discounts_on_pq_page_after_agreement}) не соответствуют введенным ' \
        f'скидкам при создании КП - ({discounts_for_entering})'

    page.create_account()
    page.waiting_for_account_creation()

    grand_total_all_dkp = page.saving_grand_total_all_dkp()
    assert abs(grand_total_all_dkp - final_amount_after_agreement) < 0.5, \
        f'Общая итоговая сумма всех заказов - ({grand_total_all_dkp}) не совпадает с итоговой суммой МКП - ' \
        f'({final_amount_after_agreement})'

    list_total_price_by_article = sorted(page.saving_amount_from_nds_distributor_in_each_position())
    page.number_unequal_check_dkp()

    window_pq_page = browser.current_window_handle
    # Переход в 1-ый заказ из списка заказов

    page.go_to_order_by_reference_number(1)
    page.payment_condition_must_be_advance_payment()
    page.terms_of_delivery_must_be_standard_contractual_terms()
    page.checking_selected_potential_mode(potential_mode)

    list_total_price_by_article_dkp_1 = page.saving_amount_from_nds_distributor_in_each_position()

    total_price_dkp_1 = page.saving_the_final_amount_rub_after_agreement()

    browser.switch_to.window(window_pq_page)

    # Переход во 2-ой заказ из списка заказов
    page.go_to_order_by_reference_number(2)
    page.payment_condition_must_be_advance_payment()
    page.terms_of_delivery_must_be_standard_contractual_terms()
    page.checking_selected_potential_mode(potential_mode)

    list_total_price_by_article_dkp_2 = page.saving_amount_from_nds_distributor_in_each_position()
    list_total_price_by_article_dkp = sorted(list_total_price_by_article_dkp_2 + list_total_price_by_article_dkp_1)

    assert list_total_price_by_article_dkp == pytest.approx(list_total_price_by_article, abs=0.1), \
        f'Стоимость с НДС Дистра по позициям в 2-х ДКП - ({list_total_price_by_article_dkp}) не совпадает со ' \
        f'стоимостью с НДС Дистра в МКП - ({list_total_price_by_article}) '

    total_price_dkp_2 = page.saving_the_final_amount_rub_after_agreement()

    total_price_all_dkp = total_price_dkp_2 + total_price_dkp_1
    assert abs(total_price_all_dkp - final_amount_after_agreement) < 0.5, \
        f'Общая сумма заказов со страниц ДКП - ({total_price_all_dkp}) не соответствует итоговой ' \
        f'сумме МКП - ({final_amount_after_agreement})'
