import time

import allure
import pytest

from config import TestEnvironment
from crm_pages.modal_new_kp.modal_new_kp import ModalNewKp
from crm_pages.object_page.object_page import ObjectPage, KpTab
from crm_pages.pq_page.pq_page import PqPage
from crm_pages.search_pq_page.search_pq_page import SearchPq
from open_pages.confirmation_page.confirmation_page import ConfirmationPage
from open_pages.design_condition_page.design_condition_page import DesignConditionPage
from open_pages.header.profile_menu_user import ProfileMenuUser
from open_pages.main_page.main_page import MainPage
from open_pages.my_design_conditions_page.my_design_conditions_page import MyDesignConditionsPage
from open_pages.order_details_page.order_details_page import OrderDetails


@allure.feature('Создание заказа из PQ')
@allure.story('Кредит. Материалы + BAST + ПТО. Платная доставка на указанный адрес')
@pytest.mark.stage
@pytest.mark.parametrize('article',
                         ['003L0391R 100 BAST0404241646 1 w488900 2'])  # артикулы добавлять в формате "код количество"
def test_45182_kp_materials_bast_pto_credit_delivery_to_specified_address(browser, article,
                                                                          auth_extru_crm_from_authorized_page,
                                                                          auth_crm_extru_start,
                                                                          agreement_on_all_conditions_extru):
    """КП Материалы + BAST + ПТО. Предоплата, кредит. Доставка на указанный адрес."""
    url_object_tst = TestEnvironment.LINK_OBJECT_IN_TST
    login_crm = TestEnvironment.LOGIN_CRM
    distributor = TestEnvironment.DISTRIBUTOR_VODOKOMFORT_TST
    potential_mode = 'Частичная закупка'
    percentage_payment = '60%'  # Суммарная оплата перед отгрузкой
    advance_payment = '40%'  # Размер аванса для размещения заказа/резервирования товара на складе
    delivery_conditions = 'Доставка на указанный адрес'
    delivery_address = 'Россия, г Москва, ул Арбат, д 1'
    delivery_address_open = 'г Москва, ул Арбат, д 1'

    discount_distr = 10.5
    link_open_tst = TestEnvironment.LINK_OPEN_TST
    login_open_tst = TestEnvironment.LOGIN_TST_VODOKOMFORT
    password_open_tst = TestEnvironment.PASSWORD_TST_VODOKOMFORT
    count_for_entering_article = ['60', '1']

    # Вытаскиваем только коды в список
    list_article_no_parse = article.split(' ')
    list_article = []
    for idx, code in enumerate(list_article_no_parse):
        if idx % 2 == 0:
            list_article.append(list_article_no_parse[idx])

    auth_crm_extru_start()

    page = ObjectPage(browser, url_object_tst)
    page.open()
    page.click_add_kp()

    page = ModalNewKp(browser, url_object_tst)
    page.potential_mode_selection(potential_mode)
    page.internal_course_toggle_switch_must_be_turned_on()
    page.there_must_be_an_advance_payment()
    page.choice_distributor(distributor)
    page.choice_sap_code_main_contract()
    page.choice_final_buyer()
    page.there_should_be_standard_contractual_terms()
    page.expanding_payment_terms_menu()
    page.click_on_button_agree_on_payment_terms()
    page.choice_of_total_payment_before_shipment(percentage_payment)
    page.choice_of_advance_payment_amount_for_placement(advance_payment)
    payment_after_shipment = page.save_payment_after_shipment()
    assert int(payment_after_shipment.replace('%', '')) + int(percentage_payment.replace('%', '')) == 100, \
        f'Сумма Оплаты после отгрузки - ({payment_after_shipment}) и суммарной оплаты перед отгрузкой ' \
        f'({percentage_payment}) не равно 100%'

    page.selection_of_delivery_conditions(delivery_conditions)
    page.entering_a_shipping_address(delivery_address)
    page.adding_codes(article)
    page.placing_discounts_on_all_items_to_distributor(discount_distr)

    percentage_for_conversion = page.saving_percentage_for_conversion()
    interest_on_a_loan = page.saving_interest_on_a_loan()
    expected_allowance = page.allowance_calculation(interest_on_a_loan, percentage_for_conversion)
    all_allowances_on_page = page.save_all_allowance()
    for el in all_allowances_on_page:
        assert el == expected_allowance, f'Надбавки в модалке создания КП - {el} не равны ожидаемым - ' \
                                         f'{expected_allowance}'

    total_price_before_save = page.store_amount_nds_total_in_kp_crm_rub()
    page.click_button_recalculate()
    total_price_before_recalculate = page.store_amount_nds_total_in_kp_crm_rub()
    assert total_price_before_recalculate == total_price_before_save, \
        f'Итоговая сумма до пересчета - {total_price_before_save} не соответствует итоговой сумме после пересчета - ' \
        f'{total_price_before_recalculate}'

    page.switching_on_tumbler_show_discount_column_if_off()

    page.click_btn_save_pq()
    num_pq = page.store_num_pq_in_title()
    total_price_after_save = page.store_amount_nds_total_in_kp_crm_rub()
    assert abs(total_price_after_save - total_price_before_save) < 1, \
        f'Итоговая сумма после сохранения - {total_price_after_save} не соответствует итоговой сумме до сохранения - ' \
        f'{total_price_before_save}'

    page.send_for_approval_from_modal_new_kp()
    page.modal_kp_has_not_been_pre_screened()

    page = ObjectPage(browser, url_object_tst)
    page.go_to_chapter_kp()
    page = KpTab(browser, url_object_tst)
    page.opening_pq_in_a_new_tab_by_number(num_pq)

    page = PqPage(browser, url_object_tst)
    window_pq_page_crm = browser.current_window_handle

    total_price_after_sending_for_approval = page.store_amount_nds_total_in_kp_crm_rub()
    assert abs(total_price_after_sending_for_approval - total_price_before_save) < 1, \
        f'Итоговая сумма после отправки на согласование на странице PQ - {total_price_after_sending_for_approval} ' \
        f'не соответствует итоговой сумме при создании КП - {total_price_before_save}'

    payment_terms_code_crm = page.saving_payment_terms_code()
    print(payment_terms_code_crm)

    agreement_on_all_conditions_extru()

    url_pq = browser.current_url

    auth_extru_crm_from_authorized_page(url_page=url_pq, name_user=login_crm)

    browser.execute_script("window.open(arguments[0])", link_open_tst)
    page = MainPage(browser, link_open_tst)
    page.switching_window(-1)
    page.authorization_from_main_page(login_open_tst, password_open_tst)

    page = ProfileMenuUser(browser, link_open_tst)
    page.click_profile()
    page.go_to_design_conditions()

    page = MyDesignConditionsPage(browser, link_open_tst)
    page.search_for_pq_and_switch_to_it(num_pq)

    page = DesignConditionPage(browser, link_open_tst)
    payment_terms_code_open = page.save_payment_terms()
    assert payment_terms_code_open == payment_terms_code_crm, \
        f'Условия оплаты в Опене ({payment_terms_code_open}) не соответствуют условиям оплаты в CRM - ' \
        f'({payment_terms_code_crm})'

    page.entering_quantity_by_article(list_article[0], count_for_entering_article[0])
    page.entering_quantity_by_article(list_article[2], count_for_entering_article[1])
    page.deselect_code(list_article[1])
    page.click_button_order()

    page = ConfirmationPage(browser, link_open_tst)

    allowances_on_confirmation_page = page.store_all_allowance()
    for el in allowances_on_confirmation_page:
        assert el == expected_allowance, f'Надбавки на странице Подтверждение - {el} не равны ожидаемым - ' \
                                         f'{expected_allowance}'

    discounts_on_confirmation_page = page.store_all_discounts_on_the_confirmation_page()
    for discount_confirmation in discounts_on_confirmation_page:
        assert discount_confirmation == discount_distr, \
            f'Скидки на странице Подтверждение - {discount_confirmation} не соответствуют ожидаемым - {discount_distr}'

    page.click_on_button_to_calculate_shipping_costs_for_materials()
    page.choice_of_delivery_method_pto(delivery_conditions)
    page.entering_delivery_address_pto(delivery_address_open)
    page.calculate_delivery_costs_pto()

    page.click_button_confirm()
    list_all_num_dkp_open = sorted(page.save_all_num_dkp())

    page.click_on_the_button_to_return_to_pq()

    page = DesignConditionPage(browser, link_open_tst)
    window_pq_page_open = browser.current_window_handle
    page.waiting_to_create_invoices()

    page.go_to_order(1)

    page = OrderDetails(browser, link_open_tst)
    num_order = page.store_num_order()
    terms_of_payment_in_order_open_page = page.save_terms_of_payment_in_order_page()
    assert terms_of_payment_in_order_open_page == payment_terms_code_crm, \
        f'Условия оплаты - {terms_of_payment_in_order_open_page} на странице Детали заказа {num_order} не соответствуют' \
        f' условиям оплаты при создании заказа в СРМ - {payment_terms_code_crm}'

    price_order_open_page = float(page.store_price_order())
    delivery_cost_order_open_page = page.store_delivery_cost()
    page.check_delivery_method(delivery_conditions)
    article_in_order_open_page = sorted(page.save_name_article_on_all_lines())
    discounts_order_open_page = sorted(page.sve_all_discounts())
    allowances_order_open_page = sorted(page.saving_surcharges_in_the_order())

    browser.execute_script("window.open(arguments[0])", TestEnvironment.LINK_SEARCH_PQ_TST)
    page.switching_window(-1)
    page = SearchPq(browser, TestEnvironment.LINK_SEARCH_PQ_TST)
    window_search_order_in_crm = browser.current_window_handle
    time.sleep(2)
    page.search_order(num_order)
    page.go_to_order(num_order)

    page = PqPage(browser, url_object_tst)

    allowances_order_crm_page = sorted(page.save_all_allowance())
    assert allowances_order_crm_page == allowances_order_open_page, \
        f'Надбавки на странице заказа {num_order} в СРМ - {allowances_order_crm_page} не соответствуют надбавкам ' \
        f'на странице заказа в Опене - {allowances_order_open_page}'

    discounts_order_crm_page = sorted(page.store_all_discount())
    assert discounts_order_crm_page == discounts_order_open_page, \
        f'Скидки на странице заказа {num_order} в СРМ - {discounts_order_crm_page} не соответствуют скидкам на ' \
        f'странице в Опене - {discounts_order_open_page}'

    article_in_order_crm_page = sorted(page.save_list_articles_in_pq())
    assert article_in_order_crm_page == article_in_order_open_page, \
        f'Артикулы на странице заказа {num_order} в СРМ - {article_in_order_crm_page} не соответствуют артикулам на ' \
        f'странице заказа в Опене - {article_in_order_open_page}'

    delivery_cost_order_crm_page = page.saving_delivery_costs_in_rubles()
    assert delivery_cost_order_crm_page == delivery_cost_order_open_page, \
        f'Стоимость доставки - {delivery_cost_order_crm_page} на странице  заказа {num_order} в СРМ не соответствует ' \
        f'стоимости доставки - {delivery_cost_order_open_page} на странице заказа {num_order}  в Опене'

    price_order_crm_page = page.store_price_crm_order()
    assert price_order_crm_page == price_order_open_page, \
        f'Стоимость заказа {num_order} в CRM - {price_order_crm_page} не соответствует стоимости заказа в ' \
        f'Опене - {price_order_open_page}'

    browser.switch_to.window(window_pq_page_open)

    page = DesignConditionPage(browser, link_open_tst)
    page.go_to_order(2)

    page = OrderDetails(browser, link_open_tst)
    num_order = page.store_num_order()
    terms_of_payment_in_order_open_page = page.save_terms_of_payment_in_order_page()
    assert terms_of_payment_in_order_open_page == payment_terms_code_crm, \
        f'Условия оплаты - {terms_of_payment_in_order_open_page} на странице Детали заказа {num_order} не соответствуют' \
        f' условиям оплаты при создании заказа в СРМ - {payment_terms_code_crm}'

    price_order_open_page = float(page.store_price_order())
    delivery_cost_order_open_page = page.store_delivery_cost()
    page.check_delivery_method(delivery_conditions)
    article_in_order_open_page = sorted(page.save_name_article_on_all_lines())
    discounts_order_open_page = sorted(page.sve_all_discounts())
    allowances_order_open_page = sorted(page.saving_surcharges_in_the_order())

    browser.switch_to.window(window_search_order_in_crm)
    page = SearchPq(browser, TestEnvironment.LINK_SEARCH_PQ_TST)
    time.sleep(2)
    page.search_order(num_order)
    page.go_to_order(num_order)

    page = PqPage(browser, url_object_tst)

    allowances_order_crm_page = sorted(page.save_all_allowance())
    assert allowances_order_crm_page == allowances_order_open_page, \
        f'Надбавки на странице заказа {num_order} в СРМ - {allowances_order_crm_page} не соответствуют надбавкам ' \
        f'на странице заказа в Опене - {allowances_order_open_page}'

    discounts_order_crm_page = sorted(page.store_all_discount())
    assert discounts_order_crm_page == discounts_order_open_page, \
        f'Скидки на странице заказа {num_order} в СРМ - {discounts_order_crm_page} не соответствуют скидкам на ' \
        f'странице в Опене - {discounts_order_open_page}'

    article_in_order_crm_page = sorted(page.save_list_articles_in_pq())
    assert article_in_order_crm_page == article_in_order_open_page, \
        f'Артикулы на странице заказа {num_order} в СРМ - {article_in_order_crm_page} не соответствуют артикулам на ' \
        f'странице заказа в Опене - {article_in_order_open_page}'

    delivery_cost_order_crm_page = page.saving_delivery_costs_in_rubles()
    assert delivery_cost_order_crm_page == delivery_cost_order_open_page, \
        f'Стоимость доставки - {delivery_cost_order_crm_page} на странице  заказа {num_order} в СРМ не соответствует ' \
        f'стоимости доставки - {delivery_cost_order_open_page} на странице заказа {num_order}  в Опене'

    price_order_crm_page = page.store_price_crm_order()
    assert price_order_crm_page == price_order_open_page, \
        f'Стоимость заказа {num_order} в CRM - {price_order_crm_page} не соответствует стоимости заказа в ' \
        f'Опене - {price_order_open_page}'

    browser.switch_to.window(window_pq_page_crm)
    browser.refresh()

    page = PqPage(browser, url_object_tst)
    num_dkp_pq_page_crm = sorted(page.save_all_num_dkp())
    assert num_dkp_pq_page_crm == list_all_num_dkp_open, \
        f'Список ДКП в СРМ - {num_dkp_pq_page_crm} не соответствует списку ДКП в Опене - {list_all_num_dkp_open}'
