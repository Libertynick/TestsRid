import allure
import pytest

from config import TestEnvironment
from crm_pages.organization_page.editing_organization_page import EditingOrganization, TitleDiscounts
from crm_pages.header_page.header_page import HeaderPage
from crm_pages.modal_new_kp.modal_new_kp import ModalNewKp
from crm_pages.object_page.object_page import ObjectPage, ParticipantsTab, EditingParticipantsPage, \
    ModalNewParticipantsPage, KpTab
from crm_pages.pq_page.pq_page import PqPage
from crm_pages.search_objects_page.search_object_page import SearchObjectPage


@allure.feature('Создание заказа из PQ')
@allure.story('PQ со спец. условиями Застройщика')
@pytest.mark.stage
def test_41745_pq_with_special_conditions_of_developer(
        browser,
        auth_crm_extru_start,
        auth_extru_crm_from_authorized_page,
        agreement_on_all_conditions_extru
):
    """PQ со спец. условиями Застройщика"""
    link_organization = 'https://ruecom-extru-tst.ridancorp.net/OneCRM/Classes/634?viewMode=view&id=f9b6699c-f571-49b7-a29f-4dc2585d20f8&fullWidth=false&modal=false&childid=772'

    login_crm = TestEnvironment.LOGIN_CRM
    first_contract = 'CD12624'  # Первый договор
    second_contract = 'CD12623'  # Второй договор
    object_num = TestEnvironment.OBJECT_TST
    name_organization_participant = 'ГК ПИК'  # Организация - участник в объекте
    participant_role = 'Застройщик'  # Роль участника
    participant_contact = 'Авертьева Наталья'  # Контакт участника
    num_distributor = '0014421083'
    num_contract_for_kp_created = '0014421083'  # Номер договора для создания КП
    developer_automat_2 = 'ГК ПИК - CD12624 Автомат 2'
    developer_automat_1 = 'ГК ПИК - CD12623 Автомат 1'

    auth_crm_extru_start(ruco=login_crm)

    page = EditingOrganization(browser, link_organization)
    page.open()
    page.go_to_title_discounts()

    window_discounts = browser.current_window_handle

    # Переход в первый договор и сохранение информации о спец. ценах
    page = TitleDiscounts(browser, link_organization)
    page.opening_a_contract_by_number_in_a_new_tab(first_contract)
    info_code_special_price_first_contract = page.save_code_discount_code_price_code()[0:3]
    print(info_code_special_price_first_contract)
    browser.close()

    browser.switch_to.window(window_discounts)

    # Переход во второй договор и сохранение информации о спец. ценах
    page.opening_a_contract_by_number_in_a_new_tab(second_contract)
    info_code_special_price_second_contract = page.save_code_discount_code_price_code()[3:5]
    print(info_code_special_price_second_contract, 'info_code_special_price_second_contract')
    browser.close()

    browser.switch_to.window(window_discounts)

    page = HeaderPage(browser, link_organization)
    page.go_to_object_page()

    page = SearchObjectPage(browser, link_organization)
    page.search_object(object_num)
    page.go_to_object(object_num)

    page = ObjectPage(browser, link_organization)
    page.go_chapter_participants()

    page = ParticipantsTab(browser, link_organization)
    organization_in_participants = page.checking_whether_there_is_an_organization_in_object_participants(
        name_organization_participant)

    # Если организация есть в участниках, то проверяем соответствие роли участника
    member_role_check = False
    if organization_in_participants is True:
        member_role_check = page.check_member_role(name_organization_participant, participant_role)

    # Если организация не в списке участников или роль организации - участника не соответствует ожидаемой,
    # то добавляем организацию в список участников с подходящей ролью

    if organization_in_participants is False or member_role_check is False:
        page.button_add_a_go_chapter_participants()

        page = ModalNewParticipantsPage(browser, link_organization)
        page.input_search_field_by_name(name_organization_participant)

        page = EditingParticipantsPage(browser, link_organization)
        page.input_specify_role(participant_role)
        page.select_a_contact_by_name(participant_contact)
        page.save_participants()

    page.go_chapter_participants()
    page = ParticipantsTab(browser, link_organization)
    organization_in_participants = page.checking_whether_there_is_an_organization_in_object_participants(
        name_organization_participant)
    assert organization_in_participants is True, \
        f'Организация {name_organization_participant} не добавлена в списки участников. Значение - ' \
        f'({organization_in_participants})'

    page = ObjectPage(browser, link_organization)
    page.click_add_kp()

    page = ModalNewKp(browser, link_organization)
    page.choice_distributor(num_distributor)
    page.choice_sap_code_main_contract(num_contract_for_kp_created)
    page.checking_selected_contract_number(num_contract_for_kp_created)
    page.choice_final_buyer()
    page.choice_of_developer(developer_automat_2)

    # Добавление кодов в КП из 1-ого договора
    codes_from_first_contract = [
                                    code['article'] + ' ' for code in info_code_special_price_first_contract
                                ][0:3]  # Коды из первого договора
    page.adding_codes(codes_from_first_contract)

    # Добавление кодов в КП из 2-ого договора
    codes_from_second_contract = [
                                     code['article'] + ' ' for code in info_code_special_price_second_contract
                                 ][0:2]  # Коды из 2-ого договора
    page.click_button_add_positions_to_open_add_field()
    page.adding_codes(codes_from_second_contract)

    # Смотрим есть ли автозамена у кодов из 1-ого договора. В случае, если есть автозамена сохраняем код, на который
    # был заменен
    for el in info_code_special_price_first_contract:
        autocorrect_article = page.saving_added_code_when_autocorrecting(el['article'])
        if autocorrect_article != '':
            el['article'] = autocorrect_article
            print(info_code_special_price_first_contract)

    # Смотрим есть ли автозамена у кодов из 2-ого договора. В случае, если есть автозамена сохраняем код, на который
    # был заменен
    for el in info_code_special_price_second_contract:
        autocorrect_article = page.saving_added_code_when_autocorrecting(el['article'])
        if autocorrect_article != '':
            el['article'] = autocorrect_article
            # print(info_code_special_price_second_contract)

    # Проверяем скидки по кодам с 1-ого договора
    for el in info_code_special_price_first_contract:
        discount_on_page_by_article = page.save_discount_distributor_by_article(el['article'])
        print(discount_on_page_by_article, 'discount_on_page_by_article')
        print(el['discount'], 'el["discount"]')
        assert float(discount_on_page_by_article) == float(el['discount']), \
            f'Скидки- ({float(discount_on_page_by_article)}) на странице у кода ({el["article"]}) не ' \
            f'равны скидкам ({el["discount"]}) из договора {first_contract}'

    # Проверяем, что при выборе 1-ого договора скидки кодов из 2-ого договора целочисленные (обычно в договоре скидки
    # указываются дробными, тем самым мы проверим, что скидки тянутся не из 2-ого договора на данные коды)
    for el in info_code_special_price_second_contract:
        discount_on_page_by_article = page.save_discount_distributor_by_article(el['article'])
        is_integer_discount = discount_on_page_by_article.is_integer()

        assert is_integer_discount is True, \
            f'Скидки у кода ({el["article"]}) не целочисленные - ({discount_on_page_by_article})'

    # Выбор другого застройщика
    page.choice_of_developer(developer_automat_1)

    # Проверяем скидки по кодам со 2-ого договора
    for el in info_code_special_price_second_contract:
        discount_on_page_by_article = page.save_discount_distributor_by_article(el['article'])
        print(el['article'], 'код со второго договора')
        print()

        assert float(discount_on_page_by_article) == float(el['discount']), \
            f'Скидки- ({float(discount_on_page_by_article)}) на странице у кода ({el["article"]}) не ' \
            f'равны скидкам ({el["discount"]}) из договора {second_contract}'

    # Проверяем, что при выборе 2-ого договора скидки кодов из 1-ого договора целочисленные (обычно в договоре скидки
    # указываются дробными, тем самым мы проверим, что скидки тянутся не из 2-ого договора на данные коды)
    for el in info_code_special_price_first_contract:
        discount_on_page_by_article = page.save_discount_distributor_by_article(el['article'])
        is_integer_discount = discount_on_page_by_article.is_integer()

        assert is_integer_discount is True, \
            f'Скидки у кода ({el["article"]}) не целочисленные - ({discount_on_page_by_article})'

    amount_total_in_kp_crm_after_adding_codes = page.store_amount_nds_total_in_kp_crm_rub()
    # Сохранение скидок
    all_discount_in_crm = page.store_all_discount()

    # Сохранение PQ и отправка на согласование
    page.click_btn_save_pq()
    num_pq = page.store_num_pq_in_title()
    print(num_pq)
    page.send_for_approval_from_modal_new_kp()
    page.modal_kp_has_not_been_pre_screened()

    # Переход на вкладку КП -> Переход на страницу PQ по номеру PQ
    page = ObjectPage(browser, link_organization)
    page.go_to_chapter_kp()
    page = KpTab(browser, link_organization)
    page.opening_pq_in_a_new_tab_by_number(num_pq)

    # Страница PQ
    page = PqPage(browser, link_organization)
    page.payment_condition_must_be_advance_payment()
    agreement_on_all_conditions_extru()

    # Сохранение итоговой суммы после согласования и сравнение с суммой до согласования
    page = PqPage(browser, link_organization)
    final_amount_after_agreement = page.saving_the_final_amount_rub_after_agreement()
    assert abs(final_amount_after_agreement - amount_total_in_kp_crm_after_adding_codes) < 0.5, \
        f'Сумма в PQ после согласования ({final_amount_after_agreement}) не равна сумме до согласования ' \
        f'({amount_total_in_kp_crm_after_adding_codes})'

    page.payment_condition_must_be_advance_payment()

    # Сохранение всех скидок после согласования и сравнение со скидками до сохранения
    discounts_after_agreement = page.store_all_discounts()
    assert all_discount_in_crm == discounts_after_agreement, \
        f'Скидки до сохранения - ({all_discount_in_crm}) не соответствуют скидкам после согласования - ' \
        f'({discounts_after_agreement})'

    url_pq = browser.current_url
    auth_extru_crm_from_authorized_page(url_page=url_pq, name_user=login_crm)

    page.create_account()
    page.waiting_for_account_creation()
    price_dkp_crm = page.store_price_dkp().replace(' ', '').replace(',', '.')
    price_dkp_crm = float(price_dkp_crm)
    assert price_dkp_crm == final_amount_after_agreement, \
        f'Итоговая сумма заказа (ДКП) - ({price_dkp_crm}) не соответствует сумме материнского КП - ' \
        f'({final_amount_after_agreement})'

    page.go_to_created_order()

    total_amount_distributor_in_pq_page = page.saving_the_final_amount_rub_after_agreement()
    # print(total_amount_distributor_in_pq_page, 'Стоимость дистра на странице PQ')
    assert abs(total_amount_distributor_in_pq_page - final_amount_after_agreement) < 0.5, \
        f'Общая сумма дистра на странице PQ - ({total_amount_distributor_in_pq_page}) не соответствует общей сумме ' \
        f'при создании КП - ({final_amount_after_agreement})'

    discounts_on_page_dkp = page.store_all_discounts()
    assert discounts_on_page_dkp == discounts_after_agreement, \
        f'Скидки на странице ДКП - ({discounts_on_page_dkp}) не соответствуют скидкам после согласования - ' \
        f'({discounts_after_agreement})'
