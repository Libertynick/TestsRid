"""Проверка лимитов и наличия
https://rucotfs.ridancorp.net/DanfossDev/CRM/_testPlans/define?planId=23513&suiteId=32537"""
import pytest

from config import ProdEnvironment
from open_pages.cart_page.cart_page import CartPage
from open_pages.header.header_page import Header
from open_pages.main_page.main_page import MainPage

ARTICLE = '003L0144'
QUANTITY_ARTICLE = '2000'
LIMIT = 1750


@pytest.mark.skip(reason='нет тестовых данных на проде')
@pytest.mark.prod
def test_checking_limits_and_availability(browser):
    """Тест Проверка лимитов и наличия"""
    page = MainPage(browser, ProdEnvironment.OPEN_URL)
    page.open()
    page.authorization_from_main_page(ProdEnvironment.EMAIL_OPEN_PROD, ProdEnvironment.PASSWORD_OPEN_PROD)

    # Переход в корзину
    page = Header(browser, ProdEnvironment.OPEN_URL)
    page.click_basket()

    # Действия в корзине
    page = CartPage(browser, ProdEnvironment.OPEN_URL)
    page.type_product_in_input(f'{ARTICLE} {QUANTITY_ARTICLE}')
    page.click_add_button()
    quantity_in_stock = page.store_quantity_in_stock(ARTICLE)
    print(quantity_in_stock, 'Количество на складе')
    assert int(quantity_in_stock) <= LIMIT, \
        f'Отображение количества на складе ({quantity_in_stock}) превышает лимит ({LIMIT})'

    must_be_quantity_on_order = int(QUANTITY_ARTICLE) - int(quantity_in_stock)  # Должно быть количество под заказ
    print(must_be_quantity_on_order, 'Нужное Количество под заказ')

    order_quantity_per_page = page.keeping_the_quantity_on_order(ARTICLE)  # Колчество под заказ, которое на странице
    print(order_quantity_per_page)
    assert must_be_quantity_on_order == int(order_quantity_per_page), \
        f'Ожидаемое количество под заказ ({must_be_quantity_on_order}) ' \
        f'не равно количеству под заказ на странице ({order_quantity_per_page})'
