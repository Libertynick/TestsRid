"""31664 Перевод Кредитного счета в 1С до статуса Черновик в Реестре запросов клиентов """
import pdb
import time
from datetime import datetime

import pytest
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

from ridan_1C_pages.adaptation_page.adaptation_page import AdaptationPage, ArmShipmentToCustomersPageStep1, \
    ArmShipmentToCustomersPageStep2, ArmShipmentToCustomersPageStep3
from ridan_1C_pages.authorization_page.autarization_page import AuthorizationPage
from base_page.base_page import BasePage
from base_page.base_page import BasePageCrm
from crm_pages.header_page.header_page import HeaderPage, Tools
from crm_pages.modal_new_kp.modal_new_kp import ModalNewKp
from crm_pages.pq_page.pq_page import PqPage
from crm_pages.search_objects_page.search_object_page import SearchObjectPage, SearchObjectsPageLocators
from crm_pages.object_page.object_page import ObjectPage, KpTab

from config import TestEnvironment
from ridan_1C_pages.authorization_page.authorization_page_locators import AuthorizationPageLocators
from ridan_1C_pages.home_page.home_page import Homepage
from ridan_1C_pages.invoice_for_design.invoice_for_design_page import InvoiceForDesign, ModalDocumentCreated
from ridan_1C_pages.menu_sections.menu_sections import MenuSection
from ridan_1C_pages.sale_section_page.sale_section_page import SaleSectionPage, CustomerOrders, SingleCustomerOrderPage
from ridan_1C_pages.transportation_task_page.transportation_task_page import TransportationTaskPage
from ridan_1C_pages.warehouse_and_delivery_page.warehouse_and_delivery_page import WarehouseAndDeliverySectionsPage, \
    WarehouseOrdersPage, GoodsIssueNote, RelatedDocumentsPage, SelectionPlacementOfGoodsPage
from tests.test_open_only.test_27682_tickets_from_shipment_statuses_page import \
    tickets_from_shipment_statuses_page_27682
from tms_pages.customer_service_pages.request_page.request_page import RequestPage
from tms_pages.customer_service_pages.tickets_page.tickets_page import TicketsPage
from tms_pages.packaging_register.packaging_register_page import PackagingRegisterPage
from tms_pages.register_of_applications_for_packaging_pages.register_of_applications_for_packaging_page import \
    RegisterOfApplicationsForPackaging
from tms_pages.transportation_department_page.transportation_department_page import TransportationDepartmentPage

# ARTICLE = '003L0144 5'
# ARTICLE = '013G2990  5'
ARTICLE = '003L0143  5'

PAYMENT_PERCENTAGE = '0%'  # Процент оплаты сумманый перед отгрузкой
# ADVANCE_PAYMENT = '100%'  # Размер аванса для размещения заказа
ADVANCE_PAYMENT = '0%'  # Размер аванса для размещения заказа
DAYS_OF_LENDING = '3'  # Количество дней кредитования
DELIVERY_CONDITIONS = 'Доставка на указанный адрес'
DELIVERY_ADDRESS = 'Россия, г Иваново, ул Кузнецова, д 12'
NAME_COOKIE = 'ASP.NET_SessionId'


def creating_an_invoice_and_transferring_it_to_a_draft(browser):
    """31664 Перевод Кредитного счета в 1С до статуса Черновик в Реестре запросов клиентов """
    # Авторизация в crm

    page = BasePageCrm(browser, TestEnvironment.LINK_CRM_TST)
    page.authentication_crm(TestEnvironment.LINK_CRM_TST, TestEnvironment.LOGIN_CRM, TestEnvironment.PASSWORD_CRM_TST)
    page.open()

    # Переход на страницу поиска объектов
    page = HeaderPage(browser, TestEnvironment.LINK_CRM_TST)
    page.go_to_object_page()

    page = SearchObjectPage(browser, TestEnvironment.LINK_CRM_TST)
    # Выбор офиса продаж
    page.selecting_a_sales_office()

    # поиск объекта
    page.search_object(TestEnvironment.OBJECT_TST)

    # Переход в объект
    page.go_to_object(TestEnvironment.OBJECT_TST)

    # Страница Объекта
    page = ObjectPage(browser, TestEnvironment.LINK_CRM_TST)
    page.click_add_kp()

    time.sleep(15)
    # Модалка создания КП
    page = ModalNewKp(browser, TestEnvironment.LINK_CRM_TST)
    page.choice_distributor(TestEnvironment.DISTRIBUTOR_VODOKOMFORT_TST)
    page.choice_sap_code_main_contract()
    page.choice_final_buyer()
    page.expanding_payment_terms_menu()
    page.click_on_button_agree_on_payment_terms()
    page.choice_of_total_payment_before_shipment(PAYMENT_PERCENTAGE)
    page.choice_of_advance_payment_amount_for_placement(ADVANCE_PAYMENT)
    page.choice_lending_duration(DAYS_OF_LENDING)
    page.selection_of_delivery_conditions(DELIVERY_CONDITIONS)
    page.entering_a_shipping_address(DELIVERY_ADDRESS)
    page.choice_of_free_payment_mode()
    page.adding_codes(ARTICLE)
    page.send_for_approval_from_modal_new_kp()
    page.modal_kp_has_not_been_pre_screened()
    page.click_on_the_button_create_kp_without_request()

    page = ObjectPage(browser, TestEnvironment.LINK_CRM_TST)
    page.go_to_chapter_kp()
    num_pq = page.store_last_pq()
    print(num_pq)
    page = KpTab(browser, TestEnvironment.LINK_CRM_TST)
    page.opening_pq_in_a_new_tab_by_number(num_pq)

    # Страница PQ
    page = PqPage(browser, TestEnvironment.LINK_CRM_TST)
    page.agreement_on_all_conditions()

    page = Tools(browser, TestEnvironment.LINK_CRM_TST)
    page.change_for_yourself()

    page = PqPage(browser, TestEnvironment.LINK_CRM_TST)
    page.delete_cookie_by_name(NAME_COOKIE)
    page.create_account()
    page.waiting_for_account_creation()
    salesman = page.store_salesman()
    print(salesman, 'Продавец')
    ready_account = page.store_created_account()  # Готовый счет
    price_dkp_crm = page.store_price_dkp()
    quantity_of_goods_in_the_order = page.saving_the_quantity_of_goods_in_the_order()  # Количество товара в заказе
    articles_crm = page.store_articles_product()  # Список артикулов в заказе
    print(f'Готовый счет: {ready_account}', f'Стоимость ДКП: {price_dkp_crm}',
          f'Артикулы в crm {articles_crm}', f'Количество товара в заказе: {quantity_of_goods_in_the_order}', sep='\n')
    # ready_account = '0023-007216'
    # Часть по 1С Ридан
    page = BasePage(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.open()
    time.sleep(2)

    wait = WebDriverWait(browser, 5)
    try:
        alert_present = wait.until(EC.alert_is_present())
        if alert_present:
            alert = browser.switch_to.alert
            alert.accept()
    except:
        time.sleep(1)
        browser.waiting_element_is_visibility_located_dom(AuthorizationPageLocators.LOCATOR_HEADER_AUTHORIZATION,
                                                          sec=90)

    page = AuthorizationPage(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.authorization(TestEnvironment.USERNAME_1C_RIDAN, TestEnvironment.PASSWORD_1C_RIDAN)

    page = Homepage(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.closing_modal_access_to_1c_turn()

    # Раздел Продажи
    page = SaleSectionPage(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.go_to_sale_section()
    page = CustomerOrders(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.go_to_customer_orders()
    page.order_search_by_number(ready_account)
    # page.comparison_of_the_cost_of_the_order_1c_with_crm(price_dkp_crm)
    page.go_to_the_found_order()

    # Раздел страницы Заказа
    page = SingleCustomerOrderPage(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.go_to_the_products_tab()
    page.checking_items_in_the_order(articles_crm)
    time.sleep(30)
    page.click_button_swipe_and_close()
    window_1c_order = browser.current_window_handle

    print('статусы отгрузок')
    # Часть по статусам отгрузок
    browser.execute_script("window.open('')")
    page.switching_window(-1)

    tickets_from_shipment_statuses_page_27682(browser,
                                              ready_account)  # Раскомментировать, как заработает список заказов в Опене

    browser.close()
    browser.switch_to.window(window_1c_order)

    # Раздел Адаптация
    page = AdaptationPage(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.click_adaptation_tab()
    page.go_to_new_arm_shipment_to_customers()

    # Страница АРМ Отгрузка клиентам
    # print('ARM ARM ')
    # time.sleep(60)
    page = ArmShipmentToCustomersPageStep1(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.choice_of_salesman(salesman)
    # page.choice_of_warehouse_leshkovo()

    page.click_btn_clear_customer_orders()
    page.click_select_order_kebab_menu()
    page.click_button_paste_from_clipboard()
    page.type_num_order_in_modal_paste_from_clipboard(ready_account)
    # page.disable_check_fill_selections_true()
    page.choice_of_withdrawal_with_debt()
    page.click_fill_button()

    page.checking_the_order_number_in_the_table_for_shipment(ready_account)
    # page.checking_the_quantity_of_goods_to_be_shipped(quantity_of_goods_in_the_order)
    # page.checking_the_article_in_the_table_for_shipment(articles_crm)
    page.click_button_set_a_mark()

    time.sleep(30)
    page.click_ship_button()

    # step 2
    page = ArmShipmentToCustomersPageStep2(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.click_button_further()
    page.should_be_header_step_2()
    page.should_be_input_delivery_address()
    page.should_be_input_delivery_method()
    page.should_be_input_delivery_area()
    page.should_be_input_delivery_carrier()
    page.click_button_further()

    # step 3
    page = ArmShipmentToCustomersPageStep3(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.should_be_header_step_3()
    page.expansion_of_the_list_in_the_form_of_a_plus()
    page.should_be_information_about_free_shipping()
    # page.should_be_product_articles(articles_crm)
    page.click_button_form_a_task()
    number_transaction_job = page.store_number_transportation_job()
    print(number_transaction_job, 'Номер задания на перевозку')
    page.click_button_open_job_in_selected_row()

    # Страница Задание на проверку
    page = TransportationTaskPage(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    status_task = 'К погрузке'  # Статус задания на проверку
    page.select_status(status_task)
    page.click_button_run_and_close()

    page = ArmShipmentToCustomersPageStep3(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.should_be_header_step_3()
    number_transaction_job_result = page.store_number_transportation_job()

    assert number_transaction_job == number_transaction_job_result, \
        f'Номер задания на перевозку {number_transaction_job}' \
        f'не равен итоговому Номеру задания на перевозку {number_transaction_job_result}'
    return ready_account, salesman, price_dkp_crm


def carrying_out_the_application_transferred_to_packaging(browser, num_order: str):
    """Проведение заявки в Реестре запросов клиентов до статуса Передано на упаковку.
    Номер тест-кейса 31741. num_order- номер готового счета"""

    department_code = '4101'  # Код отдела продаж

    # Страница тикетов
    page = BasePageCrm(browser, TestEnvironment.LINK_TICKETS_TMS_TST)
    page.open()
    # page = TicketsPage(browser, TestEnvironment.LINK_TICKETS_TMS_TST)
    wait = WebDriverWait(browser, 5.0)
    wait.until(EC.alert_is_present())
    alert = browser.switch_to.alert
    alert.accept()
    page.authentication_crm(TestEnvironment.LINK_TICKETS_TMS_TST, TestEnvironment.LOGIN_CRM,
                            TestEnvironment.PASSWORD_CRM_TST)

    # browser.execute_script("window.open(arguments[0])", TestEnvironment.LINK_TICKETS_TMS_TST)
    # page.switching_window(-1)

    page = TicketsPage(browser, TestEnvironment.LINK_TICKETS_TMS_TST)
    page.search_for_a_packaging_request_by_order_number(num_order)
    page.open_request()

    # Страница запроса
    page = RequestPage(browser, TestEnvironment.LINK_TICKETS_TMS_TST)
    page.switch_to_frame_ticket()
    number_request = page.store_of_number_request()
    print(number_request, 'Номер запроса')
    page.department_code_selection(department_code)
    page.checking_the_selection_of_the_check_box_delivery()
    page.switch_to_frame_delivery()
    page.select_a_delivery_address_through_the_check_box()
    page.recipient_selection()
    page.switch_to_frame_info_transportation_task()
    page.checking_the_selected_account(num_order)
    browser.switch_to.default_content()
    page.switch_to_frame_ticket()
    page.choice_at_whose_expense_delivery_one_hundred_include_in_order()
    page.click_button_send_an_application()

    page.switching_window(-1)
    return number_request


def request_with_tms_delivery(browser, number_request: str, num_order: str, salesman: str, price_dkp_crm: str):
    """Заявка с Доставкой TMS. 31769 - номер тест-кейса. number_request - номер запроса
    num_order - номер готового счета,
    salesman - продавец
    price_dkp_crm - стоимость итогового счета"""
    type_of_document_to_be_printed_application = "Заявка"  # Тип документа для печати - заявка
    type_of_document_to_be_printed_label = "Этикетка"  # Тип документа для печати - Этикетка
    status_shipment = 'Отгружен'  # Статус отгрузки

    value = '1'  # value Тип упаковки Европалет
    type_packaging = 'Европаллет'  # Тип упаковки
    height_package = '30'  # Высота упаковки
    weight_package = '10'  # масса упаковки
    transport_company = 'АО "ДПД РУС", 7713215523'  # Трнаспортная компания
    driver_name = 'Борисевич Алексей Владимирович'  # Имя водителя
    tonnage = '1.5-тонн'  # тоннаж
    type_delivery = 'Сборная'  # Тип доставки
    arrival_time = '08:00'  # Время прибытия
    delivery_cost = '12345678911'  # Стоимость доставки

    # num_po_in_application = '00-00009692'  # Разблокировать при явной передаче заявки. В другом случае заявка создается в методе saving_the_po_number_in_the_application

    page = RegisterOfApplicationsForPackaging(browser, TestEnvironment.LINK_TMS_REGISTER_OF_APPLICATIONS_FOR_PACKAGING)
    time.sleep(1)
    page.open()
    # browser.execute_script(f"window.open(arguments[0]), '_self'", TestEnvironment.LINK_TMS_REGISTER_OF_APPLICATIONS_FOR_PACKAGING)

    time.sleep(5)
    browser.switch_to.default_content()
    page.should_header_register_of_warehouse_coordinators()
    page.choice_of_company(salesman)
    page.switch_to_iframe_main()

    page.search_for_an_application_by_number(number_request)
    page.transition_to_the_found_application()
    browser.switch_to.default_content()
    page.switch_to_frame_request()
    page.switch_to_frame_ticket()
    page.application_status_should_be_new()
    page.click_transfer_to_packaging()
    page.switch_to_frame_20_195()

    # pdb.set_trace()
    page.click_button_check()
    browser.switch_to.default_content()
    page.switch_to_frame_request()
    page.switch_to_frame_ticket()
    packing_request_number = page.store_packing_request_number()
    buyer = page.store_buyer()
    page.switch_to_frame_20_195()
    num_po_in_application = page.saving_the_po_number_in_the_application()

    print(packing_request_number, 'Номер запроса на упаковку')
    print(num_po_in_application, 'Номер PO в заявке')
    print(buyer, 'Покупатель')

    # # Часть по 1с, переход в раздел Склад и доставка

    browser.delete_all_cookies()
    browser.refresh()

    page = AuthorizationPage(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.open()
    page.authorization(TestEnvironment.USERNAME_1C_RIDAN, TestEnvironment.PASSWORD_1C_RIDAN)

    page = Homepage(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.closing_modal_access_to_1c_turn()

    page = MenuSection(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.go_to_section_warehouse_and_delivery()

    # # Переход в Складские ордера
    page = WarehouseAndDeliverySectionsPage(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.go_to_section_warehouse_orders()
    page = WarehouseOrdersPage(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.select_warehouse_leshkovo()
    page.should_be_a_list_of_documents()
    page.entry_of_application_number_po(num_po_in_application)
    page.go_to_application()

    # Странца Расходный ордер на товары
    page = GoodsIssueNote(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.click_on_the_report_button()
    page.selecting_related_documents_in_reports()

    # # Страница связанные документы
    page = RelatedDocumentsPage(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.transition_to_the_document_selection_placement_of_goods()
    browser.switch_to.default_content()

    # # Страница Отбор (размещение) товаров
    page = SelectionPlacementOfGoodsPage(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    article = ARTICLE.split(' ')[0]
    quantity_article = ARTICLE.split(' ')[1]
    page.print_selection_assembly_sheet(article, quantity_article)
    page.back_from_the_page_selection_task()
    page.select_status_without_errors()
    page.click_on_the_button_to_hold_and_close()

    # Часть по ТМС - реестр заявок на упаковку
    page = RegisterOfApplicationsForPackaging(browser, TestEnvironment.LINK_TMS_REGISTER_OF_APPLICATIONS_FOR_PACKAGING)
    browser.execute_script("window.open(arguments[0])", TestEnvironment.LINK_TMS_REGISTER_OF_APPLICATIONS_FOR_PACKAGING)
    page.switching_window(-1)
    page.open()
    time.sleep(5)
    page.should_header_register_of_warehouse_coordinators()
    page.choice_of_company(salesman)
    page.switch_to_iframe_main()
    page.search_for_an_application_by_number(number_request)
    page.transition_to_the_found_application()
    browser.switch_to.default_content()
    page.switch_to_frame_request()
    page.switch_to_frame_ticket()
    page.choice_of_document_type_application(type_of_document_to_be_printed_application)
    # packing_request_number = '2271989'

    # Печать и проверка скачивания документа Тикет
    current_date = datetime.now().strftime("%d%m%Y")
    name_of_the_downloaded_ticket_document = f'ticket_{packing_request_number}_{current_date}.docx'
    page.click_button_print()
    page.checking_the_download_document_in_the_download_folder(name_of_the_downloaded_ticket_document)

    # Скачивание и проверка скачивая документа Этикетка
    page = RegisterOfApplicationsForPackaging(browser, TestEnvironment.LINK_TMS_REGISTER_OF_APPLICATIONS_FOR_PACKAGING)
    browser.execute_script("window.open(arguments[0])", TestEnvironment.LINK_TMS_REGISTER_OF_APPLICATIONS_FOR_PACKAGING)
    page.switching_window(-1)
    page.open()
    time.sleep(5)
    page.should_header_register_of_warehouse_coordinators()
    page.choice_of_company(salesman)
    page.switch_to_iframe_main()
    page.search_for_an_application_by_number(number_request)
    page.transition_to_the_found_application()
    browser.switch_to.default_content()
    page.switch_to_frame_request()
    page.switch_to_frame_ticket()

    name_of_the_downloaded_label_document = f'label_{packing_request_number}_7.docx'
    page.choice_of_document_type_application(type_of_document_to_be_printed_label)
    page.click_button_print()
    page.checking_the_download_document_in_the_download_folder(name_of_the_downloaded_label_document)

    # Реестр упаковки
    page = PackagingRegisterPage(browser, TestEnvironment.LINK_PACKAGING_REGISTER_TST)
    page.open()
    page.should_be_the_heading_register_of_packages()
    page.switch_to_frame_main()
    page.search_for_packaging(packing_request_number)
    browser.switch_to.default_content()
    page.switch_to_frame_request()
    page.switch_to_frame_iframe_ticket()
    page.choice_of_who_packed()
    page.loading_area_selection()
    page.switch_to_frame_iframe_21_1247()
    page.choice_of_type_of_packaging(value, type_packaging)
    page.input_of_packing_height(height_package)
    page.input_of_packaging_weight(weight_package)
    page.save_packaging_info()
    packing_info = page.save_packing_info()
    print(packing_info)
    browser.switch_to.default_content()
    page.switch_to_frame_request()
    page.switch_to_frame_iframe_ticket()
    page.click_button_application_packed()
    page.switch_to_frame_iframe_21_1247()
    page.comparison_of_the_type_of_packaging_before_and_after_sending_for_packaging(packing_info)
    page.comparison_of_package_dimensions_before_and_after_shipment_for_packaging(packing_info)

    # Переход в 1С в Продажи - Оптовые продажи - Накладные к оформлению
    page.switching_window(1)

    page = SaleSectionPage(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.close_all_title()
    page.go_to_sale_section()
    page.go_to_invoice_for_design()

    # Раздел Накладные к оформлению. Документы продажи (к оформлению)
    page = InvoiceForDesign(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.click_selection_menu_customer_orders()
    page.click_button_paste_from_clipboard()
    page.entering_the_order_number_in_the_insert_modal(num_order)
    page.order_opening(num_order)

    # Страница заказа клиента
    page = SingleCustomerOrderPage(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.jump_to_related_documents(num_order)

    # Связанные документы
    page = RelatedDocumentsPage(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.transition_to_the_issue_note_document(num_po_in_application)

    page = GoodsIssueNote(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    # print('yoyo')
    # time.sleep(60)

    page.click_button_push_document()
    page.shipping_status_selection(status_shipment)
    page.click_button_hold_and_close()
    page.close_all_titles()

    page = SaleSectionPage(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.go_to_sale_section()
    page.go_to_invoice_for_design()

    # Раздел Накладные к оформлению. Документы продажи (к оформлению)
    page = InvoiceForDesign(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.click_selection_menu_customer_orders()
    page.click_button_paste_from_clipboard()
    page.entering_the_order_number_in_the_insert_modal(num_order)

    page.click_on_the_submit_button()
    time.sleep(2)
    page.switching_window(1)

    # Модалка Создан документ
    page = ModalDocumentCreated(browser, TestEnvironment.LINK_1C_RIDAN_TST)
    page.click_button_printing()
    page.click_on_the_button_selling_goods_in_print()
    page.click_title_sales_documents_for_processing()
    page.click_button_printing()
    page.choice_of_printing_invoice()  # нужно будет дописать этот метод!!!!

    page.click_title_sales_documents_for_processing()
    page.click_button_printing()
    page.click_universal_transfer_document_upd()  # нужно будет дописать этот метод!!!!
    page.click_title_sales_documents_for_processing()
    page.click_button_accept_and_close()

    # Перехрод в TMS
    # page = RegisterOfApplicationsForPackaging(browser, TestEnvironment.LINK_TMS_REGISTER_OF_APPLICATIONS_FOR_PACKAGING)
    # browser.execute_script("window.open(arguments[0])", TestEnvironment.LINK_TMS_REGISTER_OF_APPLICATIONS_FOR_PACKAGING)
    # page.switching_window(-1)
    page.switching_window(2)

    page = RegisterOfApplicationsForPackaging(browser, TestEnvironment.LINK_TMS_REGISTER_OF_APPLICATIONS_FOR_PACKAGING)
    page.choice_of_company(salesman)
    page.switch_to_iframe_main()
    page.search_for_an_application_by_number(number_request)
    page.transition_to_the_found_application()
    browser.switch_to.default_content()
    page.switch_to_frame_request()
    page.switch_to_frame_ticket()
    page.should_be_status_packed()
    page.click_button_documents_are_ready()

    # Переход в транспортный отдел

    browser.execute_script("window.open(arguments[0])", TestEnvironment.LINK_TRANSPORTATION_DEPARTMENT)
    page.switching_window(-1)

    time.sleep(1)
    page = BasePageCrm(browser, TestEnvironment.LINK_TRANSPORTATION_DEPARTMENT)

    page.open()
    time.sleep(1)
    page.authentication_crm(
        TestEnvironment.LINK_TRANSPORTATION_DEPARTMENT, TestEnvironment.LOGIN_CRM, TestEnvironment.PASSWORD_CRM_TST)
    time.sleep(1)
    browser.refresh()

    time.sleep(1)
    page.authentication_crm(TestEnvironment.LINK_TRANSPORTATION_DEPARTMENT, TestEnvironment.LOGIN_CRM,
                            TestEnvironment.PASSWORD_CRM_TST)
    # page.open()
    time.sleep(1)

    # browser.refresh()

    page = TransportationDepartmentPage(browser, TestEnvironment.LINK_TRANSPORTATION_DEPARTMENT)
    page.switch_to_main_frame()
    page.waiting_for_loader_processing_loading()
    page.search_for_an_application_by_number(number_request)
    page.opening_an_application(number_request)
    # page.switch_to_request_frame()
    # page.switch_to_ticket_frame()
    page.click_menu_delivery_and_pickup_and_company_name()
    page.choice_of_transport_company(transport_company)
    page.choice_driver(driver_name)
    page.choice_number_phone()
    page.choice_number_of_the_car()
    page.choice_mark_car()
    page.choice_tonnage(tonnage)
    page.choice_of_delivery_type(type_delivery)
    page.choice_of_arrival_time(arrival_time)
    page.click_button_pre_registration()
    page.click_button_machine_formed()
    page.click_button_machine_ordered()
    browser.switch_to.default_content()
    page.switch_to_main_frame()
    page.document_download_check_dpd()
    browser.switch_to.default_content()
    page.switch_to_request_frame()
    page.switch_to_ticket_frame()
    page.click_button_minibus()
    page.switch_to_frame_frame_24_248()
    page.click_button_change()
    page.entering_a_value_in_a_field_num_tn_and_sum(delivery_cost)
    page.click_button_save(delivery_cost)
    grand_total_in_transportation_department_page = page.saving_the_grand_total()
    print(grand_total_in_transportation_department_page,
          'Итоговая стоимость на странице реестр транспорта для доставки')
    price_dkp_crm = price_dkp_crm.split()
    price_dkp_crm = ''.join(price_dkp_crm)
    price_dkp_crm = int(float(price_dkp_crm.replace(',', '.')))

    #  Сверка итоговой стоимости заказа в ДКП CRM и Итоговой стоимости на странице реестр транспорта для доставки
    assert grand_total_in_transportation_department_page == price_dkp_crm, \
        f'Итоговая стоимость на странице реестр транспорта для доставки - ({grand_total_in_transportation_department_page}) ' \
        f'не равна итоговой стоимости готового счета в crm - ({price_dkp_crm})'

    #  Переход в реестр координаторов склада
    page = RegisterOfApplicationsForPackaging(browser, TestEnvironment.LINK_TMS_REGISTER_OF_APPLICATIONS_FOR_PACKAGING)
    page.open()

    time.sleep(5)
    browser.switch_to.default_content()
    page.should_header_register_of_warehouse_coordinators()
    page.choice_of_company(salesman)
    page.switch_to_iframe_main()
    page.search_for_an_application_by_number(number_request)
    page.switch_to_display_delivery_information()
    page.must_be_the_status_of_the_car_ordered()
    num_req_for_the_machine = page.storing_request_number_for_the_machine()
    print(num_req_for_the_machine, 'Номер запроса на машину')
    info_carrier = page.store_carrier_information()
    print(info_carrier, 'Информация о перевозчике')
    page.checking_the_display_of_the_transport_company(info_carrier, transport_company)
    page.driver_display_check(info_carrier, driver_name)
    page.checking_the_display_of_the_type_tonnage_of_the_machine(type_delivery)
    page.switch_to_frame_frame_23_226()
    page.checking_the_value_of_the_cargo(price_dkp_crm)
    page.download_document_tn(num_req_for_the_machine)
    page.download_document_ttn(num_req_for_the_machine)
    page.download_document_up_list(num_req_for_the_machine)
    browser.switch_to.default_content()
    page.switch_to_frame_request()
    page.switch_to_frame_ticket()
    page.click_button_car_arrived()
    page.click_button_send_for_loading()
    page.download_document_printing(num_req_for_the_machine)


@pytest.mark.skip(reason='нужно актуализировать')
# @pytest.mark.stage
def test_tms_order_shipment_with_delivery(browser):
    num_order, salesman, price_dkp_crm = creating_an_invoice_and_transferring_it_to_a_draft(browser)
    print(num_order, 'Конец теста 1 >>>>>>><<<<<<<')

    num_request = carrying_out_the_application_transferred_to_packaging(browser, num_order)
    print('Конец теста 2 >>>>>>><<<<<<<')

    # salesman = 'РИДАН ТРЕЙД'
    # num_order = 'RT23-011680'
    # num_request = '2272149'
    request_with_tms_delivery(browser, num_request, num_order, salesman, price_dkp_crm)
    print('Конец теста 3 >>>>>>><<<<<<<')
