import os
from pathlib import Path
from time import strftime

import allure
import pytest

from config import TestEnvironment
from crm_pages.athorization_page.authorization_page import AuthorizationPage
from crm_pages.edit_object_header.edit_object_header_page import EditPageObjectPage, EditAddressInputPage
from crm_pages.header_page.header_page import HeaderPage
from crm_pages.modal_potential.modal_potential_page import ModalPotentialPage
from crm_pages.object_page.object_page import ObjectPage, ModalNewParticipantsPage, EditingParticipantsPage, \
    WindowEditDeskReportPage, ParticipantsTab
from crm_pages.search_objects_page.search_object_page import SearchObjectPage


def search_object(browser, num_object: str):
    """Поиск объекта"""
    page = SearchObjectPage(browser, TestEnvironment.LINK_CRM_TST)
    # Выбор офиса продаж
    page.selecting_a_sales_office()
    # поиск объекта
    page.search_object(num_object)
    # Переход в объект
    page.go_to_object(num_object)


def create_new_object_24494(browser):
    """Создание нового объекта"""
    name = 'AutoTest Python '
    dataname = strftime("%d-%m-%Y %H:%M")
    adress = 'Красногорск, Ленина, 4'
    input_name_manager = 'Анисимов Александр'
    name_designer = 'Капитанова Юлия'
    text_note = 'Автотест'
    user_1 = 'RUCO2012'  # Капитанова Юлия
    # user_2 = 'Пяничук Екатерина'

    page_authorization = AuthorizationPage(browser, TestEnvironment.LINK_CRM_TST)
    page_authorization.open()
    page_authorization.authorization_extru(user_1, TestEnvironment.PASSWORD_CRM_TST_EXTRU)

    # Переход на страницу объектов
    page = HeaderPage(browser, TestEnvironment.LINK_CRM_TST)
    page.go_to_object_page()
    page.create_new_object()

    # Заполнение полей в шапке объекта
    page = EditPageObjectPage(browser, TestEnvironment.LINK_CRM_TST)

    page.input_name_object(name, dataname)
    page.indicate_the_address_of_object()
    page = EditAddressInputPage(browser, TestEnvironment.LINK_CRM_TST)
    page.address_input(adress)
    page = EditPageObjectPage(browser, TestEnvironment.LINK_CRM_TST)
    # Заполнение проектного адреса
    page.input_project_adress(adress)
    # Заполнение ответственного менеджера
    page.input_name_manager(input_name_manager)
    # Заполнение поля Проектная группа
    page.input_project_team()
    # Заполнение поля Инженер проектной группы
    page.selection_of_engineer_project_team(name_designer)
    # Заполнение Профиля
    page.object_profile_selection()
    # Заполнение Рынка
    page.choose_market()
    # Заполнение Стадии
    page.choose_study()
    # Заполнение поля Примечание
    page.input_field_note(text_note)
    # Сохранение созданного объекта
    page.save_edit_object()
    page = ObjectPage(browser, TestEnvironment.LINK_CRM_TST)
    num_object = page.save_name_object()

    page = HeaderPage(browser, TestEnvironment.LINK_CRM_TST)
    page.activate_profile_menu()
    page.logout_user()

    return num_object


def adding_a_member_to_an_object_24505(browser, num_object):
    """Добавление Участника на объект"""
    user_1 = 'RUCO2012'  # Капитанова Юлия
    # user_2 = 'Пяничук Екатерина'
    # name_participants = 'CRM'
    name_participants = 'Ridan CRM-Desk'
    specify_role = 'Проектировщик'
    contact_field = 'Валиев Александр'
    eng_department = 'ТП'
    member_contact_field = 'Валиев Александр Valiev@ridan.ru'
    member_specify_role = 'Проектировщик (ТП/Кот )'

    # Вход и авторизация
    page_authorization = AuthorizationPage(browser, TestEnvironment.LINK_CRM_TST)
    page_authorization.open()
    page_authorization.authorization_extru(user_1, TestEnvironment.PASSWORD_CRM_TST_EXTRU)

    # Переход на страницу объектов
    page = HeaderPage(browser, TestEnvironment.LINK_CRM_TST)
    page.go_to_object_page()
    search_object(browser, num_object)
    # Переход во вкладку Участники
    page = ObjectPage(browser, TestEnvironment.LINK_CRM_TST)
    page.go_chapter_participants_new_object()
    # Добавление нового участника

    page = ParticipantsTab(browser, TestEnvironment.LINK_CRM_TST)
    page.button_add_a_go_chapter_participants()
    page = ModalNewParticipantsPage(browser, TestEnvironment.LINK_CRM_TST)
    page.input_search_field_by_name(name_participants)
    # Редактирования Участника
    page = EditingParticipantsPage(browser, TestEnvironment.LINK_CRM_TST)
    page.input_specify_role(specify_role)
    page.input_contact_field(contact_field)
    page.input_engineering_department(eng_department)
    page.save_participants()
    # Проврека что добавлен верный Участник
    page = ObjectPage(browser, TestEnvironment.LINK_CRM_TST)
    browser.refresh()

    page = ParticipantsTab(browser, TestEnvironment.LINK_CRM_TST)
    page.member_retention_check(member_contact_field, member_specify_role)

    page = HeaderPage(browser, TestEnvironment.LINK_CRM_TST)
    page.activate_profile_menu()
    page.logout_user()


# @pytest.mark.skip(reason='При загрузке файлов через clever desc ошибка.')
def building_new_potential_and_work_cleverdesk_25654(browser, num_object):
    """Тест на создание нового инженерного раздела и обработка спецификации CleverDesk"""
    user_1 = 'RUCO2012'  # Капитанова Юлия
    # user_2 = 'Пяничук Екатерина'
    document = str(Path.cwd() / "files_to_upload_to_page/Для_CleverDesk - 2 (ТП).pdf")
    current_path_to_document = os.path.realpath(document)

    # Вход и авторизация
    page_authorization = AuthorizationPage(browser, TestEnvironment.LINK_CRM_TST)
    page_authorization.open()
    page_authorization.authorization_extru(user_1, TestEnvironment.PASSWORD_CRM_TST_EXTRU)

    # Переход на страницу объектов
    page = HeaderPage(browser, TestEnvironment.LINK_CRM_TST)
    page.go_to_object_page()
    search_object(browser, num_object)
    # Создание нового Потенциала для раздела ТП
    page = ObjectPage(browser, TestEnvironment.LINK_CRM_TST)
    page.click_button_plus_potential()
    page = ModalPotentialPage(browser, TestEnvironment.LINK_CRM_TST)
    page.click_button_chapter_tp()
    page.choose_designer_in_list()
    page.choose_expansion_tank()
    page.choose_to_in_tp_system()
    page.add_specification_potential(current_path_to_document)  # Загрузить спецификацию
    # Обработка раздела CleverDesk
    page.click_button_processing_clever_desk()
    page.click_button_save_potential_result_clever_desk()
    page.click_button_save_potential()
    page = ObjectPage(browser, TestEnvironment.LINK_CRM_TST)
    page.checking_partition_status_tp()
    page = ModalPotentialPage(browser, TestEnvironment.LINK_CRM_TST)
    page.click_button_close()


def creating_a_desktop_report(browser, num_object):
    """Тест на создание нового инженерного раздела и обработка спецификации CleverDesk"""
    user_1 = 'RUCO2012'  # Капитанова Юлия
    # user_2 = 'Пяничук Екатерина'
    user_desk_1 = 'RUCO3103'  # Яблоков Данила
    # user_desk_2 = 'Дмитриева Юлия'
    document = r'tests\test_open_only\Selenium_files\for_CleverDesk.pdf'
    current_path_to_document = os.path.realpath(document)
    article = '065B8207 10 003L0145R 10 w488900 10'
    comment = 'Auto test Desk Report'

    # Вход и авторизация
    page_authorization = AuthorizationPage(browser, TestEnvironment.LINK_CRM_TST)
    page_authorization.open()
    page_authorization.authorization_extru(user_1, TestEnvironment.PASSWORD_CRM_TST_EXTRU)

    # Переход на страницу объектов
    page = HeaderPage(browser, TestEnvironment.LINK_CRM_TST)
    page.go_to_object_page()
    search_object(browser, num_object)
    # Создание нового Потенциала для раздела ТВУ
    page = ObjectPage(browser, TestEnvironment.LINK_CRM_TST)
    page.click_button_plus_potential()
    page = ModalPotentialPage(browser, TestEnvironment.LINK_CRM_TST)
    page.click_button_chapter_tvy()
    page.choose_designer_in_list()
    page.add_specification_potential(current_path_to_document)  # Загрузить спецификацию
    page.click_button_save_potential_without_calculation_cleverdesk()
    current_url = browser.current_url

    # Смена пользователя
    page = HeaderPage(browser, current_url)
    page.activate_profile_menu()
    page.logout_user()

    page_authorization.authorization_extru(user_desk_1, TestEnvironment.PASSWORD_CRM_TST_EXTRU)
    page.open()

    # Добавление деск-отчета
    page = ObjectPage(browser, TestEnvironment.LINK_CRM_TST)
    page.click_section_tvu_with_status_unprocessed()
    page.click_button_plus_desk_report()
    page = WindowEditDeskReportPage(browser, TestEnvironment.LINK_CRM_TST)
    page.add_code_field_for_adding_code_numbers(article)
    page.click_button_categories_page()
    page.choose_brand_all_categories()
    page.add_file_desk_report(current_path_to_document)
    page.add_commentary(comment)
    page.click_button_save()

    # Проверка, что раздел ТВУ в статусе Обработано
    page = ObjectPage(browser, TestEnvironment.LINK_CRM_TST)
    page.check_status_tvu_section()


@allure.feature('CRM')
@allure.story('Смоук тест создание объекта + Добавление Участника + Создание потенциала + CleverDesk + Desk отчет')
@pytest.mark.stage
def test_24494_24505_25654_24508_working_with_an_object(browser):
    """Тест создание объекта + Добавление Участника + Создание потенциала + CleverDesk + Desk отчет"""
    num_object = create_new_object_24494(browser)
    print('Номер созданного объекта', num_object)
    adding_a_member_to_an_object_24505(browser, num_object)

    # pytest.skip('Пропускаем Тест на создание нового инженерного раздела и обработка спецификации CleverDesk. '
    #             'Не работает загрузка документов')
    building_new_potential_and_work_cleverdesk_25654(browser, num_object)
    # creating_a_desktop_report(browser, num_object)
