import allure
import pytest

from config import TestEnvironment
from crm_pages.modal_new_kp.modal_new_kp import ModalNewKp
from crm_pages.object_page.object_page import ObjectPage, KpTab
from crm_pages.pq_page.pq_page import PqPage


@allure.feature('Создание КП в СРМ')
@allure.story('Создание КП при условии обновления, с сохранением изменений (проверка UpdateOffer)')
@pytest.mark.stage
@pytest.mark.parametrize('article, article_step_2', [
    ('003L0391R 1 w488900 1 089N3104 1', 'w452192 2 TDU1009575 2 Q0404240004-1 2 150U5605 2'),
    ('TDU1009575 1 065B2931R 1 w488900 2', '015P2019 2 160S0074R 2 BQ0404240005-2 2')
]
                         )  # В списках с кодами должно быть указано количество
def test_48443_creation_of_a_cp_subject_to_update_with_saving_of_changes_update_offer_check(browser, article,
                                                                                            article_step_2,
                                                                                            auth_crm_extru_start):
    """Создание КП при условии обновления, с сохранением изменений (проверка UpdateOffer)"""
    login_crm = TestEnvironment.LOGIN_CRM

    distr = TestEnvironment.DISTRIBUTOR_VODOKOMFORT_TST
    object_tst = TestEnvironment.LINK_OBJECT_IN_TST

    contractual_terms = 'Кредит 3 дня (1% за кредит, 1% за конвертацию)'
    payment_terms_prepayment = 'Предоплата'
    potential_mode = 'Частичная закупка'
    delivery_terms = 'Доставка на указанный адрес'

    article_list = article.split(' ')[0::2]
    article_list_step_2 = article_step_2.split(' ')[0::2]  # Коды для второго добавления в кп
    article_for_delete = article_list[2]  # Код для удаления
    code_to_change_quantity = article_list[0]  # Код, в котором будет редактироваться количество

    auth_crm_extru_start(ruco=login_crm)

    # Страница Объекта
    page = ObjectPage(browser, object_tst)
    page.open()
    page.click_add_kp()

    page = ModalNewKp(browser, object_tst)
    page.potential_mode_selection(potential_mode)
    page.internal_course_toggle_switch_must_be_turned_on()
    page.choice_distributor(distr)
    page.choice_sap_code_main_contract()
    page.choice_final_buyer()
    page.there_must_be_an_advance_payment()
    page.expanding_payment_terms_menu()
    page.selection_of_contractual_payment_terms(contractual_terms)
    page.there_should_be_standard_contractual_terms()
    page.adding_codes(article)

    # Сохраняем итоговую сумму дистра по артикулу
    dict_total_price_distr_by_article = {}
    for el in article_list:
        dict_total_price_distr_by_article[el] = page.save_amount_with_nds_distributor_by_article(el)

    amount_total_in_kp_crm = page.store_amount_nds_total_in_kp_crm_rub()
    print(amount_total_in_kp_crm)
    page.click_btn_save_pq()
    num_pq = page.store_num_pq_in_title()

    # Проверка итоговой суммы после сохранения и по каждой позиции
    total_price_after_save = page.store_amount_nds_total_in_kp_crm_rub()
    with allure.step('Проверка итоговой суммы после сохранения и по каждой позиции'):
        assert total_price_after_save == amount_total_in_kp_crm, \
            f'Сумма {num_pq} до сохранения - ({amount_total_in_kp_crm}) ' \
            f'не равна сумме {num_pq} после сохранения - ({total_price_after_save})'

    dict_total_price_distr_by_article_after_save = {}
    for el in article_list:
        dict_total_price_distr_by_article_after_save[el] = page.save_amount_with_nds_distributor_by_article(el)

    # Сравниваем итоговую сумму дистра по позициям
    for key in dict_total_price_distr_by_article:
        with allure.step('Сверяем есть ли добавленный артикул в кп после сохранения'):
            assert key in dict_total_price_distr_by_article_after_save, \
                f'Артикул ({key}) в кп {num_pq} до сохранения не найден в кп после сохранения. ' \
                f'Словарь с артикулами и итоговыми ценами после сохранения - ({dict_total_price_distr_by_article_after_save})'
        value_before_save = dict_total_price_distr_by_article[key]
        value_after_save = dict_total_price_distr_by_article_after_save[key]
        with allure.step('Сверяем итоговую сумму дистра по позициям отдельно до сохранения с итоговой суммой дистра '
                         'по позициям после сохранения'):
            assert value_before_save == value_after_save, \
                f'Значение итоговой суммы дистра до сохранения {num_pq} - ({value_before_save}) артикула ({key}) ' \
                f'не равно итоговой сумме после сохранения - ({value_after_save})'

    page.close_modal_new_kp()

    page = ObjectPage(browser, object_tst)
    page.go_to_chapter_kp()
    page = KpTab(browser, object_tst)
    page.opening_pq_in_a_new_tab_by_number(num_pq)

    # Страница PQ
    page = PqPage(browser, object_tst)
    page.terms_of_delivery_must_be_standard_contractual_terms()
    page.selection_of_delivery_conditions(delivery_terms)
    page.check_the_delivery_paid()
    page.expanding_payment_terms_menu()
    page.selection_of_contractual_payment_terms(payment_terms_prepayment)
    page.entering_number_of_codes(code_to_change_quantity, 25)
    page.delete_position_by_article(article_for_delete)
    page.click_button_add_positions_to_open_add_field()
    page.adding_codes(article_step_2)

    # Список всех артикулов в кп
    article_list.remove(article_for_delete)  # Убираем из списка артикул, который удалили из КП
    all_articles_list = article_list + article_list_step_2

    # Увеличиваем скидку на 10% у каждого артикула
    dict_new_discount_by_article = {}  # Словарь со скидками по артикулу до отправки на согласование
    for el in all_articles_list:
        new_discount = page.save_discount_distributor_by_article(el) + 10
        dict_new_discount_by_article[el] = new_discount
        page.placing_a_discount_distributor_by_article(new_discount, el)

    page.checking_calculation_of_total_amount_with_nds_by_items(all_articles_list)

    dict_count_by_article_before_send_for_approval = page.save_quantity_of_goods_by_positions(
        all_articles_list)  # Словарь с количеством штук по артикулу до отправки на согласование

    # Сверяем итоговую стоимость в КП с суммой итоговых стоимостей по позициям
    total_price_after_discounts = page.store_amount_nds_total_in_kp_crm_rub()
    list_total_price_by_position_after_discounts = page.store_amount_nds_total_in_kp_crm_rub_by_position()

    sum_list_total_price_by_position_after_discounts = round(sum(list_total_price_by_position_after_discounts), 2)
    with allure.step('Сверяем итоговую стоимость в КП с суммой итоговых стоимостей по позициям'):
        assert abs(sum_list_total_price_by_position_after_discounts - total_price_after_discounts) < 0.5, \
            f'Сумма итоговых стоимостей по позициям - ({sum_list_total_price_by_position_after_discounts}) не ' \
            f'соответствует итоговой стоимости КП на странице - ({total_price_after_discounts})'

    page.send_for_approval_pq_page()
    page.modal_kp_has_not_been_pre_screened()

    # Сравниваем количество по артикулам до отправки на согласование с количеством после отправки на согласование
    dict_count_by_article_after_send_for_approval = page.save_quantity_of_goods_by_positions(
        all_articles_list)  # Словарь с количеством штук по артикулу после отправки на согласование
    with allure.step(
            'Сравниваем количество по артикулам до отправки на согласование с количеством после отправки на согласование'):
        assert dict_count_by_article_after_send_for_approval == dict_count_by_article_before_send_for_approval, \
            f'Количество штук у кодов в кп {num_pq} до согласования - ({dict_count_by_article_before_send_for_approval}) ' \
            f'не совпадает с количеством штук в кп после согласования - ({dict_count_by_article_after_send_for_approval})'

    #  Сравниваем скидки по артику до отправки на согласование со скидками по артикулу после отправки на согласование
    dict_discount_after_send_for_approval_by_article = {}  # Словарь со скидками по артикулу после отправки на согласование
    for el in all_articles_list:
        discount = page.save_discount_distributor_by_article(el)
        dict_discount_after_send_for_approval_by_article[el] = discount

    with allure.step(
            'Сравниваем скидки по артику до отправки на согласование со скидками по артикулу после отправки '
            'на согласование'):
        assert dict_discount_after_send_for_approval_by_article == dict_new_discount_by_article, \
            f'Скидки в кп {num_pq} после отправки на согласование - ({dict_discount_after_send_for_approval_by_article}) ' \
            f'не соответствуют скидкам, которые проставляли до отправки на согласование - ({dict_new_discount_by_article})'

    # Сравниваем итоговую сумму дистра по позициям до отправки на согласование и после
    list_total_price_by_position_after_send_for_approval = page.store_amount_nds_total_in_kp_crm_rub_by_position()
    with allure.step('Сравниваем итоговую сумму дистра по позициям до отправки на согласование и после'):
        assert list_total_price_by_position_after_send_for_approval == list_total_price_by_position_after_discounts, \
            f'Итоговая стоимость по позициям до отправки на согласование - ({list_total_price_by_position_after_discounts}) ' \
            f'е соответствует итоговой стоимости по позициям после отправки на согласование - ({list_total_price_by_position_after_send_for_approval})'

    # Сравниваем итоговые суммы в кп до отправки на согласование и после
    total_price_kp_after_send_for_approval = page.store_amount_nds_total_in_kp_crm_rub()
    with allure.step('Сравниваем итоговые суммы в кп до отправки на согласование и после'):
        assert total_price_kp_after_send_for_approval == total_price_after_discounts, \
            f'Итоговая стоимость в кп {num_pq} до отправки на согласование - ({total_price_after_discounts}) не равна ' \
            f'итоговой стоимости после отправки на согласование - ({total_price_kp_after_send_for_approval})'

    page.payment_condition_must_be_advance_payment()
    page.delivery_conditions_must_be_delivery_to_the_specified_address()
    page.check_the_delivery_paid()
