import allure
import pytest

from api_testing_project.services.crm_commerce.create_offer.api.api_create_offer import ApiCreateOffer
from api_testing_project.services.order.api.api_order_update_offer import ApiOrderUpdateOffer

from config import TestEnvironment
from crm_pages.assortments_page.assortments_page import AssortmentsPage, ModalEdit

from crm_pages.pq_page.pq_page import PqPage
from crm_pages.search_pq_page.search_pq_page import SearchPq

false = False
true = True
null = None
offer_id = ''

headers = {"userId": "898fcb61-194c-4267-b14a-cf08fcc08783"}  # userId Чернышева Елизавета
request_create_offer = {
    "docType": "Order",
    "showPriceWithDiscount": false,
    "showDiscount": true,
    "currencyDate": "2025-03-28T00:00:00",
    "currency": "RUB",
    "exchangeRateType": "YRU",
    "userName": "RUCO2573",
    "personId": "1AC7A866-9FC3-4964-8B29-4BE1AE3E2B58",
    "usePromoCurrency": true,
    "passportId": "4DBB2A44-D895-468D-A51F-AE98B9B3D487",
    "projectObject": {
        "id": "4DBB2A44-D895-468D-A51F-AE98B9B3D487"
    },
    "specTypeId": "02061701-51E6-402E-B18F-7BAE7A27F6FB",
    "specificationId": "83BAAF6E-B790-4F35-8910-9AA020449733",
    "paymentTerms": "RU00",
    "surchargesPayment": "0",
    "surchargesConversion": 0,
    "payPercentBeforePlacingIntoProduction": 100,
    "isDraft": true,
    "isEndUserPQ": false,
    "purchaseType": "121B015A-E76D-4688-9BB6-2A56EC6DE2EF",
    "finalBuyerId": "acb8f425-c3b6-4b38-9f34-1e7fbfd53fa9",
    "customerId": "acb8f425-c3b6-4b38-9f34-1e7fbfd53fa9",
    "clientInn": "7705238125",
    "debtorAccount": "RT25-7705238125-HE",
    "currencySpecialFixation": true,
    "setContractDiscounts": true,
    "orderLines": [
        {
            "ODID": null,
            "materialCode": "003L0144R",
            "RequestedMaterialCode": "003L0144R",
            "quantity": 1,
            "lineNumber": 1,
            "usePromoCurrency": true,
            "discountPercent": 48,
            "endClientDiscountPercent": 0,
            "excludePosition": false,
            "useSpecialPrice": false,
            "lineType": "Material",
            "copiedFromId": null
        },
        {
            "ODID": null,
            "materialCode": "003L0146R",
            "RequestedMaterialCode": "003L0146R",
            "quantity": 1,
            "lineNumber": 2,
            "usePromoCurrency": true,
            "discountPercent": 48,
            "endClientDiscountPercent": 0,
            "excludePosition": false,
            "useSpecialPrice": false,
            "lineType": "Material",
            "copiedFromId": null
        }
    ],
    "deliveryOptions": {
        "ConsigneeCode": null,
        "Condition": "RU",
        "DeliveryCostRUB": 0,
        "DeliveryCost": 0,
        "ClientFinalDelivery": null,
        "ConsigneeContacts": null,
        "consigneeAgreementDelivery": {
            "SourceFiasId": "00000000-0000-0000-0000-000000000000",
            "Address": "",
            "PaidDelivery": false,
            "ConditionDescription": "Стандартные договорные условия",
            "INN": "7705238125"
        },
        "CostIncludedInOrder": false,
        "totalDeliveryWeight": 0.516,
        "endPoint": "ToTK",
        "deliveryType": "Pickup",
        "consigneeId": "00000000-0000-0000-0000-000000000000"
    },
    "deliveryOptionsHex": null,
    "deliveryOptionsProd": null,
    "deliveryOptionsDZRProd": null,
    "isExport": false,
    "validDays": 14,
    "source": null,
    "sellerId": "20C340FE-6AFF-486F-B248-FD8DBE2C93CD",
    "IsATOffer": false,
    "autoFromEngSpec": false,
    "isNew": true
}
api_create_offer = ApiCreateOffer()

request_update_offer = {
    "docType": "Order",
    "showPriceWithDiscount": false,
    "showDiscount": true,
    "currencyDate": "2025-03-28T00:00:00",
    "currency": "RUB",
    "exchangeRateType": "YRU",
    "userName": "RUCO2573",
    "personId": "1AC7A866-9FC3-4964-8B29-4BE1AE3E2B58",
    "usePromoCurrency": true,
    "passportId": "4DBB2A44-D895-468D-A51F-AE98B9B3D487",
    "projectObject": {
        "id": "4DBB2A44-D895-468D-A51F-AE98B9B3D487"
    },
    "specTypeId": "02061701-51E6-402E-B18F-7BAE7A27F6FB",
    "specificationId": "83BAAF6E-B790-4F35-8910-9AA020449733",
    "paymentTerms": "RU00",
    "surchargesPayment": "0",
    "surchargesConversion": 0,
    "payPercentBeforePlacingIntoProduction": 100,
    "isDraft": false,
    "isEndUserPQ": false,
    "purchaseType": "121B015A-E76D-4688-9BB6-2A56EC6DE2EF",
    "finalBuyerId": "acb8f425-c3b6-4b38-9f34-1e7fbfd53fa9",
    "customerId": "acb8f425-c3b6-4b38-9f34-1e7fbfd53fa9",
    "clientInn": "7705238125",
    "debtorAccount": "RT25-7705238125-HE",
    "currencySpecialFixation": true,
    "setContractDiscounts": true,
    "orderLines": [
        {
            "ODID": null,
            "materialCode": "003L0144R",
            "RequestedMaterialCode": "003L0144R",
            "quantity": 1,
            "lineNumber": 1,
            "usePromoCurrency": true,
            "discountPercent": 48,
            "endClientDiscountPercent": 0,
            "excludePosition": false,
            "useSpecialPrice": false,
            "lineType": "Material",
            "copiedFromId": null
        },
        {
            "ODID": null,
            "materialCode": "003L0146R",
            "RequestedMaterialCode": "003L0146R",
            "quantity": 1,
            "lineNumber": 2,
            "usePromoCurrency": true,
            "discountPercent": 48,
            "endClientDiscountPercent": 0,
            "excludePosition": false,
            "useSpecialPrice": false,
            "lineType": "Material",
            "copiedFromId": null
        }
    ],
    "deliveryOptions": {
        "ConsigneeCode": null,
        "Condition": "RU",
        "DeliveryCostRUB": 0,
        "DeliveryCost": 0,
        "ClientFinalDelivery": null,
        "ConsigneeContacts": null,
        "consigneeAgreementDelivery": {
            "SourceFiasId": "00000000-0000-0000-0000-000000000000",
            "Address": "",
            "PaidDelivery": false,
            "ConditionDescription": "Стандартные договорные условия",
            "INN": "7705238125"
        },
        "CostIncludedInOrder": false,
        "totalDeliveryWeight": 0.516,
        "endPoint": "ToTK",
        "deliveryType": "Pickup",
        "consigneeId": "00000000-0000-0000-0000-000000000000"
    },
    "deliveryOptionsHex": null,
    "deliveryOptionsProd": null,
    "deliveryOptionsDZRProd": null,
    "isExport": false,
    "validDays": 14,
    "source": null,
    "sellerId": "20C340FE-6AFF-486F-B248-FD8DBE2C93CD",
    "IsATOffer": false,
    "autoFromEngSpec": false,
    "isNew": false,
    "offerId": f"{offer_id}"
}
api_update_offer = ApiOrderUpdateOffer()  # В данном запросе важно скопировать id из объекта offers с ответа от api_create_offer и добавить его в новое поле offerId в конец запроса


@allure.feature('CRM')
@allure.story('Появление согласования маржи после обновления себестоимости')
@pytest.mark.stage
@pytest.mark.parametrize('article', ['003L0144R 003L0146R'])
def test_50786_margin_reconciliation_appears_after_cost_price_update(browser, article, auth_crm_extru_start,
                                                                     auth_extru_crm_from_authorized_page):
    """Появление согласования маржи после обновления себестоимости"""
    link_assortments = TestEnvironment.LINK_ASSORTMENTS_PAGE_CRM
    link_search_pq_in_crm = TestEnvironment.LINK_SEARCH_PQ_TST
    login_crm_tst = TestEnvironment.LOGIN_CRM

    page_assortments = AssortmentsPage(browser, link_assortments)
    page_modal_edit_assortments = ModalEdit(browser, link_assortments)
    page_search_pq_in_crm = SearchPq(browser, link_search_pq_in_crm)
    page_pq_in_crm = PqPage(browser, link_assortments)

    article_list = article.split(' ')
    article_for_assortments_change = article_list[1]  # Артикул для изменения в ассортименте
    estimated_cost_first = 0.0
    estimated_cost_second = 1500.0
    expected_type_agreement = ['Маржа']
    agreement_cost_price = 'Себестоимость'

    auth_crm_extru_start(ruco=login_crm_tst)

    # Страница Ассортимент
    page_assortments.open()
    page_assortments.search_article(article_for_assortments_change)
    page_assortments.editing_folder_09_ridan_products(article_for_assortments_change)
    page_modal_edit_assortments.entering_estimated_cost(estimated_cost_first)
    page_modal_edit_assortments.click_btn_save()

    # Здесь создается КП
    id_offers, num_pq = api_create_offer.create_offer(headers=headers, request=request_create_offer)
    request_update_offer["offerId"] = id_offers
    api_update_offer.post_update_offer(data=request_update_offer, headers=headers)

    page_search_pq_in_crm.open()
    page_search_pq_in_crm.search_pq(num_pq)
    page_search_pq_in_crm.go_to_pq_by_number_in_new_tab(num_pq)

    window_pq = browser.current_window_handle

    # Страница Ассортимент
    browser.execute_script(f"window.open('{link_assortments}')")
    page_assortments.switching_window(-1)

    page_assortments.search_article(article_for_assortments_change)
    page_assortments.editing_folder_09_ridan_products(article_for_assortments_change)
    page_modal_edit_assortments.entering_estimated_cost(estimated_cost_second)
    page_modal_edit_assortments.click_btn_save()

    # Страница PQ
    browser.switch_to.window(window_pq)

    url_pq = browser.current_url

    all_agreement = page_pq_in_crm.agreement_with_orange_mark()
    print(all_agreement)

    auth_extru_crm_from_authorized_page(url_pq, all_agreement[0])

    page_pq_in_crm.check_info_message_in_block_cost_price_approval(article_for_assortments_change)
    page_pq_in_crm.reconciliation_of_outdated_costs()
    page_pq_in_crm.agree_by_type_of_agreement(agreement_cost_price)

    page_pq_in_crm.check_visible_type_of_agreement(expected_type_agreement, num_pq)
    all_agreement = page_pq_in_crm.agreement_with_orange_mark()
    print(all_agreement)

    auth_extru_crm_from_authorized_page(url_pq, all_agreement[0])

    price_cost_article_assortments_change = page_pq_in_crm.save_cost_price_by_article(article_for_assortments_change)

    with allure.step(
            f'Проверяем, что оценочная себестоимость артикула {article_for_assortments_change} на странице PQ {num_pq} как в ассортименте'):
        assert price_cost_article_assortments_change == estimated_cost_second, \
            f'Себестоимость артикула - ({price_cost_article_assortments_change} {article_for_assortments_change}) не соответствует ' \
            f'оценочной себестоимости в ассортименте ({estimated_cost_second})'

    # Оценочная себестоимость артикула, в котором не меняли оценочную себестоимость в ассортименте
    price_cost_article_no_change_assortments = page_pq_in_crm.save_cost_price_by_article(article_list[0])

    total_cost_price = page_pq_in_crm.store_total_cost_price()

    # Ожидаемая итоговая себестоимость в кп
    expected_total_cost_price = round(
        (price_cost_article_no_change_assortments + price_cost_article_assortments_change) * 1.2, 2)

    with allure.step(f'Проверяем правильность расчета итоговой оценочной себестоимости в кп {num_pq}'):
        assert expected_total_cost_price == total_cost_price, \
            f'Итоговая оценочная себестоимость в кп {num_pq} - ({total_cost_price}) не соответствует ожидаемой - ' \
            f'({expected_total_cost_price})'

    page_pq_in_crm.agree_by_type_of_agreement(expected_type_agreement[0])
