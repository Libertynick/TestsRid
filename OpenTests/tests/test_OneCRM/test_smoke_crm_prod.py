import time

import allure
import pytest

from base_page.base_page import BasePageCrm
from config import ProdEnvironment
from crm_pages.header_page.header_page import HeaderPage
from crm_pages.modal_new_kp.modal_new_kp import ModalNewKp
from crm_pages.object_page.object_page import ObjectPage, KpTab
from crm_pages.pq_page.pq_page import PqPage
from crm_pages.search_objects_page.search_object_page import SearchObjectPage
from crm_pages.search_pq_page.search_pq_page import SearchPq
from open_pages.confirmation_page.confirmation_page import ConfirmationPage
from open_pages.design_condition_page.design_condition_page import DesignConditionPage
from open_pages.my_design_conditions_page.my_design_conditions_page import MyDesignConditionsPage
from open_pages.header.profile_menu_user import ProfileMenuUser
from open_pages.main_page.main_page import MainPage
from open_pages.order_details_page.order_details_page import OrderDetails


@allure.feature('Смоук прода CRM')
@allure.story('Создание PQ. ПТО + материалы. Предоплата. Самовывоз')
@pytest.mark.parametrize('article', ['w488900 1 003L0144 1'])
@pytest.mark.prod
def test_smoke_crm_prod(browser, article):
    """Заказ из PQ материалы + ПТО"""
    # ARTICLE = 'w488900 3 003L0144 100'
    DELIVERY_METHOD_MATERIAL = 'Самовывоз'
    DELIVERY_METHOD_PTO = 'Самовывоз'

    page = BasePageCrm(browser, ProdEnvironment.LINK_CRM_PROD)
    page.open()
    page.authentication_crm(ProdEnvironment.LINK_CRM_PROD, ProdEnvironment.LOGIN_CRM_PROD,
                            ProdEnvironment.PASSWORD_CRM_PROD)
    browser.execute_script("window.history.back()")

    # Переход на страницу поиска объектов.
    page = HeaderPage(browser, ProdEnvironment.LINK_CRM_PROD)
    page.go_to_object_page()

    page = SearchObjectPage(browser, ProdEnvironment.LINK_CRM_PROD)
    # Выбор офиса продаж
    page.selecting_a_sales_office()
    # поиск объекта
    page.search_object(ProdEnvironment.OBJECT_PROD)
    # Переход в объект
    page.go_to_object(ProdEnvironment.OBJECT_PROD)

    # Страница Объекта
    page = ObjectPage(browser, ProdEnvironment.LINK_CRM_PROD)
    page.change_check_status_object_verified()
    page.click_add_kp()

    # Модалка создания КП
    page = ModalNewKp(browser, ProdEnvironment.LINK_CRM_PROD)
    page.choice_distributor_prod(ProdEnvironment.DISTRIBUTOR_OPEN_PROD)
    page.choice_sap_code_main_contract_prod()
    page.choice_final_buyer_prod()
    page.there_must_be_an_advance_payment()
    # Ввод кодов
    page.adding_codes(article)
    # Сохранение стоимости в кп crm
    amount_total_in_kp_crm = page.store_amount_nds_total_in_kp_crm_rub()
    print(amount_total_in_kp_crm, '- Итоговая стоимость')
    # Сохранение скидок
    all_discount_in_crm = page.store_all_discount()
    print(all_discount_in_crm, '- Скидки')
    # Сохранение PQ и отправка на согласование
    page.click_btn_save_pq()
    num_pq = page.store_num_pq_in_title()
    print(num_pq)
    page.send_for_approval_from_modal_new_kp()
    page.modal_kp_has_not_been_pre_screened()

    # Переход на вкладку КП -> Переход на страницу PQ по номеру PQ
    page = ObjectPage(browser, ProdEnvironment.LINK_CRM_PROD)
    page.go_to_chapter_kp()
    page = KpTab(browser, ProdEnvironment.LINK_CRM_PROD)
    page.opening_pq_in_a_new_tab_by_number(num_pq)

    # Сохранение итоговой суммы после согласования и сравнение с суммой до согласования
    page = PqPage(browser, ProdEnvironment.LINK_CRM_PROD)
    final_amount_after_agreement = page.saving_the_final_amount_rub_after_agreement()
    assert final_amount_after_agreement == amount_total_in_kp_crm, \
        f'Сумма в PQ после согласования ({final_amount_after_agreement}) не равна сумме ' \
        f'до согласования ({amount_total_in_kp_crm})'
    print(final_amount_after_agreement, 'Итоговая сумма КП в crm после согласования')

    # page.waiting_for_automatic_approval_dzerzhinsk_plant()
    # Переход в Опен
    browser.execute_script("window.open(arguments[0])", ProdEnvironment.OPEN_URL)
    page = MainPage(browser, ProdEnvironment.OPEN_URL)
    page.switching_window(-1)
    page.authorization_from_main_page(ProdEnvironment.EMAIL_OPEN_PROD, ProdEnvironment.PASSWORD_OPEN_PROD)

    # Переход в Мои проектные условия
    page = ProfileMenuUser(browser, ProdEnvironment.OPEN_URL)
    page.click_profile()
    page.go_to_design_conditions()
    # num_pq = 'PQ04201319'
    # Поиск КП и переход в него
    page = MyDesignConditionsPage(browser, ProdEnvironment.OPEN_URL)
    page.search_for_pq_and_switch_to_it(num_pq)

    # Страница Проектное условие
    page = DesignConditionPage(browser, ProdEnvironment.OPEN_URL)
    total_cost_on_the_design_condition_page = page.saving_the_final_cost_rub_on_the_design_condition_page()
    print(total_cost_on_the_design_condition_page, 'Итоговая стоимость на странице Проектное условие')
    assert total_cost_on_the_design_condition_page == final_amount_after_agreement, \
        f'Итоговая сумма на странице Проектное условие ({total_cost_on_the_design_condition_page})' \
        f'не равна итоговой сумме после согласования в crm ({final_amount_after_agreement})'
    all_discounts_on_the_design_condition_page = page.store_all_discounts_on_the_design_condition_page()
    print(all_discounts_on_the_design_condition_page, 'скидки на странице Проектное условие')

    # Проверка равенства скидок в crm и на странице Проектное условие
    set_all_discounts_on_the_design_condition_page = set(all_discounts_on_the_design_condition_page)
    set_all_discount_in_crm = set(all_discount_in_crm)
    assert set_all_discounts_on_the_design_condition_page == set_all_discount_in_crm, \
        f'Скидки в crm ({set_all_discount_in_crm}) не равны скидкам на странице ' \
        f'Проектное условие ({set_all_discounts_on_the_design_condition_page})'

    page.availability_display_check()
    page.click_button_order()

    # Страница Подтверждение
    page = ConfirmationPage(browser, ProdEnvironment.OPEN_URL)
    all_discounts_confirmation_page = page.store_all_discounts_on_the_confirmation_page()
    print(all_discounts_confirmation_page, 'Скидки на странице Подтверждение')
    set_all_discounts_confirmation_page = set(all_discounts_confirmation_page)
    assert set_all_discounts_confirmation_page == set_all_discounts_on_the_design_condition_page, \
        f'Скидки на странице Подтверждение ({set_all_discounts_confirmation_page}) не равны' \
        f'скидкам на странице Проектное условие ({set_all_discounts_on_the_design_condition_page})'

    total_cost_on_the_confirmation_page = page.store_total_cost_on_the_confirmation_page()
    total_cost_on_the_confirmation_page = int(total_cost_on_the_confirmation_page)
    total_cost_on_the_design_condition_page = int(total_cost_on_the_design_condition_page)
    print(total_cost_on_the_confirmation_page, 'Итоговая стоимость на странице Подтверждение')

    assert total_cost_on_the_confirmation_page == total_cost_on_the_design_condition_page, \
        f'Стоимость на странице Подтверждение ({total_cost_on_the_confirmation_page}) не равна' \
        f'стоимости на странице Проектное условие ({total_cost_on_the_design_condition_page})'

    page.input_comment()
    page.choice_of_delivery_method_material(DELIVERY_METHOD_MATERIAL)
    page.choice_of_delivery_method_pto(DELIVERY_METHOD_PTO)

    page.checking_the_address_of_the_warehouse_during_self_delivery_materials()
    page.warehouse_address_verification_upon_delivery_to_the_warehouse_pto_prod()
    page.click_button_confirm()
    page.dkp_link_open_check()
    page.click_on_the_button_to_return_to_pq()

    # Страница Проектное условие
    page = DesignConditionPage(browser, ProdEnvironment.OPEN_URL)
    page.waiting_to_create_invoices()
    amount_in_created_orders = page.saving_the_amount_in_created_orders()
    assert int(final_amount_after_agreement) == int(amount_in_created_orders), \
        f'Сумма в crm после согласования - ({final_amount_after_agreement}) не равна сумме ' \
        f'созданных счетов - ({amount_in_created_orders})'

    page.go_to_order(1)
    # Страница Детали заказа
    page = OrderDetails(browser, ProdEnvironment.OPEN_URL)
    page.data_display_check()
    price_order_open_1 = page.store_price_order()
    num_order_1 = page.store_num_order()
    print(price_order_open_1, f'Стоимость заказа {num_order_1} в деталях заказа в Опене')
    page.checking_printing_forms_download(num_order_1)
    page.verify_check_host(num_order_1)

    # Переход в crm для сверки стоимости заказа
    browser.execute_script("window.open(arguments[0])", ProdEnvironment.LINK_SEARCH_PQ_PROD)
    page.switching_window(-1)
    page = SearchPq(browser, ProdEnvironment.LINK_SEARCH_PQ_PROD)
    time.sleep(2)
    page.search_order(num_order_1)
    page.go_to_order(num_order_1)

    page = PqPage(browser, ProdEnvironment.LINK_CRM_PROD)
    price_order_crm_1 = page.store_price_crm_order()
    print(price_order_crm_1, f'Стоимость заказа в ДКП crm {num_order_1}')
    page.verify_price_crm_with_price_open(price_order_crm_1, float(price_order_open_1))

    # Возврат на вкладку Проектное условие для перехода во 2-ой заказ
    page.switching_window(2)

    page = DesignConditionPage(browser, ProdEnvironment.OPEN_URL)
    page.go_to_order(2)

    page = OrderDetails(browser, ProdEnvironment.OPEN_URL)
    page.data_display_check()
    price_order_open_2 = page.store_price_order()
    num_order_2 = page.store_num_order()
    print(price_order_open_2, f'Стоимость заказа {num_order_2} в деталях заказа в Опене')
    page.checking_printing_forms_download(num_order_2)
    page.verify_check_host(num_order_2)

    # Открытие страницы поиска заказа в crm
    browser.execute_script("window.open(arguments[0])", ProdEnvironment.LINK_SEARCH_PQ_PROD)
    page.switching_window(-1)

    page = SearchPq(browser, ProdEnvironment.LINK_SEARCH_PQ_PROD)
    page.search_order(num_order_2)
    page.go_to_order(num_order_2)

    page = PqPage(browser, ProdEnvironment.LINK_CRM_PROD)
    price_order_crm_2 = page.store_price_crm_order()
    print(price_order_crm_2, f'Стоимость заказа в ДКП crm {num_order_2}')
    page.verify_price_crm_with_price_open(price_order_crm_2, float(price_order_open_2))

    # Переход на страницу поиска объектов.
    page = HeaderPage(browser, ProdEnvironment.LINK_CRM_PROD)
    page.go_to_object_page()

    page = SearchObjectPage(browser, ProdEnvironment.LINK_CRM_PROD)
    # Выбор офиса продаж
    page.selecting_a_sales_office()
    # поиск объекта
    page.search_object(ProdEnvironment.OBJECT_PROD)
    # Переход в объект
    page.go_to_object(ProdEnvironment.OBJECT_PROD)

    # Страница Объекта
    page = ObjectPage(browser, ProdEnvironment.LINK_CRM_PROD)
    page.change_check_status_object_verified_trash()
