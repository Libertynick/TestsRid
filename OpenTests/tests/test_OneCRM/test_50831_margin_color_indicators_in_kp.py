import allure
import pytest

from api_testing_project.services.crm_commerce.create_offer.api.api_create_offer import ApiCreateOffer
from config import TestEnvironment

from crm_pages.margin_targets_page.margin_targets_page import MarginTargetsPage
from crm_pages.pq_page.pq_page import PqPage


@allure.feature('CRM')
@allure.story('Цветовые индикаторы маржи в КП')
@pytest.mark.parametrize('article', ['065B3050R 003Z1161R 003G1003R w488900'])
@pytest.mark.stage
def test_50831_margin_color_indicators_in_kp(browser, article, auth_crm_extru_start, agreement_on_all_conditions_extru,
                                             auth_extru_crm_from_authorized_page):
    """Цветовые индикаторы маржи в КП"""
    margin_targets_link = TestEnvironment.MARGIN_TARGETS_PAGE
    link_pq_in_crm = TestEnvironment.LINK_PQ_IN_CRM

    page_margin_targets = MarginTargetsPage(browser, margin_targets_link)
    page_pq = PqPage(browser, margin_targets_link)

    false = False
    true = True
    null = None
    headers = {"userId": "94b73863-d339-4fd1-8293-392a0ae470fd"}  # userId Оганесян Левон
    name_user = ['Оганесян Левон']

    article_list = article.split(' ')
    list_gcm = ['1J', '1E', '1G', 'YA']
    target_marginality_by_gcm = {}  # Целевая маржа по ГЦМ
    actual_margin_in_kp_by_gcm = {}  # Фактическая маржа по ГЦМ в КП
    actual_margin_to_target_margin_ratio = {}  # коэффициент фактической маржи к целевой маржи
    sales_amount_without_nds_by_article = {}  # Сумма продажи без НДС по артикулу
    material_contribution_dict_by_article = {}  # Вклад материалов по артикулу
    dict_code_gcm_by_article = {}  # Коды ГЦМ по артикулу в КП
    weighted_target_margin_by_gcm = {}  # Взвешенная целевая маржа по ГЦМ
    dict_gcm_by_article_in_dkp = {}  # # Коды ГЦМ по артикулу в ДКП

    request_create_offer = {
        "docType": "Order",
        "showPriceWithDiscount": false,
        "showDiscount": true,
        "currencyDate": "2025-04-14T00:00:00",
        "currency": "RUB",
        "exchangeRateType": "YRU",
        "userName": "RIDANCORP\\RUCO1681",
        "personId": "1ac7a866-9fc3-4964-8b29-4be1ae3e2b58",
        "usePromoCurrency": true,
        "passportId": "4DBB2A44-D895-468D-A51F-AE98B9B3D487",
        "specTypeId": "02061701-51E6-402E-B18F-7BAE7A27F6FB",
        "specificationId": "83BAAF6E-B790-4F35-8910-9AA020449733",
        "paymentTerms": "RU00",
        "surchargesPayment": "0",
        "surchargesConversion": 0,
        "payPercentBeforePlacingIntoProduction": 100,
        "isDraft": true,
        "isEndUserPQ": false,
        "purchaseType": "121B015A-E76D-4688-9BB6-2A56EC6DE2EF",
        "finalBuyerId": "acb8f425-c3b6-4b38-9f34-1e7fbfd53fa9",
        "customerId": "acb8f425-c3b6-4b38-9f34-1e7fbfd53fa9",
        "clientInn": "7705238125",
        "debtorAccount": "RT25-7705238125-HE",
        "currencySpecialFixation": true,
        "setContractDiscounts": true,
        "orderLines": [
            {
                "ODID": null,
                "materialCode": "065B3050R",
                "RequestedMaterialCode": "065B3050R",
                "quantity": 1,
                "lineNumber": 1,
                "usePromoCurrency": true,
                "discountPercent": 76.3,
                "endClientDiscountPercent": 0,
                "excludePosition": false,
                "useSpecialPrice": false,
                "lineType": "Material",
                "copiedFromId": null
            },
            {
                "ODID": null,
                "materialCode": "003Z1161R",
                "RequestedMaterialCode": "003Z1161R",
                "quantity": 1,
                "lineNumber": 2,
                "usePromoCurrency": true,
                "discountPercent": 64,
                "endClientDiscountPercent": 0,
                "excludePosition": false,
                "useSpecialPrice": false,
                "lineType": "Material",
                "copiedFromId": null
            },
            {
                "ODID": null,
                "materialCode": "003G1003R",
                "RequestedMaterialCode": "003G1003R",
                "quantity": 1,
                "lineNumber": 3,
                "usePromoCurrency": true,
                "discountPercent": 35,
                "endClientDiscountPercent": 0,
                "excludePosition": false,
                "useSpecialPrice": false,
                "lineType": "Material",
                "copiedFromId": null
            },
            {
                "ODID": null,
                "materialCode": "w488900",
                "RequestedMaterialCode": "w488900",
                "quantity": 1,
                "lineNumber": 4,
                "usePromoCurrency": true,
                "discountPercent": 89.4,
                "endClientDiscountPercent": 0,
                "excludePosition": false,
                "useSpecialPrice": false,
                "lineType": "HEX",
                "copiedFromId": null
            }
        ],
        "deliveryOptions": {
            "ConsigneeCode": null,
            "Condition": "RU",
            "DeliveryCost": 0,
            "ClientFinalDelivery": null,
            "ConsigneeContacts": null,
            "consigneeAgreementDelivery": {
                "SourceFiasId": "00000000-0000-0000-0000-000000000000",
                "Address": "",
                "PaidDelivery": false,
                "ConditionDescription": "Стандартные договорные условия",
                "INN": "7705238125"
            },
            "CostIncludedInOrder": false,
            "totalDeliveryWeight": 22.047,
            "endPoint": "ToTK",
            "deliveryType": "Pickup",
            "consigneeId": "00000000-0000-0000-0000-000000000000"
        },
        "deliveryOptionsHex": null,
        "deliveryOptionsProd": null,
        "deliveryOptionsDZRProd": {
            "ConsigneeCode": null,
            "Condition": "RU",
            "DeliveryCost": 0,
            "ClientFinalDelivery": null,
            "ConsigneeContacts": null,
            "consigneeAgreementDelivery": {
                "SourceFiasId": "00000000-0000-0000-0000-000000000000",
                "Address": "",
                "PaidDelivery": false,
                "ConditionDescription": "Стандартные договорные условия",
                "INN": "7705238125"
            },
            "CostIncludedInOrder": false,
            "totalDeliveryWeight": 193.12,
            "endPoint": "ToTK",
            "deliveryType": "PickupDZR",
            "consigneeId": "00000000-0000-0000-0000-000000000000"
        },
        "isExport": false,
        "validDays": 14,
        "source": null,
        "sellerId": "20C340FE-6AFF-486F-B248-FD8DBE2C93CD",
        "IsATOffer": false,
        "autoFromEngSpec": false,
        "isNew": true
    }
    api_create_offer = ApiCreateOffer()
    id_offers, num_pq = api_create_offer.create_offer(headers=headers, request=request_create_offer)

    auth_crm_extru_start()

    # Страница Целевые показатели по марже
    page_margin_targets.open()
    for gcm in list_gcm:
        page_margin_targets.activate_drop_list_gcm()
        page_margin_targets.entered_gcm(gcm)
        page_margin_targets.selection_of_found_gcm(gcm)
        page_margin_targets.click_btn_search(gcm)
        page_margin_targets.check_target_margin_filling_by_empty_end_date_and_gcm(gcm)
        target_marginality = page_margin_targets.save_target_marginality_by_empty_end_date_and_gcm(gcm)
        target_marginality_by_gcm[gcm] = float(target_marginality)
    print(target_marginality_by_gcm, 'Данные целевой маржинальности по ГЦМ')

    # Открываем созданное КП в новой вкладке
    link_pq = link_pq_in_crm + id_offers
    browser.execute_script(f"window.open('{link_pq}')")
    page_margin_targets.switching_window(-1)

    # Рассчитываем сумму продажи без НДС
    for el in article_list:
        sales_amount_without_nds_by_article[el] = page_pq.calculation_of_sales_amount_without_nds_by_article(el)
    print(sales_amount_without_nds_by_article, 'Сумма продажи без НДС по артикулу')

    for el in article_list:
        page_pq.checking_calculation_of_margin_by_article(el, sales_amount_without_nds_by_article[el])

    for gcm in list_gcm:
        actual_margin_in_kp_by_gcm[gcm] = page_pq.store_value_percent_margin_by_code_gcm(gcm)
        actual_margin_to_target_margin_ratio[gcm] = actual_margin_in_kp_by_gcm[gcm] / (
                target_marginality_by_gcm[gcm] * 100)
        actual_margin_to_target_margin_ratio[gcm] = round(actual_margin_to_target_margin_ratio[gcm], 2)

    print(actual_margin_in_kp_by_gcm, 'Фактическая маржа в КП по ГЦМ')
    print(actual_margin_to_target_margin_ratio, 'коэффициент фактической маржи к целевой маржи')
    for gcm in list_gcm:
        page_pq.checking_color_of_margin_indicator_for_each_hcm(gcm, actual_margin_to_target_margin_ratio[gcm])

    # Рассчитываем вклад каждого материала и проверяем, что их сумма равна 1
    total_price_kp = page_pq.store_amount_nds_total_in_kp_crm_rub()
    print(f'{total_price_kp} сумма КП с НДС')
    for el in article_list:
        amount_with_nds_distr_by_article = page_pq.save_amount_with_nds_distributor_by_article(el)
        material_contribution = round(amount_with_nds_distr_by_article / total_price_kp, 2)
        material_contribution_dict_by_article[el] = material_contribution
    print(f'{material_contribution_dict_by_article}  Вклад материалов по артикулу')

    with allure.step('Проверяем, что сумма вкладов материала по артикулам равна 1'):
        total_material_contribution = sum(material_contribution_dict_by_article.values())
        assert total_material_contribution == 1.0, \
            f'Сумма вкладов по материалам не равна 1. Значение - {total_material_contribution}'

    for el in article_list:
        dict_code_gcm_by_article[el] = page_pq.save_code_gcm_by_article(el)
    print(f'{dict_code_gcm_by_article} - Коды ГЦМ по артикулу')

    # Считаем взвешенную целевую маржу по каждой строке
    for article, gcm in dict_code_gcm_by_article.items():
        weighted_target_margin_by_gcm[gcm] = round(
            material_contribution_dict_by_article[article] * target_marginality_by_gcm[gcm], 2)
    print(f'{weighted_target_margin_by_gcm} - Взвешенная целевая маржа по каждой ГЦМ')

    # Рассчитываем целевой показатель маржи КП
    target_margin_kp = round(sum(weighted_target_margin_by_gcm.values()), 2)
    print(f'{target_margin_kp} - целевой показатель маржи КП')

    # Рассчитываем фактическую маржу по всему КП
    sales_amount_excluding_nds_kp = round(total_price_kp / 1.2, 2)  # Сумма продажи без НДС для всего КП
    print(f'{sales_amount_excluding_nds_kp}  Сумма продажи без НДС для всего КП')
    cost_price_kp = round(page_pq.save_cost_price_kp() / 1.2, 2)  # Себестоимость по всему КП
    print(f'{cost_price_kp} Себестоимость по всему КП без НДС')
    actual_margin_kp = (sales_amount_excluding_nds_kp - cost_price_kp) / sales_amount_excluding_nds_kp
    actual_margin_kp = round(actual_margin_kp, 2)
    print(f'{actual_margin_kp} - Рассчитанная Фактическая маржа по всему КП')

    # Рассчитываем значение коэффициента оценочной маржи
    valuation_margin_ratio = round(actual_margin_kp / target_margin_kp, 2)
    print(f'{valuation_margin_ratio} - значение коэффициента оценочной маржи')

    page_pq.checking_color_of_margin_indicator_kp(valuation_margin_ratio)
    page_pq.check_equality_colors_indicator_profitability_by_kp_and_estimated_margin_by_kp()

    page_pq.send_for_approval_pq_page()

    # Сохраняем значения фактической маржи после отправки на согласование и сверяем, что она не изменилась
    actual_margin_in_kp_by_gcm_after_sending_for_approval = {}  # Фактическая маржа после отправки на согласование
    for gcm in list_gcm:
        actual_margin_in_kp_by_gcm_after_sending_for_approval[gcm] = page_pq.store_value_percent_margin_by_code_gcm(gcm)
    print(
        f'{actual_margin_in_kp_by_gcm_after_sending_for_approval} - фактическая маржа по ГЦМ после отправки на согласование')

    with allure.step('Сверяем, что фактическая маржа по ГЦМ после отправки на согласование не изменилась'):
        for gcm in list_gcm:
            assert actual_margin_in_kp_by_gcm[gcm] == actual_margin_in_kp_by_gcm_after_sending_for_approval[gcm], \
                (f'Фактическая маржа ГЦМ {gcm} в КП изменилась после отправки на согласование. '
                 f'Значение- ({actual_margin_in_kp_by_gcm_after_sending_for_approval[gcm]})')

    # Проверяем цвет маржи по каждой ГЦМ
    for gcm in list_gcm:
        page_pq.checking_color_of_margin_indicator_for_each_hcm(gcm, actual_margin_to_target_margin_ratio[gcm])

    agreement_on_all_conditions_extru()

    current_url_pq = browser.current_url
    auth_extru_crm_from_authorized_page(url_page=current_url_pq, name_user=name_user)
    page_pq.create_account()
    page_pq.waiting_for_account_creation()

    # Сохраняем значения фактической маржи по ГЦМ в КП после создания и сверяем, что она не изменилась
    actual_margin_in_kp_by_gcm_after_create_account = {}  # Фактическая маржа по ГЦМ в КП после создания счета
    for gcm in list_gcm:
        actual_margin_in_kp_by_gcm_after_create_account[gcm] = page_pq.store_value_percent_margin_by_code_gcm(gcm)
    print(
        f'{actual_margin_in_kp_by_gcm_after_create_account} - фактическая маржа по ГЦМ после отправки на согласование')

    with allure.step('Сверяем, что фактическая маржа по ГЦМ после отправки на согласование не изменилась'):
        for gcm in list_gcm:
            assert actual_margin_in_kp_by_gcm[gcm] == actual_margin_in_kp_by_gcm_after_create_account[gcm], \
                (f'Фактическая маржа ГЦМ {gcm} в КП изменилась после создания счета. '
                 f'Значение- ({actual_margin_in_kp_by_gcm_after_sending_for_approval[gcm]})')

    # Проверяем цвет маржи по каждой ГЦМ
    for gcm in list_gcm:
        page_pq.checking_color_of_margin_indicator_for_each_hcm(gcm, actual_margin_to_target_margin_ratio[gcm])

    window_mkp = browser.current_window_handle

    num_dkp = page_pq.save_all_num_dkp()
    for idx, dkp in enumerate(num_dkp):
        page_pq.go_to_order_by_reference_number(idx + 1)
        page_pq.switching_window(-1)

        list_article_in_dkp = page_pq.save_list_articles_in_pq()
        print(f'{list_article_in_dkp}  артикулы в ДКП {dkp}')
        for el in list_article_in_dkp:
            dict_gcm_by_article_in_dkp[el] = page_pq.save_code_gcm_by_article(el)
        print(f'{dict_gcm_by_article_in_dkp} - коды ГЦМ по артикулу в ДКП {dkp}')

        # Сохраняем значения фактической маржи по ГЦМ в ДКП 1 и сверяем, что она не изменилась
        actual_margin_in_kp_by_gcm_dkp = {}  # Фактическая маржа по ГЦМ в ДКП
        for value in dict_gcm_by_article_in_dkp.values():
            actual_margin_in_kp_by_gcm_dkp[value] = page_pq.store_value_percent_margin_by_code_gcm(value)
        print(
            f'{actual_margin_in_kp_by_gcm_dkp} - фактическая маржа по ГЦМ ДКП {dkp}')

        with allure.step(f'Сверяем, что фактическая маржа по ГЦМ ДКП {dkp} не изменилась'):
            for key in actual_margin_in_kp_by_gcm_dkp.keys():
                assert actual_margin_in_kp_by_gcm[key] == actual_margin_in_kp_by_gcm_after_create_account[key], \
                    (f'Фактическая маржа ГЦМ {key} в ДКП {dkp} изменилась после создания счета. '
                     f'Значение- ({actual_margin_in_kp_by_gcm_after_sending_for_approval[key]})')

        # Проверяем цвет маржи по каждой ГЦМ
        for gcm in actual_margin_in_kp_by_gcm_dkp.keys():
            page_pq.checking_color_of_margin_indicator_for_each_hcm(gcm, actual_margin_to_target_margin_ratio[gcm])

        dict_gcm_by_article_in_dkp.clear()
        actual_margin_in_kp_by_gcm_dkp.clear()

        browser.close()
        browser.switch_to.window(window_mkp)
