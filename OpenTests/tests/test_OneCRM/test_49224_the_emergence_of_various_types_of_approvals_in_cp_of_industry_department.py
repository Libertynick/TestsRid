import allure
import pytest

from api_testing_project.services.crm_commerce.create_offer.api.api_create_offer import ApiCreateOffer
from config import TestEnvironment
from crm_pages.modal_logistics_ridan.modal_logistics_ridan import ModalLogisticsRidan
from crm_pages.pq_page.pq_page import PqPage

false = False
true = True
null = None

headers = {'userId': 'eec1e544-e30e-45a7-a4ba-87e922547968'}  # userId Виноградов Егор
request_create_offer = {
    "docType": "Order",
    "showPriceWithDiscount": false,
    "showDiscount": true,
    "currencyDate": "2025-05-07T00:00:00",
    "currency": "RUB",
    "exchangeRateType": "YRU",
    "userName": "RIDANCORP\\RUCO1845",
    "personId": "b898f86a-6070-451b-9a14-47ba949c8cb8",
    "usePromoCurrency": false,
    "passportId": "4DBB2A44-D895-468D-A51F-AE98B9B3D487",
    "specTypeId": "02061701-51E6-402E-B18F-7BAE7A27F6FB",
    "specificationId": "83BAAF6E-B790-4F35-8910-9AA020449733",
    "paymentTerms": "RU00",
    "surchargesPayment": "0",
    "surchargesConversion": 0,
    "payPercentBeforePlacingIntoProduction": 100,
    "isDraft": true,
    "isEndUserPQ": false,
    "purchaseType": "121B015A-E76D-4688-9BB6-2A56EC6DE2EF",
    "finalBuyerId": "acb8f425-c3b6-4b38-9f34-1e7fbfd53fa9",
    "customerId": "aa890eff-7aa9-46c3-a887-29220f5a4274",
    "clientInn": "9705031050",
    "debtorAccount": "RT25-9705031050-HE",
    "currencySpecialFixation": true,
    "setContractDiscounts": true,
    "orderLines": [
        {
            "ODID": null,
            "materialCode": "w401012698",
            "RequestedMaterialCode": "w401012698",
            "quantity": 1,
            "lineNumber": 1,
            "usePromoCurrency": false,
            "discountPercent": 77,
            "endClientDiscountPercent": 0,
            "excludePosition": false,
            "useSpecialPrice": false,
            "lineType": "HEX",
            "copiedFromId": null
        },
        {
            "ODID": null,
            "materialCode": "w301003240",
            "RequestedMaterialCode": "w301003240",
            "quantity": 1,
            "lineNumber": 2,
            "usePromoCurrency": false,
            "discountPercent": 77,
            "endClientDiscountPercent": 0,
            "excludePosition": false,
            "useSpecialPrice": false,
            "lineType": "HEX",
            "copiedFromId": null
        },
        {
            "ODID": null,
            "materialCode": "089N2906",
            "RequestedMaterialCode": "089N2906",
            "quantity": 1,
            "lineNumber": 3,
            "usePromoCurrency": false,
            "discountPercent": 77,
            "endClientDiscountPercent": 0,
            "excludePosition": false,
            "useSpecialPrice": false,
            "lineType": "HEXAdditions",
            "copiedFromId": null
        },
        {
            "ODID": null,
            "materialCode": "089N4178",
            "RequestedMaterialCode": "089N4178",
            "quantity": 1,
            "lineNumber": 4,
            "usePromoCurrency": false,
            "discountPercent": 77,
            "endClientDiscountPercent": 0,
            "excludePosition": false,
            "useSpecialPrice": false,
            "lineType": "HEXAdditions",
            "copiedFromId": null
        }
    ],
    "deliveryOptions": null,
    "deliveryOptionsHex": {
        "ConsigneeCode": null,
        "Condition": "PR",
        "DeliveryCost": 0,
        "ClientFinalDelivery": null,
        "ConsigneeContacts": null,
        "consigneeAgreementDelivery": {
            "SourceFiasId": "00000000-0000-0000-0000-000000000000",
            "Address": "",
            "PaidDelivery": false,
            "ConditionDescription": "Стандартные договорные условия",
            "INN": "7705238125"
        },
        "CostIncludedInOrder": false,
        "totalDeliveryWeight": 16.715,
        "endPoint": "ToTK",
        "deliveryType": "PickupDZR",
        "consigneeId": "00000000-0000-0000-0000-000000000000"
    },
    "deliveryOptionsProd": null,
    "deliveryOptionsDZRProd": {
        "ConsigneeCode": null,
        "Condition": "RU",
        "DeliveryCost": 0,
        "ClientFinalDelivery": null,
        "ConsigneeContacts": null,
        "consigneeAgreementDelivery": {
            "SourceFiasId": "00000000-0000-0000-0000-000000000000",
            "Address": "",
            "PaidDelivery": false,
            "ConditionDescription": "Стандартные договорные условия",
            "INN": "7705238125"
        },
        "CostIncludedInOrder": false,
        "totalDeliveryWeight": 641.03,
        "endPoint": "ToTK",
        "deliveryType": "PickupDZR",
        "consigneeId": "00000000-0000-0000-0000-000000000000"
    },
    "isExport": false,
    "validDays": 3,
    "source": null,
    "sellerId": "20C340FE-6AFF-486F-B248-FD8DBE2C93CD",
    "IsATOffer": false,
    "autoFromEngSpec": false,
    "isNew": true
}
api_create_offer = ApiCreateOffer()


@pytest.mark.stage
@allure.feature('CRM')
@allure.story('Возникновение согласований разного типа в КП отдела Индустрия')
def test_49224_the_emergence_of_various_types_of_approvals_in_cp_of_industry_department(browser, auth_crm_extru_start,
                                                                                        auth_extru_crm_from_authorized_page):
    """
    Возникновение согласований разного типа в КП отдела Индустрия
    https://rucotfs.ridancorp.net/DanfossDev/CRM/_workitems/edit/49224
    """
    link_pq = TestEnvironment.LINK_PQ_IN_CRM

    user_ind = 'RUCO1845'  # Виноградов Егор Индустриальные сотрудники
    type_kp = 'IND'
    delivery_type = 'Доставка на указанный адрес'
    type_agreement_settlement_group = 'Расчетная группа'
    type_agreement_logistics_ridan = 'Логистика Ридан'
    value_specified_delivery_date = '14'  # Уточненный срок доставки
    value_transportation_and_packaging_costs = '40000'  # Транспортные расходы и расходы на упаковку
    type_of_agreement_visible_after_save = [
        'Согласование Индустрия', 'Логистика Ридан', 'Закупки Ридан', 'Расчетная группа', 'Маржа'
    ]  # Типы согласований после сохранения

    type_of_agreement_visible_after_save_after_change_condition = [
        'Согласование Индустрия', 'Логистика Ридан', 'Закупки Ридан', 'Расчетная группа', 'Предоплата',
        'Кредитный контроль', 'Фиксированный курс', 'Маржа'
    ]  # Типы согласований после изменений условий в КП

    # Создаем КП через Дапи
    id_pq, num_pq = api_create_offer.create_offer(headers=headers, request=request_create_offer)
    article = api_create_offer.get_all_articles()
    print(article, 'article')
    print(id_pq, num_pq)
    link_pq_total = link_pq + id_pq

    page_pq = PqPage(browser, link_pq_total)
    page_modal_logistic_ridan = ModalLogisticsRidan(browser, link_pq_total)

    auth_crm_extru_start(ruco=user_ind)

    # Открываем КП в срм
    page_pq.open()
    page_pq.click_btn_save_pq()
    page_pq.check_name_pq(expected_name_pq=type_kp, num_pq=num_pq)
    page_pq.checking_that_approvals_have_appeared(num_pq)
    page_pq.checking_that_there_are_agreements_in_approval_steps(num_pq)
    page_pq.check_visible_type_of_agreement(type_of_agreement_visible_after_save, num_pq)
    page_pq.switching_currency_to_a_fixed_rate()
    page_pq.selection_of_delivery_conditions(delivery_type)
    page_pq.choice_of_free_payment_mode()
    page_pq.expanding_payment_terms_menu()
    page_pq.click_on_button_agree_on_payment_terms()
    page_pq.click_btn_save_pq()
    page_pq.check_visible_type_of_agreement(type_of_agreement_visible_after_save_after_change_condition, num_pq)
    page_pq.send_for_approval_pq_page()
    page_pq.status_of_checkpoint_must_be_approval()
    coordinators_settlement_group = page_pq.save_coordinators_by_type_agreement(
        type_agreement_settlement_group)  # Согласователи Расчетная группа

    auth_extru_crm_from_authorized_page(link_pq_total, coordinators_settlement_group[0])

    page_pq.agree_by_type_of_agreement(type_agreement_settlement_group)
    coordinators_logistics_ridan = page_pq.save_coordinators_by_type_agreement(
        type_agreement_logistics_ridan)  # Согласователи Логистика Ридан

    auth_extru_crm_from_authorized_page(link_pq_total, coordinators_logistics_ridan[0])

    page_pq.click_btn_approve_logistics_ridan()

    page_modal_logistic_ridan.entered_specified_delivery_date(value_specified_delivery_date)
    page_modal_logistic_ridan.entered_transportation_and_packaging_costs(value_transportation_and_packaging_costs)
    page_modal_logistic_ridan.click_btn_save()

    transportation_cost_on_page = page_pq.saving_delivery_costs_in_rubles()
    with allure.step('Сравниваем транспортные расходы на странице с введенными в модалке Логистика Ридан'):
        assert transportation_cost_on_page == float(value_transportation_and_packaging_costs), \
            (f'Транспортные расходы на странице в разделе Дополнительные расходы / Условия поставки - '
             f'({transportation_cost_on_page}) не соответствуют вводимым в модалке Логистика Ридан - '
             f'({value_transportation_and_packaging_costs}) ')

    for el in article:
        page_pq.checking_delivery_time(el, value_specified_delivery_date)
    page_pq.agree_by_type_of_agreement(type_agreement_logistics_ridan)

    transportation_cost_on_page = page_pq.saving_delivery_costs_in_rubles()
    with allure.step('Сравниваем транспортные расходы на странице с введенными в модалке Логистика Ридан'):
        assert transportation_cost_on_page == float(value_transportation_and_packaging_costs), \
            (f'Транспортные расходы на странице в разделе Дополнительные расходы / Условия поставки - '
             f'({transportation_cost_on_page}) не соответствуют вводимым в модалке Логистика Ридан - '
             f'({value_transportation_and_packaging_costs}) ')

    for el in article:
        page_pq.checking_delivery_time(el, value_specified_delivery_date)
