import pytest
import time
import allure
from open_pages.btp_service_page.btp_service_page import AuthPage, BTPServicePage
from tools.helper import JsonHandler
from tools.logger import test_logger as logger

# Данные для параметризации
TEST_DATA = [
    {"order_number": "RT25-006960", "pin_code": "27715", "name": "Заказ 1"},
    {"order_number": "RT24-049897", "pin_code": "98590", "name": "Заказ 2"},
    {"order_number": "RT24-062937", "pin_code": "10228", "name": "Заказ 3"}
]


def pytest_generate_tests(metafunc):
    """Генерация тестов с параметризацией на уровне сессии"""
    if "order_data" in metafunc.fixturenames:
        metafunc.parametrize("order_data", TEST_DATA, ids=[d['name'] for d in TEST_DATA])


@pytest.fixture(scope="function")
def json_handler():
    """Фикстура для создания обработчика JSON"""
    logger.info("Создание JSON обработчика")
    return JsonHandler()


@pytest.fixture(scope="function")
def auth_and_json(browser, json_handler, order_data):
    """Фикстура для авторизации и получения JSON-данных"""
    order_number = order_data["order_number"]
    pin_code = order_data["pin_code"]

    with allure.step(f"Авторизация с данными {order_number}/{pin_code}"):
        logger.info(f"Авторизация с данными: {order_number}/{pin_code}")
        # Авторизация
        auth_page = AuthPage(browser)
        login_success = auth_page.login(order_number, pin_code)
        assert login_success, f"Не удалось авторизоваться с данными: {order_number}/{pin_code}"
        logger.info("Авторизация успешна")

    with allure.step(f"Получение JSON данных для {order_number}"):
        logger.info(f"Получение JSON данных для {order_number}")
        # Проверяем наличие ошибок при получении JSON-данных
        try:
            json_data = json_handler.download_json_data(order_number, pin_code)
            assert json_data is not None, f"Не удалось получить JSON-данные для {order_number}/{pin_code}"
            logger.info("JSON данные успешно получены")
        except Exception as e:
            logger.error(f"Ошибка при получении JSON данных: {e}")
            raise

    return {"order_number": order_number}


@pytest.fixture(scope="function")
def btp_page(browser, json_handler, auth_and_json):
    """Фикстура для создания страницы BTP"""
    logger.info("Создание экземпляра страницы BTP")
    page = BTPServicePage(browser)
    page.set_json_handler(json_handler)
    page.set_order_number(auth_and_json["order_number"])
    return page


@allure.epic("БТП Сервис")
@allure.feature("Верификация данных заказа")
class TestBTPService:

    @allure.story("Проверка номера заказа")
    @allure.severity(allure.severity_level.BLOCKER)
    def test_order_number(self, btp_page):
        """Тест проверки номера заказа"""
        with allure.step("Проверка совпадения номера заказа на странице с ожидаемым"):
            start_time = time.time()
            result, details = btp_page.verify_order_number()
            execution_time = time.time() - start_time

            # Добавляем информацию в отчет Allure
            allure.attach(f"Время выполнения: {execution_time:.2f} сек", name="Время выполнения",
                          attachment_type=allure.attachment_type.TEXT)
            allure.attach(f"Номер на странице: {details['page']}\nОжидаемый номер: {details['expected']}",
                          name="Детали сравнения", attachment_type=allure.attachment_type.TEXT)

            logger.info(f"Результаты сравнения номеров заказа (время: {execution_time:.2f} сек)")
            logger.info(f"На странице: {details['page']}")
            logger.info(f"Ожидаемый: {details['expected']}")
            logger.info(f"Совпадение: {result}")

            assert result, f"Номер заказа не совпадает с введенным при авторизации. На странице: {details['page']}, ожидаемый: {details['expected']}"

    @allure.story("Проверка статуса заказа")
    @allure.severity(allure.severity_level.CRITICAL)
    def test_order_status(self, btp_page):
        """Тест проверки статуса заказа"""
        with allure.step("Проверка совпадения статуса заказа на странице и в JSON"):
            start_time = time.time()
            result, details = btp_page.verify_order_status()
            execution_time = time.time() - start_time

            # Добавляем информацию в отчет Allure
            allure.attach(f"Время выполнения: {execution_time:.2f} сек", name="Время выполнения",
                          attachment_type=allure.attachment_type.TEXT)
            allure.attach(f"Статусы на странице: {details['page']}\nСтатусы в JSON: {details['json']}",
                          name="Детали сравнения", attachment_type=allure.attachment_type.TEXT)

            logger.info(f"Результаты сравнения статусов заказа (время: {execution_time:.2f} сек)")
            logger.info(f"На странице: {details['page']}")
            logger.info(f"В JSON: {details['json']}")
            logger.info(f"Совпадение: {result}")

            assert result, f"Статус заказа не совпадает. На странице: {details['page']}, в JSON: {details['json']}"

    @allure.story("Проверка артикулов")
    @allure.severity(allure.severity_level.CRITICAL)
    def test_articles(self, btp_page):
        """Тест проверки артикулов"""
        with allure.step("Проверка совпадения списка артикулов на странице и в JSON"):
            start_time = time.time()
            result, details = btp_page.verify_articles()
            execution_time = time.time() - start_time

            # Добавляем информацию в отчет Allure
            allure.attach(f"Время выполнения: {execution_time:.2f} сек", name="Время выполнения",
                          attachment_type=allure.attachment_type.TEXT)
            allure.attach(f"Артикулы на странице: {details['page']}\nАртикулы в JSON: {details['json']}",
                          name="Детали сравнения", attachment_type=allure.attachment_type.TEXT)

            logger.info(f"Результаты сравнения артикулов (время: {execution_time:.2f} сек)")
            logger.info(f"На странице: {details['page']}")
            logger.info(f"В JSON: {details['json']}")
            logger.info(f"Совпадение: {result}")

            assert result, f"Артикулы не совпадают. На странице: {details['page']}, в JSON: {details['json']}"

    @allure.story("Проверка этапов процесса")
    @allure.severity(allure.severity_level.NORMAL)
    def test_verify_stages_one_by_one(self, btp_page):
        """Тест быстрой проверки этапов для всех артикулов"""
        with allure.step("Проверка этапов для всех артикулов"):
            start_time = time.time()
            logger.info("Запуск быстрой проверки этапов...")

            result, details = btp_page.verify_stages_one_by_one()
            execution_time = time.time() - start_time

            # Статистика
            total = len(details)
            matches = sum(1 for item in details if item.get('match'))
            logger.info(f"Время выполнения: {execution_time:.2f} сек")
            logger.info(f"Проверено артикулов: {total}, совпадений: {matches}")

            # Добавляем информацию в отчет Allure
            allure.attach(
                f"Время выполнения: {execution_time:.2f} сек\nПроверено артикулов: {total}, совпадений: {matches}",
                name="Общая статистика", attachment_type=allure.attachment_type.TEXT)

            # Выводим только несоответствия
            mismatches = [item for item in details if not item.get('match')]
            if mismatches:
                logger.info(f"Найдено несоответствий: {len(mismatches)}")
                mismatch_details = []

                # Формируем детали для отчета
                for i, item in enumerate(mismatches[:3]):
                    article = item.get('article')
                    mismatch_info = [f"Артикул: {article}"]

                    for mismatch in item.get('mismatches', []):
                        status_type = mismatch.get('status_type')
                        mismatch_info.append(f"  Тип статуса: {status_type}")
                        mismatch_info.append(f"  В JSON: {mismatch.get('json_stages')}")
                        mismatch_info.append(f"  На странице: {mismatch.get('page_stages')}")

                        # Показываем только различия
                        only_in_json = mismatch.get('only_in_json', [])
                        only_on_page = mismatch.get('only_on_page', [])

                        if only_in_json:
                            mismatch_info.append(f"  Только в JSON: {only_in_json}")
                        if only_on_page:
                            mismatch_info.append(f"  Только на странице: {only_on_page}")

                    mismatch_details.append("\n".join(mismatch_info))

                # Добавляем несоответствия в отчет Allure
                allure.attach("\n\n".join(mismatch_details), name="Несоответствия этапов",
                              attachment_type=allure.attachment_type.TEXT)

            logger.info(f"Результат: {'✓' if result else '✗'}")
            assert result, "Проверка этапов не прошла"

    @allure.story("Проверка актуальных статусов")
    @allure.severity(allure.severity_level.NORMAL)
    def test_current_status_fast(self, btp_page):
        """Быстрый тест проверки актуального статуса артикулов"""
        with allure.step("Проверка актуальных статусов артикулов"):
            # Убеждаемся, что попап закрыт перед тестом
            btp_page.close_popup()
            start_time = time.time()
            result, details = btp_page.verify_statuses_simplest()
            execution_time = time.time() - start_time

            # Формируем отчет для Allure
            logger.info(f"Результаты быстрой проверки актуальных статусов артикулов (время: {execution_time:.2f} сек)")
            allure.attach(f"Время выполнения: {execution_time:.2f} сек", name="Время выполнения",
                          attachment_type=allure.attachment_type.TEXT)

            if isinstance(details, dict) and 'message' in details:
                logger.info(f"Информация: {details['message']}")
                allure.attach(details['message'], name="Информационное сообщение",
                              attachment_type=allure.attachment_type.TEXT)
            elif isinstance(details, dict) and 'error' in details:
                logger.error(f"Ошибка: {details['error']}")
                allure.attach(details['error'], name="Ошибка",
                              attachment_type=allure.attachment_type.TEXT)
            else:
                # Статистика
                total = len(details)
                matches = sum(1 for item in details if item.get('match'))
                logger.info(f"Проверено артикулов: {total}, совпадений: {matches}")

                # Создаем таблицу результатов для Allure
                table_rows = []
                table_rows.append("| Артикул | UI Статус | UI Текст | JSON Статус | JSON Текст | Статус | Текст |")
                table_rows.append("|---------|-----------|----------|-------------|-----------|--------|-------|")

                for item in details:
                    status_match = "✓" if item.get('status_type_match') else "✗"
                    text_match = "✓" if item.get('text_match') else "✗"

                    # Ограничиваем длину текстов для удобства чтения
                    ui_text = (item.get('page_text') or "")[:30] + "..." if len(item.get('page_text') or "") > 30 else (
                            item.get('page_text') or "")
                    json_text = (item.get('json_text') or "")[:30] + "..." if len(
                        item.get('json_text') or "") > 30 else (item.get('json_text') or "")

                    table_rows.append(
                        f"| {item.get('article')} | {item.get('page_color') or 'Нет'} | {ui_text} | {item.get('json_status') or 'Нет'} | {json_text} | {status_match} | {text_match} |")

                allure.attach("\n".join(table_rows), name="Результаты проверки статусов",
                              attachment_type=allure.attachment_type.TEXT)

                # Добавляем детали несоответствий
                mismatches = [item for item in details if not item.get('match')]
                if mismatches:
                    mismatch_details = []
                    for i, item in enumerate(mismatches):
                        mismatch_info = [f"[{i + 1}] Артикул: {item['article']}"]
                        mismatch_info.append(f"  UI статус: {item['page_color'] or 'Отсутствует'}")
                        mismatch_info.append(f"  UI текст: {item['page_text'] or 'Отсутствует'}")
                        mismatch_info.append(f"  JSON статус: {item['json_status'] or 'Отсутствует'}")
                        mismatch_info.append(f"  JSON текст: {item['json_text'] or 'Отсутствует'}")

                        # Причины несоответствия
                        mismatch_info.append("  Причины несоответствия:")
                        if not item['status_type_match']:
                            mismatch_info.append(
                                f"    - Несовпадение типа статуса: UI={item['page_color']}, JSON={item['json_status']}")
                        if not item['text_match']:
                            mismatch_info.append(f"    - Несовпадение текста статуса:")
                            mismatch_info.append(f"      UI: \"{item['page_text']}\"")
                            mismatch_info.append(f"      JSON: \"{item['json_text']}\"")

                        mismatch_details.append("\n".join(mismatch_info))

                    allure.attach("\n\n".join(mismatch_details), name="Детали несоответствий",
                                  attachment_type=allure.attachment_type.TEXT)

            logger.info(f"Общий результат: {'✓' if result else '✗'}")
            assert result, f"Актуальные статусы артикулов не совпадают на странице и в JSON"

    @allure.story("Проверка номеров материалов")
    @allure.severity(allure.severity_level.NORMAL)
    def test_material_numbers(self, btp_page):
        """Тест проверки номеров материалов допоставки"""
        with allure.step("Проверка номеров материалов допоставки"):
            start_time = time.time()
            logger.info("Запуск теста проверки номеров материалов")

            # Запускаем проверку
            result, details = btp_page.verify_material_numbers()
            execution_time = time.time() - start_time

            logger.info(f"Результаты сравнения номеров материалов (время: {execution_time:.2f} сек)")
            allure.attach(f"Время выполнения: {execution_time:.2f} сек", name="Время выполнения",
                          attachment_type=allure.attachment_type.TEXT)

            # Обрабатываем результат
            if isinstance(details, dict) and ('message' in details or 'error' in details):
                message = details.get('message', details.get('error', ''))
                logger.info(f"Информация: {message}")
                allure.attach(message, name="Информационное сообщение",
                              attachment_type=allure.attachment_type.TEXT)
            else:
                # Статистика
                total = len(details)
                matches = sum(1 for item in details if item['match'])
                logger.info(f"Проверено артикулов: {total}, совпадений: {matches}")

                # Добавляем статистику в отчет Allure
                allure.attach(f"Проверено артикулов: {total}, совпадений: {matches}",
                              name="Статистика", attachment_type=allure.attachment_type.TEXT)

                # Формируем отчет по артикулам
                articles_report = []
                for item in details:
                    match_symbol = "✓" if item['match'] else "✗"
                    article_info = [f"Артикул: {item['article']} {match_symbol}"]
                    article_info.append(f"  В UI: {item['ui_materials']}")
                    article_info.append(f"  В JSON: {item['json_materials']}")

                    # Добавляем различия если есть
                    if not item['match']:
                        if 'only_in_json' in item:
                            article_info.append(f"  Только в JSON: {item['only_in_json']}")
                        if 'only_in_ui' in item:
                            article_info.append(f"  Только в UI: {item['only_in_ui']}")

                    articles_report.append("\n".join(article_info))

                allure.attach("\n\n".join(articles_report), name="Результаты по артикулам",
                              attachment_type=allure.attachment_type.TEXT)

            logger.info(f"Общий результат: {'✓' if result else '✗'}")
            assert result, "Проверка номеров материалов не прошла"

    @allure.story("Проверка номеров допоставки")
    @allure.severity(allure.severity_level.NORMAL)
    def test_delivery_numbers_fast(self, btp_page):
        """Быстрый тест проверки номеров допоставки"""
        with allure.step("Проверка номеров допоставки"):
            start_time = time.time()
            result, details = btp_page.verify_delivery_numbers_fast()
            execution_time = time.time() - start_time

            logger.info(f"Результаты быстрой проверки номеров допоставки (время: {execution_time:.2f} сек)")
            allure.attach(f"Время выполнения: {execution_time:.2f} сек", name="Время выполнения",
                          attachment_type=allure.attachment_type.TEXT)

            if isinstance(details, dict) and 'message' in details:
                logger.info(f"Информация: {details['message']}")
                allure.attach(details['message'], name="Информационное сообщение",
                              attachment_type=allure.attachment_type.TEXT)
            else:
                # Статистика
                total = len(details)
                matches = sum(1 for item in details if item.get('match'))
                logger.info(f"Проверено артикулов: {total}, совпадений: {matches}")

                # Добавляем статистику в отчет Allure
                allure.attach(f"Проверено артикулов: {total}, совпадений: {matches}",
                              name="Статистика", attachment_type=allure.attachment_type.TEXT)

                # Формируем отчеты по совпадениям и несовпадениям
                if matches > 0:
                    matches_report = ["✓ СОВПАДЕНИЯ:"]
                    for item in [item for item in details if item.get('match')]:
                        json_delivery = item['json_delivery'] if item['json_delivery'] is not None else "Отсутствует"
                        page_raw = item['page_delivery_raw'] if item['page_delivery_raw'] is not None else "Отсутствует"
                        page_clean = item['page_delivery_clean'] if item[
                                                                        'page_delivery_clean'] is not None else "Отсутствует"

                        item_info = [f"Артикул: {item['article']}"]
                        item_info.append(f"  В JSON: {json_delivery}")
                        item_info.append(f"  На странице (оригинал): {page_raw}")
                        item_info.append(f"  На странице (очищено): {page_clean}")
                        if 'message' in item:
                            item_info.append(f"  Примечание: {item['message']}")

                        matches_report.append("\n".join(item_info))

                    allure.attach("\n\n".join(matches_report), name="Совпадения",
                                  attachment_type=allure.attachment_type.TEXT)

                # Выводим несоответствия
                mismatches = [item for item in details if not item.get('match')]
                if mismatches:
                    mismatches_report = ["✗ НЕСООТВЕТСТВИЯ:"]
                    for item in mismatches:
                        json_delivery = item['json_delivery'] if item['json_delivery'] is not None else "Отсутствует"
                        page_raw = item['page_delivery_raw'] if item['page_delivery_raw'] is not None else "Отсутствует"
                        page_clean = item['page_delivery_clean'] if item[
                                                                        'page_delivery_clean'] is not None else "Отсутствует"

                        item_info = [f"Артикул: {item['article']}"]
                        item_info.append(f"  В JSON: {json_delivery}")
                        item_info.append(f"  На странице (оригинал): {page_raw}")
                        item_info.append(f"  На странице (очищено): {page_clean}")
                        if 'message' in item:
                            item_info.append(f"  Причина: {item['message']}")

                        mismatches_report.append("\n".join(item_info))

                    allure.attach("\n\n".join(mismatches_report), name="Несоответствия",
                                  attachment_type=allure.attachment_type.TEXT)

            logger.info(f"Общий результат: {'✓' if result else '✗'}")
            assert result, f"Не все номера допоставки совпадают на странице и в JSON"

    @allure.story("Проверка кнопок фото")
    @allure.severity(allure.severity_level.MINOR)
    def test_photo_buttons_fast(self, btp_page):
        """Максимально простой тест проверки фото"""
        with allure.step("Проверка кнопок фото для артикулов"):
            logger.info("Начало быстрой проверки кнопок фото")
            start_time = time.time()

            # Вызываем простой метод
            match, result = btp_page.verify_photo_buttons_simple()

            # Формируем результаты
            execution_time = time.time() - start_time
            logger.info(f"Результаты проверки кнопок фото (время: {execution_time:.2f} сек)")
            allure.attach(f"Время выполнения: {execution_time:.2f} сек", name="Время выполнения",
                          attachment_type=allure.attachment_type.TEXT)

            # Получаем списки для отчета
            ui_articles = result['ui_articles']
            json_articles = result['json_articles']

            # Формируем отчет для Allure
            report = []
            report.append(f"Артикулов с фото в UI: {len(ui_articles)}")
            report.append(f"Артикулов с фото в JSON: {len(json_articles)}")

            # Несоответствия
            only_in_ui = set(ui_articles) - set(json_articles)
            only_in_json = set(json_articles) - set(ui_articles)

            if only_in_ui:
                report.append(f"\nЕсть кнопки фото в UI, но нет в JSON ({len(only_in_ui)}):")
                for article in list(only_in_ui)[:5]:
                    report.append(f"  - {article}")
                if len(only_in_ui) > 5:
                    report.append(f"  ... и еще {len(only_in_ui) - 5}")

            if only_in_json:
                report.append(f"\nЕсть фото в JSON, но нет кнопок в UI ({len(only_in_json)}):")
                for article in list(only_in_json)[:5]:
                    report.append(f"  - {article}")
                if len(only_in_json) > 5:
                    report.append(f"  ... и еще {len(only_in_json) - 5}")

            report.append(f"\nОбщий результат: {'✓' if match else '✗'}")

            # Добавляем отчет в Allure
            allure.attach("\n".join(report), name="Результаты проверки кнопок фото",
                          attachment_type=allure.attachment_type.TEXT)

            logger.info(f"Общий результат: {'✓' if match else '✗'}")
            assert match, "Не все артикулы имеют корректные кнопки фото"

    @allure.story("Проверка попапов доставки")
    @allure.severity(allure.severity_level.MINOR)
    def test_delivery_popups_fast(self, btp_page):
        """Быстрый тест проверки попапов с информацией о доставке"""
        with allure.step("Проверка попапов с информацией о доставке"):
            logger.info("Начало быстрого теста проверки попапов доставки")

            start_time = time.time()
            result = btp_page.verify_delivery_popups_fast()
            execution_time = time.time() - start_time

            logger.info(f"Результаты быстрой проверки попапов доставки (время: {execution_time:.2f} сек)")
            allure.attach(f"Время выполнения: {execution_time:.2f} сек", name="Время выполнения",
                          attachment_type=allure.attachment_type.TEXT)

            # Формируем отчет для Allure
            report = []

            # Если нет элементов доставки ни в JSON, ни в UI, тест считается успешным
            if result.get("skip_test", False):
                skip_reason = result.get('skip_reason', 'Нет элементов доставки')
                logger.info(f"Тест успешно завершен: {skip_reason}")
                report.append(f"Тест успешно завершен: {skip_reason}")
                allure.attach("\n".join(report), name="Результаты проверки попапов доставки",
                              attachment_type=allure.attachment_type.TEXT)
                return  # Просто завершаем тест успешно

            report.append(f"Записей о доставке в JSON: {result.get('json_delivery_count', 0)}")
            report.append(f"Элементов 'Машина отправлена' на странице: {result.get('ui_delivery_count', 0)}")
            report.append(f"Совпадение количества: {'✓' if result.get('count_match', False) else '✗'}")

            if 'processed_count' in result:
                report.append(f"Проверено попапов: {result['processed_count']}")

            if 'message' in result:
                report.append(f"Сообщение: {result['message']}")

            allure.attach("\n".join(report), name="Результаты проверки попапов доставки",
                          attachment_type=allure.attachment_type.TEXT)

            # Проверяем результат только если есть элементы для проверки
            if not result.get("skip_test", False):
                assert result["success"], "Проверка попапов доставки не прошла"