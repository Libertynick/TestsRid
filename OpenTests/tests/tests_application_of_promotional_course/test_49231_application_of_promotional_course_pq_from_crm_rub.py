import allure
import pytest

from base_page.base_page import BasePageCrm
from config import TestEnvironment
from crm_pages.assortments_page.assortments_page import AssortmentsPage, ModalEdit
from crm_pages.header_page.header_page import Tools
from crm_pages.modal_new_kp.modal_new_kp import ModalNewKp
from crm_pages.object_page.object_page import ObjectPage, KpTab
from crm_pages.pq_page.pq_page import PqPage
from open_pages.confirmation_page.confirmation_page import ConfirmationPage
from open_pages.design_condition_page.design_condition_page import DesignConditionPage
from open_pages.header.profile_menu_user import ProfileMenuUser
from open_pages.main_page.main_page import MainPage
from open_pages.my_design_conditions_page.my_design_conditions_page import MyDesignConditionsPage
from open_pages.order_details_page.order_details_page import OrderDetails


@allure.feature('Опеновские тесты')
@allure.story('Применение промо курса. PQ из CRM. Рубли')
@pytest.mark.parametrize('article', ['087H374983R 082H0212R'])
@pytest.mark.stage
def test_49231_application_of_promotional_course_pq_from_crm_rub(browser, article, auth_crm_extru_start,
                                                                 auth_extru_crm_from_authorized_page):
    """Применение промо курса. PQ из CRM. Рубли"""
    # CRM
    potential_mode = 'Частичная закупка'
    final_buyer = 'ТКТ Инжиниринг (7718992266)'  # Конечный покупатель
    object_tst = TestEnvironment.LINK_OBJECT_IN_TST
    link_assortments = TestEnvironment.LINK_ASSORTMENTS_PAGE_CRM
    login_crm_tst = TestEnvironment.LOGIN_CRM

    # Опен
    link_open = TestEnvironment.LINK_OPEN_TST
    login_open = TestEnvironment.LOGIN_TST_VODOKOMFORT
    password_open = TestEnvironment.PASSWORD_TST_VODOKOMFORT

    page_base_crm = BasePageCrm(browser, link_assortments)
    page_assortments = AssortmentsPage(browser, link_assortments)
    page_modal_edit_assortments = ModalEdit(browser, link_assortments)
    page_tools = Tools(browser, object_tst)
    page_object = ObjectPage(browser, object_tst)
    page_modal_new_kp = ModalNewKp(browser, object_tst)
    page_kp_tab = KpTab(browser, object_tst)
    page_pq = PqPage(browser, object_tst)

    # Экземпляры страниц Опена
    page_mane_open = MainPage(browser, link_open)
    page_profile_menu_open = ProfileMenuUser(browser, link_open)
    page_my_design_condition_open = MyDesignConditionsPage(browser, link_open)
    page_design_condition_open = DesignConditionPage(browser, link_open)
    page_confirmation = ConfirmationPage(browser, link_open)
    page_order_details = OrderDetails(browser, link_open)

    article_list = article.split(' ')
    dict_price_assortments = {}  # Цена из ассортимента
    dict_price_without_nds = {}  # Цена за штуку без НДС по артикулу

    auth_crm_extru_start(ruco=login_crm_tst)
    page_base_crm.open()

    for el in article_list:
        page_assortments.search_article(el)
        page_assortments.editing_folder_09_ridan_products(el)
        page_modal_edit_assortments.there_should_be_a_price_code_in_cu()
        dict_price_assortments[el] = page_modal_edit_assortments.save_price_code()
        page_modal_edit_assortments.closing_editing_modal()
    print(dict_price_assortments)

    page_base_crm = BasePageCrm(browser, object_tst)
    auth_extru_crm_from_authorized_page(url_page=object_tst)

    page_object.click_add_kp()

    page_modal_new_kp.potential_mode_selection(potential_mode)
    page_modal_new_kp.choice_distributor()
    page_modal_new_kp.choice_sap_code_main_contract()
    page_modal_new_kp.choice_final_buyer(final_buyer)
    page_modal_new_kp.adding_codes(article)
    page_modal_new_kp.click_btn_save_pq()
    num_pq = page_modal_new_kp.store_num_pq_in_title()
    print(num_pq)

    # Сохраняем цену за штуку без НДС по артикулу
    for el in article_list:
        dict_price_without_nds[el] = page_modal_new_kp.save_price_one_joke_without_nds(el)

    print(dict_price_without_nds, 'Цена за штуку без НДС в СРМ')

    # Проверяем расчет по промо курсу
    for el in article_list:
        page_modal_new_kp.check_calculation_by_promo_code_with_price_in_usd(
            dict_price_assortments[el], el, dict_price_without_nds[el])

    page_modal_new_kp.send_for_approval_from_modal_new_kp()
    page_modal_new_kp.modal_kp_has_not_been_pre_screened()
    page_object.go_to_chapter_kp()
    page_kp_tab.opening_pq_in_a_new_tab_by_number(num_pq)

    window_pq_crm = browser.current_window_handle

    # Переход в Опен
    browser.execute_script("window.open(arguments[0])", link_open)
    page_mane_open.switching_window(-1)
    page_mane_open.authorization_from_main_page(login_open, password_open)

    page_profile_menu_open.click_profile()
    page_profile_menu_open.go_to_design_conditions()

    page_my_design_condition_open.search_for_pq_and_switch_to_it(num_pq)

    # Проверка отображения иконки промо курса и тултипа
    for el in article_list:
        page_design_condition_open.check_icon_promo_course_by_article(el)
        page_design_condition_open.check_text_in_tooltip_promo_course_by_article(el)

    dict_price_list_on_pq_page_open = {}  # Прайс-лист на странице КП в Опене по артикулу
    for el in article_list:
        dict_price_list_on_pq_page_open[el] = page_design_condition_open.save_price_list_by_article(el)

    print(dict_price_list_on_pq_page_open, 'Прайс-лист в Опене на странице КП')

    with allure.step(
            f'Проверяем, что прайс-листы на странице КП {num_pq} в опене и в модалке создания заказа в срм равны'):
        for el in dict_price_list_on_pq_page_open:
            assert dict_price_list_on_pq_page_open[el] == dict_price_without_nds[el], \
                f'Прайс-лист артикула {el} - ({dict_price_list_on_pq_page_open[el]} на странице КП в Опене не равен ' \
                f'прайс-листу в модалке создания КП {num_pq} в СРМ)'

    page_design_condition_open.click_button_order()

    page_confirmation.click_button_confirm()
    page_confirmation.click_on_the_button_to_return_to_pq()

    page_design_condition_open.waiting_to_create_invoices()
    page_design_condition_open.go_to_order(1)

    num_order = page_order_details.store_num_order()
    print(num_order)
    dict_price_list_order_details_open = {}
    for el in article_list:
        dict_price_list_order_details_open[el] = page_order_details.save_price_list_by_article(el)

    print(f'{dict_price_list_order_details_open} - прайс-лист на странице Детали заказа в Опене')

    with allure.step(f'Проверка соответствия прайс-листа на странице Детали заказа {num_order} в Опене с прайсом '
                     f'при создании КП {num_pq} в модалке создания КП в срм'):
        for el in dict_price_without_nds:
            assert dict_price_list_order_details_open[el] == dict_price_without_nds[el], \
                f'Прайс-лист артикула {el} - ({dict_price_list_order_details_open[el]} на странице Детали заказа ' \
                f'{num_order}) не соответствует прайсу при создании КП в модалке создания КП {num_pq} в срм'

    # Переход на вкладку PQ в срм
    browser.switch_to.window(window_pq_crm)
    page_pq.refresh_page()
    page_pq.go_to_order_by_reference_number(1)
    dict_price_list_order_page_crm = {}

    with allure.step(f'Проверяем соответствие прайс-листа на странице заказа {num_order} в срм с прайсом на странице '
                     f'заказа в Опене'):
        for el in article_list:
            dict_price_list_order_page_crm[el] = page_pq.save_price_one_joke_without_nds(el)
            assert dict_price_list_order_page_crm[el] == dict_price_list_on_pq_page_open[el], \
                f'Прайс-лист артикула {el} на странице заказа в срм - ({dict_price_list_order_page_crm[el]}) не ' \
                f'соответствует прайсу на странице заказа в Опене - ({dict_price_list_on_pq_page_open[el]})'
