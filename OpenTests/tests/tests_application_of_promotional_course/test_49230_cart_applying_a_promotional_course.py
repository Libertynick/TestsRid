import allure
import pytest

from config import TestEnvironment
from open_pages.cart_page.cart_page import CartPage
from open_pages.header.header_page import Header
from open_pages.main_page.main_page import MainPage

link_tst_open = TestEnvironment.LINK_OPEN_TST
login_open_tst = TestEnvironment.LOGIN_TST_VODOKOMFORT
password_open_tst = TestEnvironment.PASSWORD_TST_VODOKOMFORT


@pytest.mark.xdist_group(name="open")
@allure.feature('Опеновские тесты')
@allure.story('49230 Применение промокурса. Корзина')
@pytest.mark.stage
@pytest.mark.parametrize('article_promo_course, article_internal_rate', [
    ('003L0125R 087H374983R 082H0212R', '140F1246R 19808236R 98300758R')
])
def test_49230_cart_applying_a_promotional_course(browser, article_promo_course, article_internal_rate):
    """49230 Применение промокурса, Корзина"""
    main_page = MainPage(browser, link_tst_open)
    header_page = Header(browser, link_tst_open)
    cart_page = CartPage(browser, link_tst_open)

    article_promo_course_list = article_promo_course.split(' ')
    article_internal_rate_list = article_internal_rate.split(' ')

    # Логинимся и переходим в корзину
    main_page.open()
    main_page.authorization_from_main_page(login_open_tst, password_open_tst)
    header_page.click_basket()

    # Действия в корзине
    cart_page.click_empty_trash()
    cart_page.choice_of_client_number()
    cart_page.type_product_in_input(article_promo_course)
    cart_page.click_add_button()

    # Проверяем отображение промо курса
    for article in article_promo_course_list:
        cart_page.there_must_be_a_prom_curse_for_article(article)

    cart_page.type_product_in_input(article_internal_rate)
    cart_page.click_add_button()

    # Проверяем отображение промо курса
    for article in article_promo_course_list:
        cart_page.there_must_be_a_prom_curse_for_article(article)

    # Проверяем отображение информации о внутреннем курсе
    for article in article_internal_rate_list:
        cart_page.there_must_be_a_internal_curse_by_article(article)

    # Сохраняем прайс-лист в рублях кодов с промо курсом
    price_list_rub_article_promo_curse = {}
    for article in article_promo_course_list:
        price_list_rub_article_promo_curse[article] = cart_page.save_price_list_by_article(article)

    cart_page.click_button_switch_to_ue()

    # Проверяем, что пересчет прайс-листа у кодов с промо курсом идет по промо курсу
    for article in article_promo_course_list:
        price_list_by_article_rub = price_list_rub_article_promo_curse[article]
        cart_page.checking_whether_payment_is_being_made_at_promotional_rate(article, price_list_by_article_rub)
