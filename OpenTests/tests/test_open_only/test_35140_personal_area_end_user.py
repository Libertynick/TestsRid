import time

import allure
import pytest
from selenium.common import TimeoutException

from base_page.base_page import BasePage
from config import TestEnvironment
from open_pages.cart_page.cart_page import CartPage
from open_pages.distr_and_service_partners_page.distr_and_service_partners_page import DistrAndServicePartners
from open_pages.header.header_page import TopHorizontalMenu, Catalog, BlockSearch, Header
from open_pages.main_page.main_page import MainPage
from open_pages.price_list_download_page.price_list_download_page_page import DownloadPriceListHe
from open_pages.product_page_of_thermostatic_element_series_ra.product_page_of_thermostatic_element_series_ra_page \
    import \
    ThermostaticElementRA
from open_pages.searching_results_page.searching_results_page import SearchingResultsPage
from open_pages.uploading_directories.uploading_directories_page import UploadCatalogHE

ARTICLE = ['065B8307R 003L0145R']


@allure.feature('Опеновские тесты')
@allure.story('Личный кабинет дистрибьютора и конечного клиента')
@pytest.mark.parametrize('article', ['065B8307R 003L0145R'])
@pytest.mark.stage
@pytest.mark.xdist_group(name="open")
def test_upload_document_cart_and_draft(browser, article):
    """Личный кабинет дистрибьютора и конечного клиента"""

    """Скачивание документов на странице Корзины и Черновик"""

    # Действия на Главной странице
    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.open()
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_INDIRECT_CUSTOMER,
                                      TestEnvironment.PASSWORD_TST_INDIRECT_CUSTOMER)

    # Переход в Корзину
    page = Header(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_basket()

    # Действия в корзине
    page = CartPage(browser, TestEnvironment.LINK_OPEN_TST)
    try:
        page.click_empty_trash()
    except TimeoutException:
        pass
    page.type_product_in_input(article)
    page.click_add_button()

    # Скачивание документов
    page.upload_button()
    page.save_excel_end_user()
    time.sleep(5)
    page.cost_calculation_pdf()
    name_object = 'Тестирование стейджа'
    object_address = 'Красногорск, Павшино в/г'
    customer_name = 'Анатолий'
    customer_phone = '5629155'
    page.filling_out_the_fields_pdf(name_object, object_address, customer_name, customer_phone)
    time.sleep(2)
    page.download_pdf()
    time.sleep(2)
    page.cost_calculation_pdf()
    page.sent_to_email()
    page.click_empty_trash()


@allure.feature('Опеновские тесты')
@allure.story('Страница с контактами дистрибьюторов и сервисных партнеров')
@pytest.mark.stage
def test_distributors_and_service_partners(browser):
    """Страница с контактами дистрибьюторов и сервисных партнеров"""
    region = 'Новосибирская область'
    expected_address = 'Новосибирск'

    direction = 'Промышленная автоматика'

    # Действия на Главной странице
    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.open()
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_INDIRECT_CUSTOMER,
                                      TestEnvironment.PASSWORD_TST_INDIRECT_CUSTOMER)
    # Переход на страницу Дистрибьюторы и сервисные партнеры
    page = TopHorizontalMenu(browser, TestEnvironment.LINK_OPEN_TST)
    page.were_buy()
    page = DistrAndServicePartners(browser, TestEnvironment.LINK_OPEN_TST)
    page.choose_a_direction(direction)
    page.find_distr_address(region)
    page.expand_all_lists_with_contacts()
    page.checking_display_of_distributors_by_region(expected_address)


@allure.feature('Опеновские тесты')
@allure.story('Каталог. Добавление товара в корзину')
@pytest.mark.parametrize('article', ['013G7070R'])
@pytest.mark.stage
def test_catalog(browser, article):
    # Действия на Главной странице
    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.open()
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_INDIRECT_CUSTOMER,
                                      TestEnvironment.PASSWORD_TST_INDIRECT_CUSTOMER)

    page = Header(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_basket()

    page = CartPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_empty_trash()

    # Переход в каталог
    page = Catalog(browser, TestEnvironment.LINK_OPEN_TST)
    page.open_menu_catalog()
    page = ThermostaticElementRA(browser, TestEnvironment.LINK_OPEN_TST)
    page.page_thermostatic_element_ra()
    cost_code_catalog = page.save_cost_code(article)
    page.check_box_code(article)

    page = Header(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_basket()

    # Переход в Корзину для проверки добавления кода и стоимости
    page = CartPage(browser, TestEnvironment.LINK_OPEN_TST)
    cost_code_card = page.save_price_list_by_article(article)
    # Проверка закомментирована, так как цены в каталоге на тестовом окружении не обновляются - цена в корзине разнится
    # с ценой в каталоге
    # assert cost_code_catalog == cost_code_card, \
    #     f'Цена из каталога {cost_code_catalog} не равна цене в Корзине {cost_code_card}'

    list_code = page.save_list_articles_in_cart()
    print(list_code)
    assert len(list_code) == 1, \
        f'Кол-во кодовых номеров не равно 1 - {len(list_code)}'
    page.click_empty_trash()


@allure.feature('Опеновские тесты')
@allure.story('Проверка работоспособности страниц, на открытие карточки товара. Конечный пользователь')
@pytest.mark.stage
@pytest.mark.parametrize('article', ['013G5074', '013G7070R'])
def test_open_links(browser, article):
    """Проверка работоспособности страниц без падения, на открытие карточки товара. Конечный пользователь"""

    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.open()
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_INDIRECT_CUSTOMER,
                                      TestEnvironment.PASSWORD_TST_INDIRECT_CUSTOMER)

    page = BlockSearch(browser, TestEnvironment.LINK_OPEN_TST)
    page.enter_article_in_search_field(article)
    page.click_btn_search(article)

    page = SearchingResultsPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.go_to_product_page(article)

    page = ThermostaticElementRA(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_on_add_to_cart_button_on_product_card()


@allure.feature('Опеновские тесты')
@allure.story('Скачивание прайс-листа и каталога')
@pytest.mark.stage
def test_download_price_and_catalog(browser):
    """Скачивание прайс-листа и каталога"""
    # Действия на Главной странице
    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.open()
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_INDIRECT_CUSTOMER,
                                      TestEnvironment.PASSWORD_TST_INDIRECT_CUSTOMER)

    # Переход в каталог
    page = Catalog(browser, TestEnvironment.LINK_OPEN_TST)
    page.open_menu_catalog()
    page.view_price_list()

    page = BasePage(browser, TestEnvironment.LINK_OPEN_TST)
    page.switching_window(1)
    # Скачивание прайс-листа
    page = DownloadPriceListHe(browser, TestEnvironment.LINK_OPEN_TST)
    page.download_price_pdf_he()
    time.sleep(1)

    # Скачивание каталога
    page = Catalog(browser, TestEnvironment.LINK_OPEN_TST)
    page.open_menu_catalog()
    page.upload_catalog()
    page = BasePage(browser, TestEnvironment.LINK_OPEN_TST)
    page.switching_window(2)

    page = UploadCatalogHE(browser, TestEnvironment.LINK_OPEN_TST)
    page.delete_checkbox()
    page.upload_catalog_he()
    time.sleep(1)
    # Скачивание прайс-листа
    page.section_upload_price_list()
    page.button_upload_price_list()
    time.sleep(1)
