import allure
import pytest

from config import ProdEnvironment

from open_pages.cart_page.cart_page import CartPage

from open_pages.main_page.main_page import MainPage
from open_pages.order_details_page.order_details_page import OrderDetails, ModalWindowCancelOrder
from open_pages.header.profile_menu_user import ProfileMenuUser
from open_pages.order_list_page.order_list_page import OrderList

from open_pages.my_design_conditions_page.my_design_conditions_page import MyDesignConditionsPage
from open_pages.header.header_page import UlMenuOrdersPage, Header

from open_pages.objects_page.fastening_requests.fastening_requests import FasteningRequestsPage, \
    CreatingRequestForFasteningPage
from open_pages.header.header_page import Object, Shipments
from open_pages.objects_page.free_jbjects.free_objects import FreeObjectsPage
from open_pages.shipment_statuses_page.shipments_page import ShipmentInStock
from open_pages.standart_order_page.standart_order_page import StandardOrderPage
from tests.test_open_only import test_open_links, test_50447_adding_non_existent_item_to_cart
from tests.test_open_only.online_selection.test_39752_selection_of_analogue_ridan_equipment_by_article_number import \
    selection_of_analogue_ridan_equipment_by_article_number
from tests.test_open_only.online_selection.test_39753_selection_of_analogue_ridan_equipment_by_name import \
    selection_of_analogue_ridan_equipment_by_name
from tests.test_open_only.online_selection.test_40198_selection_bhu import selection_bhu
from tests.test_open_only.test_32836_checking_series_cards import checking_series_cards_32836
from tests.test_open_only.test_32837_checking_the_product_card import checking_the_product_card
from tests.test_open_only.test_40436_product_search_in_open import product_search_in_open
from tests.test_open_only.tests_pto_configurator.test_26723_standard_calculation. \
    test_26723_pto_configurator_standard_calculation_tst_environment import \
    pto_configurator_standard_calculation
from tests.test_open_only.tests_pto_configurator.test_26723_standard_calculation. \
    test_formation_of_a_questionnaire_from_a_standard_calculation_pto import \
    formation_of_a_questionnaire_from_a_standard_calculation_pto
from tests.test_open_only.tests_pto_configurator.test_27323_two_stage_mixed_gws2.test_27323_two_stage_mixed_gws2 \
    import two_stage_mixed_gws2

ARTICLE = ['065B8207R 10']
ADDRESS_PICKUP = 'Московская обл., Истра, деревня Лешково, д 217'
link_pto_configurator = ProdEnvironment.LINK_PTO_CONFIGURATOR
link_analog_search = ProdEnvironment.LINK_ANALOG_SEARCH


@allure.feature('Смоук прода Опена')
@allure.story('Создание КП самовывоз')
@pytest.mark.xdist_group(name="1")  # группа для параллельного запуска
@pytest.mark.prod
def test_creation_kp(browser):
    """Создание КП самовывоз"""
    # Действия на Главной странице
    page = MainPage(browser, ProdEnvironment.OPEN_URL)
    page.open()
    page.authorization_from_main_page(ProdEnvironment.EMAIL_OPEN_PROD, ProdEnvironment.PASSWORD_OPEN_PROD)

    # Переход вКорзину
    page = Header(browser, ProdEnvironment.OPEN_URL)
    page.click_basket()

    # Действия в корзине
    page = CartPage(browser, ProdEnvironment.OPEN_URL)
    page.click_empty_trash()
    number_client = '14421115'  # Клиентский номер
    page.choice_of_client_number(number_client)
    page.type_product_in_input(ARTICLE)
    page.click_add_button()
    price_cart = page.store_price()
    print(price_cart, 'price_cart---')
    page.click_continue_button()

    # Действия на странице Подтверждение
    page = StandardOrderPage(browser, ProdEnvironment.OPEN_URL)
    page.should_h1_standard_order()
    page.click_new_project()
    page.click_standard_order()
    price_confirmation = page.store_price_confirmation()
    print(price_confirmation, 'price_confirmation---')
    page.should_be_equal_prices(price_cart, price_confirmation)
    page.choice_of_payment_terms_prepayment()
    comment = 'ТЕСТИРОВАНИЕ ПРОДА!!!\ntest_selenium_web_ui'
    page.type_comment(comment)
    page.choice_of_delivery_method_pickup()
    page.should_be_the_default_address(ADDRESS_PICKUP)
    page.click_confirmation_button()
    page.click_num_pq_on_order_placed_page()

    # Страница Детали заказа
    page = OrderDetails(browser, ProdEnvironment.OPEN_URL)
    page.waiting_for_account_creation()
    page.data_display_check()
    price_open = page.store_price_order()
    print(price_open, 'Цена на странице Детали заказа')
    num_order = page.store_num_order()
    print(num_order, 'Номер заказа')
    page.checking_printing_forms_download(num_order)


@allure.feature('Смоук прода Опена')
@allure.story('Отмена заказа')
@pytest.mark.xdist_group(name="2")  # группа для параллельного запуска
@pytest.mark.prod
def test_cancel_order(browser):
    """Отмена заказа"""
    page = MainPage(browser, ProdEnvironment.OPEN_URL)
    page.open()
    page.authorization_from_main_page(ProdEnvironment.EMAIL_OPEN_PROD, ProdEnvironment.PASSWORD_OPEN_PROD)

    # Переход на страницу заказы
    page = ProfileMenuUser(browser, ProdEnvironment.OPEN_URL)
    page.go_to_orders_menu_distributor()
    page = OrderList(browser, ProdEnvironment.OPEN_URL)
    last_order = page.copy_last_order()
    page.order_search_by_number_and_author(last_order)
    page.go_to_order(last_order)

    # Детали заказа
    page = OrderDetails(browser, ProdEnvironment.OPEN_URL)
    page.click_order_cancellation()

    # Модалка Отмена заказа
    page = ModalWindowCancelOrder(browser, ProdEnvironment.OPEN_URL)
    page.should_be_title_cancel_order()
    page.click_send_request_in_modal_cancel_order()
    page.there_should_be_a_message_about_the_need_to_choose_a_reason()
    page.choice_of_reason_placement_error()
    page.entering_a_comment()
    page.click_send_request_in_modal_cancel_order()
    page.there_should_be_a_success_message()
    page.close_modal_result_request()


@allure.feature('Смоук прода Опена')
@allure.story(
    'Тест для проверки страницы Заказы (переход на страницу Заказы -> копирование номера последнего заказа -> '
    'поиск по скопированнму номеру -> переход в найденный заказ -> '
    'проврека отображения информации на странице) -> '
    'Скачивание счета -> Поиск счета на компуктере')
@pytest.mark.xdist_group(name="1")  # группа для параллельного запуска
@pytest.mark.prod
def test_order_page(browser):
    """Тест для проверки страницы Заказы (переход на страницу Заказы -> копирование номера последнего
    заказа -> поиск по скопированнму номеру -> переход в найденный заказ ->
    проврека отображения информации на странице) -> Скачивание счета -> Поиск счета на компуктере"""
    # Авторизация
    page = MainPage(browser, ProdEnvironment.OPEN_URL)
    page.open()
    page.authorization_from_main_page(ProdEnvironment.EMAIL_OPEN_PROD, ProdEnvironment.PASSWORD_OPEN_PROD)

    # Переход на страницу заказы
    page = ProfileMenuUser(browser, ProdEnvironment.OPEN_URL)
    page.go_to_orders_menu_distributor()
    page = OrderList(browser, ProdEnvironment.OPEN_URL)
    last_order = page.copy_last_order()
    page.order_search_by_number_and_author(last_order)
    page.go_to_order(last_order)

    # Детали заказа
    page = OrderDetails(browser, ProdEnvironment.OPEN_URL)
    page.click_printing_forms()
    page.checking_download_check(last_order)
    page.verify_check_host(last_order)


@allure.feature('Смоук прода Опена')
@allure.story('Переход в проектные условия -> Открываем 1-ое PQ -> Проверяем, что открылось')
@pytest.mark.xdist_group(name="1")  # группа для параллельного запуска
@pytest.mark.prod
def test_design_conditions(browser):
    """Переход в проектные условия -> Открваем 1-ое PQ -> Проверяем, что открылось"""
    # Авторизация
    page = MainPage(browser, ProdEnvironment.OPEN_URL)
    page.open()
    page.authorization_from_main_page(ProdEnvironment.EMAIL_OPEN_PROD, ProdEnvironment.PASSWORD_OPEN_PROD)

    # Переход на страницу заказы
    page = ProfileMenuUser(browser, ProdEnvironment.OPEN_URL)
    page.go_to_orders_menu_distributor()

    # Выпадающий список с меню в Заказы
    page = UlMenuOrdersPage(browser, ProdEnvironment.OPEN_URL)
    page.click_orders_tab()
    page.go_to_design_conditions()

    # Проектное условие
    page = MyDesignConditionsPage(browser, ProdEnvironment.OPEN_URL)
    page.go_to_first_pq()


@allure.feature('Смоук прода Опена')
@allure.story('Переход на статусы отгрузок')
@pytest.mark.xdist_group(name="1")  # группа для параллельного запуска
@pytest.mark.prod
def test_shipments_in_stock(browser):
    """Переход на статусы отгрузок"""
    # Авторизация
    page = MainPage(browser, ProdEnvironment.OPEN_URL)
    page.open()
    page.authorization_from_main_page(ProdEnvironment.EMAIL_OPEN_PROD, ProdEnvironment.PASSWORD_OPEN_PROD)

    # Переход на страницу отгрузки
    page = ProfileMenuUser(browser, ProdEnvironment.OPEN_URL)
    page.go_to_shipments()


@allure.feature('Смоук прода Опена')
@allure.story('Двухступенчатая смешанная схема ГВС2')
@pytest.mark.xdist_group(name="2")  # группа для параллельного запуска
def test_two_stage_mixed_gws2_prod(browser):
    """Двухступенчатая смешанная схема ГВС2"""
    two_stage_mixed_gws2_prod = two_stage_mixed_gws2
    url_prod = ProdEnvironment.OPEN_URL
    login_prod = ProdEnvironment.EMAIL_OPEN_PROD
    password_prod = ProdEnvironment.PASSWORD_OPEN_PROD

    two_stage_mixed_gws2_prod(browser, url_prod, link_pto_configurator, login_prod, password_prod)


@allure.feature('Смоук прода Опена')
@allure.story('Конфигуратор ПТО Стандартный расчёт на ПРОДЕ')
@pytest.mark.xdist_group(name="2")  # группа для параллельного запуска
@pytest.mark.prod
def test_pto_configurator_standard_calculation_prod_environment(browser):
    """Конфигуратор ПТО Стандартный расчёт на ПРОДЕ"""
    url_prod = ProdEnvironment.OPEN_URL
    login_prod = ProdEnvironment.EMAIL_OPEN_PROD
    password_prod = ProdEnvironment.PASSWORD_OPEN_PROD
    inn_company_prod = '5249071947'
    pto_configurator_standard_calculation_prod = pto_configurator_standard_calculation
    pto_configurator_standard_calculation_prod(browser, url=url_prod, link_pto_configurator=link_pto_configurator,
                                               login=login_prod, password=password_prod,
                                               inn_company=inn_company_prod)


@allure.feature('Смоук прода Опена')
@allure.story('Формирование опросного листа из стандартного расчета конфигуратора ПТО на ПРОДЕ')
@pytest.mark.xdist_group(name="2")  # группа для параллельного запуска
@pytest.mark.prod
def test_formation_of_a_questionnaire_from_a_standard_calculation_pto_prod(browser):
    """Формирование опросного листа из стандартного расчета конфигуратора ПТО на ПРОДЕ"""
    url_prod = ProdEnvironment.OPEN_URL
    login_prod = ProdEnvironment.EMAIL_OPEN_PROD
    password_prod = ProdEnvironment.PASSWORD_OPEN_PROD
    inn_company_prod = '5249071947'
    formation_of_a_questionnaire_from_a_standard_calculation_pto(browser, url=url_prod,
                                                                 link_pto_configurator=link_pto_configurator,
                                                                 login=login_prod, password=password_prod,
                                                                 inn_company=inn_company_prod)


@allure.feature('Смоук прода Опена')
@allure.story('Объекты - Заявка на крепление')
@pytest.mark.xdist_group(name="1")  # группа для параллельного запуска
@pytest.mark.xfail
@pytest.mark.prod
def test_objects_application_for_fastening(browser):
    """Объекты - Заявка на крепление"""

    # Авторизация
    page = MainPage(browser, ProdEnvironment.OPEN_URL)
    page.open()
    page.authorization_from_main_page(ProdEnvironment.EMAIL_OPEN_PROD, ProdEnvironment.PASSWORD_OPEN_PROD)
    mail_address = page.generation_mail_address()

    # Переход в Заявки на крепление
    page = ProfileMenuUser(browser, ProdEnvironment.OPEN_URL)
    page.go_to_applications_for_fastening()

    # Страница Заявки на крепление
    page = FasteningRequestsPage(browser, ProdEnvironment.OPEN_URL)
    page.click_advanced_search()
    page.search_fastening_requests(ProdEnvironment.APPLICATION_PROD)
    page.go_to_fastening_requests(ProdEnvironment.APPLICATION_PROD)

    # Редактирование заявки
    page = CreatingRequestForFasteningPage(browser, ProdEnvironment.OPEN_URL)
    page.click_edit_button()
    page.click_investor_customer()
    page.type_email_investor(mail_address)
    page.click_send_for_approval()
    page.click_learn_more()

    # Переход в измененную заявку и проверка на смену email
    page = FasteningRequestsPage(browser, ProdEnvironment.OPEN_URL)
    page.go_to_fastening_requests(ProdEnvironment.APPLICATION_PROD)

    page = CreatingRequestForFasteningPage(browser, ProdEnvironment.OPEN_URL)
    page.click_edit_button()
    page.click_investor_customer()
    page.email_change_check(mail_address)


@allure.feature('Смоук прода Опена')
@allure.story('Открытие страницы Свободные объекты -> проверка, что открываются детали объекта')
@pytest.mark.xdist_group(name="2")  # группа для параллельного запуска
@pytest.mark.prod
def test_free_objects(browser):
    """Открытие страницы Свободные объекты -> проверка, что открываются детали объекта"""
    inn = '5249071947'

    # Авторизация
    page = MainPage(browser, ProdEnvironment.OPEN_URL)
    page.open()
    page.authorization_from_main_page(ProdEnvironment.EMAIL_OPEN_PROD, ProdEnvironment.PASSWORD_OPEN_PROD)

    # Профиль -> Объекты
    page = ProfileMenuUser(browser, ProdEnvironment.OPEN_URL)
    page.click_profile()
    page.click_btn_ul_objects()
    page.go_to_free_object()

    # Страница Свободные Объекты
    page = FreeObjectsPage(browser, ProdEnvironment.OPEN_URL)
    page.choice_inn(inn)
    page.click_button_search()
    page.go_to_first_object()


@allure.feature('Смоук прода Опена')
@allure.story('Тест на страницу Отгрузки - В пути -> Открытие страницы -> Проверить, что есть инфа на странице')
@pytest.mark.xdist_group(name="2")  # группа для параллельного запуска
@pytest.mark.skip(reason='Нет учетки для авторизации')
@pytest.mark.prod
def test_shipments(browser):
    """Тест на страницу Отгрузки - В пути -> Открытие страницы -> Проверить, что есть инфа на странице"""
    # Авторизация

    page = MainPage(browser, ProdEnvironment.OPEN_URL)
    page.open()
    page.authorization_from_main_page(ProdEnvironment.EMAIL_VODOKOMFORT, ProdEnvironment.PASSWORD_VODOKOMFORT)

    # Профиль -> Статусы отгрузок
    page = ProfileMenuUser(browser, ProdEnvironment.OPEN_URL)
    page.go_to_shipments()

    # Переход на страницу В пути
    page = Shipments(browser, ProdEnvironment.OPEN_URL)
    page.click_button_shipments()
    page.go_to_in_transit()

    # Страница В пути
    page = ShipmentInStock(browser, ProdEnvironment.OPEN_URL)
    page.verify_present_information()


@allure.feature('Смоук прода Опена')
@allure.story('32836 Проверка карточек серии')
@pytest.mark.xdist_group(name="2")  # группа для параллельного запуска
@pytest.mark.prod
def test_32836_checking_series_cards(browser):
    """32836 Проверка карточек серии"""
    checking_series_cards_32836(browser)


@allure.feature('Смоук прода Опена')
@allure.story('32837 Проверка карточки продукции')
@pytest.mark.xdist_group(name="2")  # группа для параллельного запуска
@pytest.mark.prod
@pytest.mark.parametrize('article', ['003L0145R'])
def test_32837_checking_the_product_card(browser, article):
    """32837 Проверка карточки продукции"""
    checking_the_product_card(browser, article)


@allure.feature('Смоук прода Опена')
@allure.story('Подбор БХУ')
@pytest.mark.xdist_group(name="2")  # группа для параллельного запуска
@pytest.mark.prod
def test_40198_selection_bhu(browser):
    """Подбор БХУ"""
    selection_bhu(browser)


@allure.feature('Смоук прода Опена')
@allure.story('Поиск товара в Опене')
@pytest.mark.xdist_group(name="1")  # группа для параллельного запуска
@pytest.mark.prod
@pytest.mark.parametrize('article', ['013G7070R'])
@pytest.mark.parametrize('link_open', [ProdEnvironment.OPEN_URL])
@pytest.mark.parametrize('login', [ProdEnvironment.EMAIL_OPEN_PROD])
@pytest.mark.parametrize('password', [ProdEnvironment.PASSWORD_OPEN_PROD])
def test_40436_product_search_in_open(browser, article, link_open, login, password):
    """Поиск товара в Опене"""
    product_search_in_open(browser, article, link_open, login, password)


@allure.feature('Смоук прода Опена')
@allure.story('Подбор аналога оборудования Ридан - по наименованию')
@pytest.mark.xdist_group(name="2")  # группа для параллельного запуска
@pytest.mark.prod
@pytest.mark.parametrize('link_open', [ProdEnvironment.OPEN_URL])
@pytest.mark.parametrize('full_name_product', ['КЛАПАН БАЛАНСИРОВОЧНЫЙ ДУ15'])
@pytest.mark.parametrize('login', [ProdEnvironment.EMAIL_OPEN_PROD])
@pytest.mark.parametrize('password', [ProdEnvironment.PASSWORD_OPEN_PROD])
def test_39753_selection_of_analogue_ridan_equipment_by_name_prod(browser, link_open, full_name_product, login,
                                                                  password):
    """Подбор аналога оборудования Ридан - по наименованию"""
    selection_of_analogue_ridan_equipment_by_name(browser, link_open, link_analog_search, full_name_product, login,
                                                  password)


@allure.feature('Смоук прода Опена')
@allure.story('Подбор аналога оборудования Ридан - по артикулу')
@pytest.mark.xdist_group(name="2")  # группа для параллельного запуска
@pytest.mark.prod
@pytest.mark.parametrize('link_open', [ProdEnvironment.OPEN_URL])
@pytest.mark.parametrize('article', ['013G7090'])
@pytest.mark.parametrize('login', [ProdEnvironment.EMAIL_OPEN_PROD])
@pytest.mark.parametrize('password', [ProdEnvironment.PASSWORD_OPEN_PROD])
def test_39752_selection_of_analogue_ridan_equipment_by_article_number_prod(browser, link_open, article, login,
                                                                            password):
    """Подбор аналога оборудования Ридан - по артикулу"""
    selection_of_analogue_ridan_equipment_by_article_number(browser, link_open, link_analog_search, article, login,
                                                            password)


@allure.feature('Смоук прода Опена')
@allure.story('Проверка страниц Опена')
@pytest.mark.xdist_group(name="1")  # группа для параллельного запуска
@pytest.mark.prod
@pytest.mark.parametrize('base_url', ['https://ridan.ru'])
def test_check_link_page(browser, base_url):
    """Проверка страниц Опена"""
    check_links_open = test_open_links
    check_links_open.test_open_links(browser, base_url=base_url)


@allure.feature('Смоук прода Опена')
@allure.story('Добавление в Корзину несуществующего артикула в Корзину')
@pytest.mark.xdist_group(name="1")  # группа для параллельного запуска
@pytest.mark.prod
@allure.feature('Корзина')
@allure.story('Добавление в Корзину несуществующего артикула в Корзину')
@pytest.mark.parametrize('link', [ProdEnvironment.OPEN_URL])
@pytest.mark.parametrize('login', [ProdEnvironment.EMAIL_OPEN_PROD])
@pytest.mark.parametrize('password', [ProdEnvironment.PASSWORD_OPEN_PROD])
@pytest.mark.parametrize('article', ['003G1014R001 003G1014R'])
def test_50447_adding_non_existent_item_to_cart_prod(browser, link, login, password, article):
    """Добавление в Корзину несуществующего артикула в Корзину"""
    adding_non_existent_item_to_cart = test_50447_adding_non_existent_item_to_cart
    adding_non_existent_item_to_cart.adding_non_existent_item_to_cart(browser, link, login, password, article)
