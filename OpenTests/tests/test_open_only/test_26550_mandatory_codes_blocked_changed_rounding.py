import allure
import pytest
from selenium.common import TimeoutException

from config import TestEnvironment
from open_pages.cart_page.cart_page import CartPage
from open_pages.header.header_page import Header
from open_pages.main_page.main_page import MainPage


@allure.feature('Опеновские тесты')
@allure.story('26550 Обязательные коды - заблокированные, измененные, округление')
@pytest.mark.parametrize('article', ['088H2220 1 009G0191 1'])
@pytest.mark.stage
@pytest.mark.xdist_group(name="open")
def test_26550_mandatory_codes_blocked_changed_rounding(browser, article):
    """26550 Обязательные коды - заблокированные, измененные, округление"""
    link_open = TestEnvironment.LINK_OPEN_TST
    login = TestEnvironment.LOGIN_TST_VODOKOMFORT
    password = TestEnvironment.PASSWORD_TST_VODOKOMFORT
    expected_amount_article_with_autocorrect = 100  # Ожидаемое количество штук у артикула с автозаменой
    # Инфо сообщение у кода с автозаменой
    expected_info_message_article_with_autocorrect = 'Внимание! Запрашиваемый код более не поставляется поштучно, ' \
                                                     'а только упаковками по 100 шт. Измените количество упаковок в ' \
                                                     'заказе согласно кратности 100 шт. в упаковке.'

    code_for_editing = '065B8307R'  # Код для редактирования
    amount_for_editing = 5

    article_without_supplies = article.split(' ')[2]  # Артикул без поставок
    article_with_autocorrect = article.split(' ')[0]  # Артикул с автозаменой

    page = MainPage(browser, link_open)
    page.open()
    page.authorization_from_main_page(login, password)

    page = Header(browser, link_open)
    page.click_basket()

    # Действия в корзине
    page = CartPage(browser, link_open)

    try:
        page.click_empty_trash()
    except TimeoutException:
        pass

    page.type_product_in_input(article)
    page.click_add_button()

    list_with_autocorrect = page.check_if_there_is_code_autocorrect(article_with_autocorrect)
    print(list_with_autocorrect, '- код с автозаменой')

    amount_article_with_autocorrect = page.save_amount_product_by_article(article_with_autocorrect)
    assert amount_article_with_autocorrect == 1, \
        f'Количество штук - ({amount_article_with_autocorrect}) кода с автозаменой - ({article_with_autocorrect}) ' \
        f'не соответствует ожидаемому - ({expected_amount_article_with_autocorrect})'

    # info_message_article_with_autocorrect = page.save_product_information_message_by_article(article_with_autocorrect)
    # assert info_message_article_with_autocorrect == expected_info_message_article_with_autocorrect, \
    #     f'Инфо сообщение - ({info_message_article_with_autocorrect}) у кода - ({article_with_autocorrect}) не ' \
    #     f'соответствует ожидаемому - ({expected_info_message_article_with_autocorrect})'

    page.checking_product_delivery_completion_message(article_without_supplies)
    page.click_btn_edit()
    page.entering_an_article_when_editing(code_for_editing)
    page.entering_an_amount_when_editing(amount_for_editing)
    page.save_article_edit(code_for_editing)
    amount_code_for_edit_in_cart = page.save_amount_product_by_article(code_for_editing)
    assert amount_code_for_edit_in_cart == amount_for_editing, \
        f'Количество штук - ({amount_code_for_edit_in_cart}) в корзине кода - ({code_for_editing}) после ' \
        f'редактирования не соответствует ожидаемому количеству штук - ({amount_for_editing})'
