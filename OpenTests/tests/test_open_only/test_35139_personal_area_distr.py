import time

import allure
import pytest

from base_page.base_page import BasePage
from config import TestEnvironment
from open_pages.cart_page.cart_page import CartPage

from open_pages.changing_of_dates.changing_of_dates_page import ChangeOfDatesPage

from open_pages.draft_page.draft_page import Draft
from open_pages.header.header_page import Catalog, BlockSearch, Header
from open_pages.header.profile_menu_user import ProfileMenuUser
from open_pages.main_page.main_page import MainPage
from open_pages.order_details_page.order_details_page import OrderDetails
from open_pages.price_list_download_page.price_list_download_page_page import DownloadPriceListHe
from open_pages.product_page_of_thermostatic_element_series_ra.product_page_of_thermostatic_element_series_ra_page \
    import \
    ThermostaticElementRA
from open_pages.searching_results_page.searching_results_page import SearchingResultsPage
from open_pages.uploading_directories.uploading_directories_page import UploadCatalogHE

ARTICLE = ['065B8307R 003L0145R']


@allure.feature('Опеновские тесты')
@allure.story('Личный кабинет дистрибьютора и конечного клиента')
@pytest.mark.parametrize('article', ['065B8307R 003L0145R'])
@pytest.mark.stage
@pytest.mark.xdist_group(name="open")
def test_upload_document_cart_and_draft(browser, article):
    """Личный кабинет дистрибьютора и конечного клиента"""

    """Скачивание документов на странице Корзины и Черновик"""

    # Действия на Главной странице
    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.open()
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_VODOKOMFORT, TestEnvironment.PASSWORD_TST_VODOKOMFORT)

    # Переход в Корзину
    page = Header(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_basket()

    # Действия в корзине
    page = CartPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_empty_trash()
    number_client = '14403847'  # Клиентский номер
    page.choice_of_client_number(number_client)
    page.type_product_in_input(article)
    page.click_add_button()

    # Скачивание документов
    page.upload_button()
    page.save_excel()
    time.sleep(15)
    page.cost_calculation_pdf()
    name_object = 'Тестирование стейджа'
    object_address = 'Красногорск, Павшино в/г'
    customer_name = 'Дмитрий'
    customer_phone = '5629155'
    page.filling_out_the_fields_pdf(name_object, object_address, customer_name, customer_phone)
    time.sleep(2)
    page.download_pdf()
    time.sleep(2)
    page.cost_calculation_pdf()
    page.sent_to_email()
    page.click_empty_trash()


@allure.feature('Опеновские тесты')
@allure.story('Каталог')
@pytest.mark.parametrize('article', ['013G7070R'])
@pytest.mark.stage
def test_catalog(browser, article):
    # Действия на Главной странице
    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.open()
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_VODOKOMFORT, TestEnvironment.PASSWORD_TST_VODOKOMFORT)

    # Переход в Корзину
    page = Header(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_basket()

    # Действия в корзине
    page = CartPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_empty_trash()

    # Переход в каталог
    page = Catalog(browser, TestEnvironment.LINK_OPEN_TST)
    page.open_menu_catalog()
    page = ThermostaticElementRA(browser, TestEnvironment.LINK_OPEN_TST)
    page.page_thermostatic_element_ra()
    cost_code_catalog = page.save_cost_code(article)
    page.check_box_code(article)

    page = Header(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_basket()

    # Переход в Корзину для проверки добавления кода и стоимости
    page = CartPage(browser, TestEnvironment.LINK_OPEN_TST)
    cost_code_card = page.save_price_list_by_article(article)

    # На тестовом окружении цены в каталоге и в корзине разнятся, на проде ок. На тестовом окружении проблема с
    # тестовыми данными, не обновляются цены
    # assert cost_code_catalog == cost_code_card, \
    #     f'Цена из каталога {cost_code_catalog} не равна цене в Корзине {cost_code_card}'

    list_code = page.save_list_articles_in_cart()
    print(list_code)
    assert len(list_code) == 1, \
        f'Кол-во кодовых номеров не равно 1 - {len(list_code)}'
    page.click_empty_trash()


@allure.feature('Опеновские тесты')
@allure.story('Проверка работоспособности страниц без падения, на открытие карточки товара. Дистрибьютор')
@pytest.mark.stage
@pytest.mark.parametrize('article', ['013G5074', '013G7070R'])
def test_open_links(browser, article):
    """Проверка работоспособности страниц без падения, на открытие карточки товара. Дистрибьютор"""

    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.open()
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_VODOKOMFORT, TestEnvironment.PASSWORD_TST_VODOKOMFORT)

    page = Header(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_basket()

    page = CartPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_empty_trash()

    page = BlockSearch(browser, TestEnvironment.LINK_OPEN_TST)
    page.enter_article_in_search_field(article)
    page.click_btn_search(article)

    page = SearchingResultsPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.go_to_product_page(article)

    page = ThermostaticElementRA(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_on_add_to_cart_button_on_product_card()


@allure.feature('Опеновские тесты')
@allure.story('Скачивание прайс-листа и каталога')
@pytest.mark.stage
def test_download_price_and_catalog(browser):
    """Скачивание прайс-листа и каталога"""
    # Действия на Главной странице
    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.open()
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_VODOKOMFORT, TestEnvironment.PASSWORD_TST_VODOKOMFORT)

    # Переход в каталог
    page = Catalog(browser, TestEnvironment.LINK_OPEN_TST)
    page.open_menu_catalog()
    page.view_price_list()

    page = BasePage(browser, TestEnvironment.LINK_OPEN_TST)
    page.switching_window(1)
    # Скачивание прайс-листа
    page = DownloadPriceListHe(browser, TestEnvironment.LINK_OPEN_TST)
    page.download_price_pdf_he()
    time.sleep(1)

    # Скачивание каталога
    page = Catalog(browser, TestEnvironment.LINK_OPEN_TST)
    page.open_menu_catalog()
    page.upload_catalog()
    page = BasePage(browser, TestEnvironment.LINK_OPEN_TST)
    page.switching_window(2)

    page = UploadCatalogHE(browser, TestEnvironment.LINK_OPEN_TST)
    page.delete_checkbox()
    page.upload_catalog_he()
    time.sleep(1)
    # Скачивание прайс-листа
    page.section_upload_price_list()
    page.button_upload_price_list()
    time.sleep(1)


@allure.feature('Опеновские тесты')
@allure.story('Проверка страницы Изменение сроков в Заказе')
@pytest.mark.stage
def test_page_changing_of_dates_of_the_order(browser):
    """Проверка страницы Изменение сроков в Заказе"""
    # Действия на Главной странице
    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.open()
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_VODOKOMFORT, TestEnvironment.PASSWORD_TST_VODOKOMFORT)

    page = ProfileMenuUser(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_profile()
    page.go_to_changing_of_dates_of_the_order()
    page = ChangeOfDatesPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.change_interval_days()
    page.click_btn_find()
    page.click_history()
    num_order_history = page.store_num_order()
    page.click_more_detail()
    page = OrderDetails(browser, TestEnvironment.LINK_OPEN_TST)
    num_order_details_page = page.store_num_order()
    assert num_order_history == num_order_details_page, \
        (f'Номер заказа со страницы Изменение сроков {num_order_history} '
         f'не равен номеру заказа на странице детали заказа {num_order_details_page}')
