import allure
import pytest
from selenium.common import TimeoutException

from config import ProdEnvironment
from open_pages.cart_page.cart_page import CartPage
from open_pages.cart_page.cart_shared_page.cart_shared_page import CartSharedPage
from open_pages.header.header_page import Header
from open_pages.main_page.main_page import MainPage
from open_pages.selection_online_tools_all.heat_select_selection.heat_select_page import HeatSelectPage
from open_pages.selection_tools_modal.selection_tools_modal import SelectionToolsModalPage, HeatingStationChapter

link_open = ProdEnvironment.OPEN_URL


@allure.feature('Опеновские тесты')
@allure.story('Подбор через Heat Select клапанов. '
              'Тест выполняется только на продакшене, так как на тст нет данного функционала устоявшегося')
@pytest.mark.prod
def test_heat_select_two_valve(browser):
    """Подбор через Heat Select клапанов.
        Тест выполняется только на продакшене, так как на тст нет данного функционала устоявшегося
        """
    page = MainPage(browser, link_open)
    page.open()
    page.authorization_from_main_page(ProdEnvironment.EMAIL_OPEN_PROD, ProdEnvironment.PASSWORD_OPEN_PROD)

    page = Header(browser, link_open)
    page.click_basket()

    page = CartPage(browser, link_open)
    page.click_empty_trash()

    page = Header(browser, link_open)
    page.go_to_option_tools()

    page = HeatingStationChapter(browser, link_open)
    page.go_to_selection_of_control_valves_and_direct_acting_regulators()
    page.go_to_heat_select()

    page = HeatSelectPage(browser, link_open)
    page.btn_next_step()
    page.click_check_box_system_flow()
    page.click_btn_select_a_control_valve()
    page.click_btn_perform_first_code()
    page.click_btn_download_document()
    page.click_btn_add_sales()

    page = CartSharedPage(browser, link_open)
    list_article_page_shared = sorted(page.save_list_article_on_page())

    page.click_btn_add_sales_page_shared_card()

    page = CartPage(browser, link_open)
    list_article_page_cart = sorted(page.save_list_articles_in_cart())

    assert list_article_page_cart == list_article_page_shared, \
        f'Артикула на странице "С вами поделились корзиной" - ({list_article_page_shared}) не соответствуют ' \
        f'артикулам в корзине - ({list_article_page_cart})'

    page.click_empty_trash()


@allure.feature('Опеновские тесты')
@allure.story('Подбор через Heat Select регулятора перепада. '
              'Тест выполняется только на продакшене, так как на тст нет данного функционала устоявшегося')
@pytest.mark.prod
def test_heat_select_direct_regulator(browser):
    """Подбор через Heat Select регулятора перепада.
        Тест выполняется только на продакшене, так как на тст нет данного функционала устоявшегося
        """
    page = MainPage(browser, link_open)
    page.open()
    page.authorization_from_main_page(ProdEnvironment.EMAIL_OPEN_PROD, ProdEnvironment.PASSWORD_OPEN_PROD)

    window_open = browser.current_window_handle  # Вкладка Опен
    page = Header(browser, link_open)
    page.click_basket()

    page = CartPage(browser, link_open)

    try:
        page.click_empty_trash()
    except TimeoutException:
        pass

    page = Header(browser, link_open)

    page.go_to_option_tools()

    page = HeatingStationChapter(browser, link_open)
    page.go_to_selection_of_control_valves_and_direct_acting_regulators()
    page.go_to_heat_select()

    page = HeatSelectPage(browser, link_open)
    page.click_btn_direct_regulator()

    page.btn_next_step()
    page.click_check_box_system_flow()
    page.click_btn_select_a_direct_regulator()
    page.click_btn_perform_first_code()
    page.click_btn_download_document()
    page.click_btn_add_sales()

    page = CartSharedPage(browser, link_open)
    list_article_page_shared = sorted(page.save_list_article_on_page())

    page.click_btn_add_sales_page_shared_card()

    page = CartPage(browser, link_open)
    list_article_page_cart = sorted(page.save_list_articles_in_cart())

    # Если есть автозамена у кода, то в список артикулов подставляем старый код
    for idx, code in enumerate(list_article_page_cart):
        auto_correct = page.check_if_there_is_code_autocorrect(code)
        if len(auto_correct) > 0:
            old_code = auto_correct[0]
            # new_code = auto_correct[1]
            list_article_page_cart[idx] = old_code

    assert list_article_page_cart == list_article_page_shared, \
        f'Артикула на странице "С вами поделились корзиной" - ({list_article_page_shared}) не соответствуют ' \
        f'артикулам в корзине - ({list_article_page_cart})'

    page.click_empty_trash()
