import time

import allure
import pytest

from config import TestEnvironment
from open_pages.header.profile_menu_user import ProfileMenuUser
from open_pages.main_page.main_page import MainPage
from open_pages.selection_online_tools_all.configurator_ppto.configurator_ppto_page import \
    ConfiguratorPptoEvaporatorPage

link_configurator_ppto = 'https://ruecom-open-tst1.ridancorp.net/instruments/configurator-bphe/evaporation'


def ppto_configurator_single_phase(browser):
    """Конфигуратор ППТО - однофазный"""
    link_open = TestEnvironment.LINK_OPEN_TST
    load_value = '100'  # Значение нагрузки
    type_of_coolant_medium_hot = 'Вода'  # Тип среды на Теплоносителе
    type_of_coolant_medium_cold = 'Вода'  # Тип среды на Хладоноситель
    inlet_temperature_hot_value = '100'  # Температура на входе горячая
    inlet_temperature_cold_value = '40'  # Температура на входе холодная
    outlet_temperature_hot_value = '80'  # Температура на выходе горячая
    outlet_temperature_cold_value = '50'  # Температура на выходе горячая
    maximum_heat_pressure_loss = '50'  # Максимальные потери давления Тепло
    maximum_cold_pressure_loss_value = '50'  # Максимальные потери давления Холод
    maximum_working_pressure_value = '30'  # Максимальное рабочее давление
    surface_reserve_value = '0'  # Запас поверхности
    flow_direction_value = 'Противоток'  # Направление потока

    page = ConfiguratorPptoEvaporatorPage(browser, link_open)
    page.go_to_title_design_calculations_single_phase()
    page.load_must_be_in_kwt()
    page.load_value_check(load_value)
    page.checking_type_of_coolant_medium_hot(type_of_coolant_medium_hot)
    page.checking_type_of_coolant_medium_cold(type_of_coolant_medium_cold)
    page.checking_inlet_temperature_hot_value(inlet_temperature_hot_value)
    page.checking_inlet_temperature_cold_value(inlet_temperature_cold_value)
    page.checking_outlet_temperature_hot_value(outlet_temperature_hot_value)
    page.checking_outlet_temperature_cold_value(outlet_temperature_cold_value)
    page.expense_hot_field_must_be_empty()
    page.expense_cold_field_must_be_empty()
    page.checking_maximum_heat_pressure_loss_value(maximum_heat_pressure_loss)
    page.checking_maximum_cold_pressure_loss_value(maximum_cold_pressure_loss_value)
    page.checking_maximum_working_pressure_value(maximum_working_pressure_value)
    page.checking_surface_reserve_value(surface_reserve_value)
    page.checking_flow_direction_value(flow_direction_value)
    page.click_btn_select_pto()

    page.revealing_details_of_first_solution_found()
    page.close_modal_details_solution()
    page.click_btn_add_to_basket_first_calc()
    page.click_btn_add_to_basket_in_modal_add_to_basket()
    page.click_btn_continue_shopping()
    name_of_first_solution_found = page.save_name_of_first_solution_found()
    print(name_of_first_solution_found, '- Первое найденное решение')
    page.click_btn_save_calculation_first_calc_on_page()
    page.entering_name_of_object_in_calculation_download_modal()
    page.entering_description_to_calc()
    page.click_btn_save_calc_in_modal_save_calc_for_single_phase(name_of_first_solution_found)


@pytest.mark.xdist_group(name="open")
@allure.feature('Опеновские тесты')
@allure.story('39724 Конфигуратор ППТО - однофазный без авторизации')
@pytest.mark.stage
def test_39724_ppto_configurator_single_phase_without_authorization(browser):
    """39724 Конфигуратор ППТО - однофазный без авторизации"""
    page = MainPage(browser, link_configurator_ppto)
    page.open()
    ppto_configurator_single_phase(browser)


@pytest.mark.xdist_group(name="open")
@allure.feature('Опеновские тесты')
@allure.story('39724 Конфигуратор ППТО - однофазный с авторизацией')
@pytest.mark.stage
def test_39724_ppto_configurator_single_phase_with_authorization(browser):
    """39724 Конфигуратор ППТО - однофазный с авторизацией"""
    page = MainPage(browser, link_configurator_ppto)
    page.open()
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_VODOKOMFORT, TestEnvironment.PASSWORD_TST_VODOKOMFORT)
    ppto_configurator_single_phase(browser)


@pytest.mark.xdist_group(name="open")
@allure.feature('Опеновские тесты')
@allure.story('Формирование опросного листа в однофазном расчете')
@pytest.mark.stage
def test_39724_generation_of_a_questionnaire_in_a_single_phase_calculation(browser):
    """Формирование опросного листа в однофазном расчете"""

    link_open = TestEnvironment.LINK_OPEN_TST
    e_mail_user = TestEnvironment.LOGIN_TST_VODOKOMFORT

    load_value = '100'  # Значение нагрузки
    type_of_coolant_medium_hot = 'Вода'  # Тип среды на Теплоносителе
    type_of_coolant_medium_cold = 'Вода'  # Тип среды на Хладоноситель
    inlet_temperature_hot_value = '100'  # Температура на входе горячая
    inlet_temperature_cold_value = '40'  # Температура на входе холодная
    outlet_temperature_hot_value = '80'  # Температура на выходе горячая
    outlet_temperature_cold_value = '50'  # Температура на выходе горячая
    maximum_heat_pressure_loss = '50'  # Максимальные потери давления Тепло
    maximum_cold_pressure_loss_value = '50'  # Максимальные потери давления Холод
    maximum_working_pressure_value = '30'  # Максимальное рабочее давление
    surface_reserve_value = '0'  # Запас поверхности
    flow_direction_value = 'Противоток'  # Направление потока

    divide_specified_load_into_value = '1'  # Разбить указанную нагрузку на
    number_of_bphe_with_specified_load_value = '1'  # Количество ППТО с указанной нагрузкой

    page = MainPage(browser, link_open)
    page.open()
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_VODOKOMFORT, TestEnvironment.PASSWORD_TST_VODOKOMFORT)

    page = ProfileMenuUser(browser, link_open)
    page.click_profile()
    full_name_user = page.save_user_name()
    print(full_name_user, 'Имя пользователя')

    page = ConfiguratorPptoEvaporatorPage(browser, link_configurator_ppto)
    page.open()
    page.go_to_title_design_calculations_single_phase()
    page.load_must_be_in_kwt()
    page.load_value_check(load_value)
    page.checking_type_of_coolant_medium_hot(type_of_coolant_medium_hot)
    page.checking_type_of_coolant_medium_cold(type_of_coolant_medium_cold)
    page.checking_inlet_temperature_hot_value(inlet_temperature_hot_value)
    page.checking_inlet_temperature_cold_value(inlet_temperature_cold_value)
    page.checking_outlet_temperature_hot_value(outlet_temperature_hot_value)
    page.checking_outlet_temperature_cold_value(outlet_temperature_cold_value)
    page.expense_hot_field_must_be_empty()
    page.expense_cold_field_must_be_empty()
    page.checking_maximum_heat_pressure_loss_value(maximum_heat_pressure_loss)
    page.checking_maximum_cold_pressure_loss_value(maximum_cold_pressure_loss_value)
    page.checking_maximum_working_pressure_value(maximum_working_pressure_value)
    page.checking_surface_reserve_value(surface_reserve_value)
    page.checking_flow_direction_value(flow_direction_value)
    page.click_btn_create_a_questionnaire()

    page.checking_your_name_in_name_input_field(full_name_user)
    page.checking_e_mail_address_in_input_email(e_mail_user)
    page.checking_value_in_field_split_specified_load_into(divide_specified_load_into_value)
    page.checking_value_in_number_of_bphe_with_specified_load_field(number_of_bphe_with_specified_load_value)
    page.selecting_check_box_for_consent_to_processing_of_personal_data()
    page.phone_input()
    page.click_btn_send_to_technical_support()
