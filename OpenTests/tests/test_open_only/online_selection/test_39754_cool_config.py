import allure
import pytest

from config import ProdEnvironment
from open_pages.cart_page.cart_page import CartPage
from open_pages.cart_page.cart_shared_page.cart_shared_page import CartSharedPage
from open_pages.header.header_page import Header
from open_pages.main_page.main_page import MainPage
from open_pages.selection_online_tools_all.cool_confi.cool_config_page import CoolConfigPage, CoolingDiagramsPage, \
    CoolingCompressorsPage, CoolConfigExpansionValvesPage, CoolConfigNonReturnValvesPage, CoolConfigSelectPipelinesPage
from open_pages.selection_tools_modal.selection_tools_modal import SelectionToolsModalPage

link_open = ProdEnvironment.OPEN_URL


def go_to_cool_config_page(browser):
    """Авторизация и открытие страницы подбора Cool Config"""
    page = MainPage(browser, link_open)
    page.open()
    page.authorization_from_main_page(ProdEnvironment.EMAIL_OPEN_PROD, ProdEnvironment.PASSWORD_OPEN_PROD)
    page = Header(browser, link_open)
    page.click_basket()

    page = CartPage(browser, link_open)
    page.click_empty_trash()

    page = Header(browser, link_open)
    page.go_to_option_tools()
    page = SelectionToolsModalPage(browser, link_open)
    page.click_tab_refrigeration_technology()
    page.go_to_cool_config()


@allure.feature('Опеновские тесты')
@allure.story('Подбор Cool Config блок Схемы Холодоснабжения')
@pytest.mark.prod
def test_cooling_diagrams(browser):
    """Подбор Cool Config блок Схемы Холодоснабжения"""
    go_to_cool_config_page(browser)
    # Переход на подбор Схемы Холодоснабжения
    page = CoolConfigPage(browser, link_open)
    page.click_menu_to_cooling_diagrams()
    page = CoolingDiagramsPage(browser, link_open)
    page.click_btn_select_compressors_and_packing()
    # Скачивание документов
    page.click_btn_download_pdf()
    page.click_btn_download_xls()
    page.click_btn_generate_list_of_code()
    # Добавление кодов в Корзину
    page.click_btn_add_code_in_sales()

    page = CartSharedPage(browser, link_open)
    list_article_page_shared = sorted(page.save_list_article_on_page())

    page.click_btn_add_sales_page_shared_card()

    page = CartPage(browser, link_open)
    list_article_page_cart = sorted(page.save_list_articles_in_cart())
    for idx, code in enumerate(list_article_page_cart):
        auto_correct = page.check_if_there_is_code_autocorrect(code)
        if len(auto_correct) > 0:
            old_code = auto_correct[0]
            list_article_page_cart[idx] = old_code

    if list_article_page_cart != list_article_page_shared:
        print(f'Артикула на странице "С вами поделились корзиной" - ({list_article_page_shared}) не соответствуют '
              f'артикулам в корзине - ({list_article_page_cart})')
    page.click_empty_trash()


@allure.feature('Опеновские тесты')
@allure.story('Подбор Cool Config блок Холодоснабжения')
@pytest.mark.prod
def test_selection_of_compressors(browser):
    """Подбор Cool Config блок Холодоснабжения"""
    page = MainPage(browser, link_open)
    page.open()
    page = Header(browser, link_open)
    page.go_to_option_tools()
    page = SelectionToolsModalPage(browser, link_open)
    page.click_tab_refrigeration_technology()
    page.go_to_cool_config()
    # Подбор
    page = CoolConfigPage(browser, link_open)
    page.click_menu_compressors()
    page = CoolingCompressorsPage(browser, link_open)
    page.click_btn_select_compressor()
    num_model = page.save_first_num_model()
    page.click_btn_download_first_code(num_model)
    window_cooling_compressors = browser.current_window_handle  # Вкладка подбор компрессоров
    page.click_btn_open()
    browser.switch_to.window(window_cooling_compressors)
    page.click_btn_buy()

    page = CartSharedPage(browser, link_open)
    list_article_page_shared = page.save_list_article_on_page()

    page.click_btn_add_sales_page_shared_card()

    page = CartPage(browser, link_open)
    list_article_page_cart = page.save_list_articles_in_cart()

    assert list_article_page_cart == list_article_page_shared, \
        f'Артикула на странице "С вами поделились корзиной" - ({list_article_page_shared}) не соответствуют ' \
        f'артикулам в корзине - ({list_article_page_cart})'
    page.click_empty_trash()


@allure.feature('Опеновские тесты')
@allure.story('Подбор Cool Config блок Расширительные клапаны')
@pytest.mark.prod
def test_selection_of_expansion_valves(browser):
    """Подбор Cool Config блок Расширительные клапаны"""
    go_to_cool_config_page(browser)
    page = CoolConfigPage(browser, link_open)
    page.click_menu_selection_of_expansion_valves()
    page = CoolConfigExpansionValvesPage(browser, link_open)
    page.click_btn_select_expansion_valves()
    page.click_btn_open_first_code()
    page.click_btn_buy_expansion_valves()
    page = CartPage(browser, link_open)
    page.click_btn_add_sales_page_shared_card()


@allure.feature('Опеновские тесты')
@allure.story('Подбор Cool Config блок Обратные клапаны')
@pytest.mark.prod
def test_check_non_return_valve_selection(browser):
    """Подбор Cool Config блок Обратные клапаны"""
    go_to_cool_config_page(browser)
    page = CoolConfigPage(browser, link_open)
    page.click_menu_non_return_valve_selection()
    page = CoolConfigNonReturnValvesPage(browser, link_open)
    page.click_btn_select_non_return()
    page.click_btn_buy_non_return()

    page = CartSharedPage(browser, link_open)
    list_article_page_shared = page.save_list_article_on_page()

    page.click_btn_add_sales_page_shared_card()

    page = CartPage(browser, link_open)
    list_article_page_cart = page.save_list_articles_in_cart()

    assert list_article_page_cart == list_article_page_shared, \
        f'Артикула на странице "С вами поделились корзиной" - ({list_article_page_shared}) не соответствуют ' \
        f'артикулам в корзине - ({list_article_page_cart})'


@allure.feature('Опеновские тесты')
@allure.story('Подбор Cool Config блок Трубопроводы')
@pytest.mark.prod
def test_select_pipelines(browser):
    """Подбор Cool Config блок Трубопроводы"""
    go_to_cool_config_page(browser)
    page = CoolConfigPage(browser, link_open)
    page.click_menu_pipelines()
    page = CoolConfigSelectPipelinesPage(browser, link_open)
    page.click_btn_select_pipelines()
