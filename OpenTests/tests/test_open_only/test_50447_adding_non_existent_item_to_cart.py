import allure
import pytest

from config import TestEnvironment
from open_pages.cart_page.cart_page import CartPage
from open_pages.header.header_page import Header
from open_pages.header.profile_menu_user import ProfileMenuUser
from open_pages.main_page.main_page import MainPage


def adding_non_existent_item_to_cart(browser, link_open: str, login: str, password: str, article: str):
    """Добавление в Корзину несуществующего артикула в Корзину"""
    page_main = MainPage(browser, link_open)
    page_header = Header(browser, link_open)
    page_cart = CartPage(browser, link_open)
    page_profile_menu = ProfileMenuUser(browser, link_open)

    article_for_adding = article.split()

    page_main.open()
    page_main.authorization_from_main_page(login, password)

    # Переход в Корзину
    page_header.click_basket()
    page_cart.click_empty_trash()

    # Выход из профиля
    page_profile_menu.click_profile()
    page_profile_menu.logout()

    # Действия в корзине
    page_header.click_basket()
    page_cart.type_product_in_input(article)
    page_cart.click_add_button()
    article_list_cart = page_cart.save_list_articles_in_cart()

    with allure.step('Проверяем, что наименования добавленных артикулов в корзину отображаются верно'):
        for el in article_list_cart:
            assert el in article_for_adding, f'Наименование добавленного артикула {el} не соответствует ожидаемому ' \
                                             f'наименованию из списка артикулов{article_for_adding}'

    page_main.authorization_from_main_page(login, password)

    with allure.step(
            'Проверяем, что наименования добавленных артикулов в корзину отображаются верно после авторизации'):
        for el in article_list_cart:
            assert el in article_for_adding, f'Наименование добавленного артикула {el} не соответствует ожидаемому ' \
                                             f'наименованию из списка артикулов{article_for_adding}'

    page_cart.click_empty_trash()


@pytest.mark.stage
@allure.feature('Опеновские тесты')
@allure.story('Добавление в Корзину несуществующего артикула в Корзину')
@pytest.mark.xdist_group(name="open")
@pytest.mark.parametrize('link', [TestEnvironment.LINK_OPEN_TST])
@pytest.mark.parametrize('login', [TestEnvironment.LOGIN_TST_VODOKOMFORT])
@pytest.mark.parametrize('password', [TestEnvironment.PASSWORD_TST_VODOKOMFORT])
@pytest.mark.parametrize('article', ['003G1014R001 003G1014R'])
def test_50447_adding_non_existent_item_to_cart(browser, link, login, password, article):
    """Добавление в Корзину несуществующего артикула в Корзину"""
    adding_non_existent_item_to_cart(browser, link, login, password, article)
