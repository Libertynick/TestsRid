import allure
import pytest
from selenium.common import TimeoutException

from config import TestEnvironment
from open_pages.calculation_page.calculation_page import CalculationPage
from open_pages.calculations_of_ol_and_pto_page.calculations_of_ol_and_pto import CalculationsOfOlAndPtoPage
from open_pages.cart_page.cart_page import CartPage
from open_pages.header.header_page import Header
from open_pages.header.profile_menu_user import ProfileMenuUser
from open_pages.main_page.main_page import MainPage


def authorization_and_go_to_calculation_page(browser):
    """Авторизация и переход на страницу Расчеты и ОЛ ПТО"""
    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.open()
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_VODOKOMFORT, TestEnvironment.PASSWORD_TST_VODOKOMFORT)

    page = ProfileMenuUser(browser, TestEnvironment.LINK_OPEN_TST)
    page.go_to_page_calculations_and_ol_pto()


@allure.feature('Опеновские тесты')
@allure.story('Проверка открытия страницы Расчета и ОЛ ПТО и поиск расчета')
@pytest.mark.stage
def test_checking_opening_of_page_and_searching_for_calculation(browser):
    """Проверка открытия страницы Расчета и ОЛ ПТО и поиск расчета"""

    authorization_and_go_to_calculation_page(browser)

    page = CalculationsOfOlAndPtoPage(browser, TestEnvironment.LINK_OPEN_TST)
    num_calc = page.copying_first_calculation_number_in_list()
    page.type_num_calc_in_search(num_calc)
    page.click_button_search(num_calc)


@allure.feature('Опеновские тесты')
@allure.story('Скачивание расчета ПТО')
@pytest.mark.stage
def test_download_calculations(browser):
    """Скачивание расчета ПТО"""

    authorization_and_go_to_calculation_page(browser)

    page = CalculationsOfOlAndPtoPage(browser, TestEnvironment.LINK_OPEN_TST)
    num_calc = page.copying_first_calculation_number_in_list()
    print(num_calc, 'Номер расчета')
    page.download_calculation_ru_from_first_calculation_in_list(num_calc)
    page.download_calculation_eng_from_first_calculation_in_list(num_calc)

    num_ol = page.copy_questionnaire_number_from_first_calculation_in_list()
    print(num_ol, 'Номер опросного листа из первого расчета в списке')
    page.downloading_ol_from_first_calculation_in_list(num_ol)
    page.download_all_files_at_once_from_first_calculation_in_list(num_ol)


@allure.feature('Опеновские тесты')
@allure.story('Проверка Изменения данных расчета ПТО')
@pytest.mark.stage
def test_check_changes_in_pto_calculation_data(browser):
    """Проверка Изменения данных расчета ПТО"""
    name_calc = 'selenium_web_test'
    description_calc = 'description_selenium_web_test 123'

    authorization_and_go_to_calculation_page(browser)

    page = CalculationsOfOlAndPtoPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.opening_a_first_calculation_in_list()

    page = CalculationPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_button_edit()
    page.entering_name_in_modal_edit(name_calc)
    page.entering_description_in_modal_edit(description_calc)
    page.click_button_save_in_modal_edit()
    page.checking_calculation_name_changes(name_calc)
    page.checking_calculation_description_changes(description_calc)


@allure.feature('Опеновские тесты')
@allure.story('Добавление расчета в корзину')
@pytest.mark.stage
@pytest.mark.xdist_group(name="open")
def test_adding_payment_to_cart(browser):
    """Добавление расчета в корзину"""
    count_for_adding = 3

    page = MainPage(browser, TestEnvironment.LINK_OPEN_TST)
    page.open()
    page.authorization_from_main_page(TestEnvironment.LOGIN_TST_VODOKOMFORT, TestEnvironment.PASSWORD_TST_VODOKOMFORT)

    page = Header(browser, TestEnvironment.LINK_OPEN_TST)
    page.click_basket()
    page = CartPage(browser, TestEnvironment.LINK_OPEN_TST)
    try:
        page.click_empty_trash()
    except TimeoutException:
        pass

    page = ProfileMenuUser(browser, TestEnvironment.LINK_OPEN_TST)
    page.go_to_page_calculations_and_ol_pto()

    page = CalculationsOfOlAndPtoPage(browser, TestEnvironment.LINK_OPEN_TST)
    price_first_calc_on_page_calculation_list = page.save_price_first_calculation()
    # print(
    #     price_first_calc_on_page_calculation_list, 'Стоимость первого расчета в списке на странице Расчеты и ОЛ ПТО')
    page.opening_a_first_calculation_in_list()

    page = CalculationPage(browser, TestEnvironment.LINK_OPEN_TST)
    price_calc_on_page_calculation = page.save_price_calculation_on_page_calculation()
    # print(f'{price_calc_on_page_calculation} - стомость расчета на странице Расчет')
    assert price_first_calc_on_page_calculation_list == price_calc_on_page_calculation, \
        f'Стоимость расчета - ({price_first_calc_on_page_calculation_list})на странице списка Расчеты и ОЛ ПТО ' \
        f'не соответствует стоимости - ({price_calc_on_page_calculation}) расчета на странице Расчет'

    page.click_button_adding_to_cart_on_page_calculation()
    count_product_for_adding_step_1 = page.save_count_products_in_modal_adding_products(
    )  # Количество товара для добавления
    article_calc = page.save_article_in_modal_adding_product()
    # print(f'{article_calc} - артикул расчета в модалке добавления товаров')
    price_calc_in_modal_adding = page.save_price_calculation_in_modal_adding_products()
    # print(f'{price_calc_in_modal_adding} - (стоимость расчета в модалке добавления товаров)')
    assert price_calc_in_modal_adding == price_calc_on_page_calculation, \
        f'Стоимость расчета в модалке добавления товаров - ({price_calc_in_modal_adding}) не соответствует ' \
        f'стоимости расчета на старнице Расчет - ({price_calc_on_page_calculation})'

    page.click_button_adding_to_cart_in_modal_for_adding_products_to_cart()
    page.click_button_continue_shopping()
    count_products_in_cart_icon = page.save_count_products_in_cart_icon()
    assert count_products_in_cart_icon == count_product_for_adding_step_1, \
        f'Количество товара в иконке Корзина ({count_products_in_cart_icon}) не соответствует количеству ' \
        f'товара для добавления ({count_product_for_adding_step_1})'

    # Добавление товара с количеством более одного
    page.click_button_adding_to_cart_on_page_calculation()
    page.increase_in_quantity_of_goods_in_modal_adding_products(count_for_adding)
    page.click_button_adding_to_cart_in_modal_for_adding_products_to_cart()
    page.click_button_go_to_cart()
    count_products_in_cart_icon = page.save_count_products_in_cart_icon()
    assert count_products_in_cart_icon == count_for_adding + count_product_for_adding_step_1, \
        f'Количество товара в иконке Корзина ({count_products_in_cart_icon}) не соответствует количеству ' \
        f'товара для добавления ({count_for_adding})'

    # Корзина
    page = CartPage(browser, TestEnvironment.LINK_OPEN_TST)
    article_list_in_cart = page.save_list_articles_in_cart()
    # print(article_list_in_cart, 'Список артикулов в корзине')
    for article in article_list_in_cart:
        assert article == article_calc, \
            f'Код артикула в модалке добавления товара на странице расчета - ({article_calc}) не соответствует ' \
            f'одному из кодов в корзине - {article_list_in_cart}'

    page.click_empty_trash()

    # Корзина. Сравнение стоимости по прайсу
    # price_cart_list = page.save_price_list_all_product()
    # print(f'{price_cart_list} - прайс лист в корзине')

# Сейчас на тесте цена в корзине и на странице расчета не равны, это именно на тесте так, на проде все ок,
# информацция от Логнова Максима

# for price in price_cart_list:
#     assert price == price_calc_in_modal_adding, \
#         f'один из элементов списка стоимости в корзине - ' \
#         f'{price_cart_list} не соответствует стоимости в модалке добавления товара со страницы Расчет - ' \
#         f'{price_calc_in_modal_adding}'
